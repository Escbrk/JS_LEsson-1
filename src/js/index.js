// const shouldRenew = confirm('Wanna continue subscription?');
// console.log(shouldRenew);

// let quantity = prompt('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: ')
// quantity = Number(quantity);
// console.log(quantity);
// console.log(typeof quantity)

// let elementWidth = '50px';
// const result = Number.parseInt(elementWidth);
// console.log(result);

// let elementHeight = '200.74px';
// elementHeight = Number.parseFloat(elementHeight);
// console.log(elementHeight);

// let salary = 1300.16472;
// salary = Number(salary.toFixed(2));
// // salary = Number(salary);
// // console.log(salary.toFixed());
// console.log(salary);
// console.log(typeof salary);

// console.log(Math.PI.toFixed(2));

// const base = 2;
// const power = 5;

// // const result = Math.pow(base, power)
// console.log(base ** power);

// let base = prompt('–î–∞–≤–∞–π —á–∏—Å–ª–æ');
// base = Number(base);
// console.log(base);

// let power = prompt('–î–∞–≤–∞–π —Å—Ç–µ–ø–µ–Ω—å')

// power = Number(power);
// console.log(power);

// const result = base ** power;
// console.log(result);25

// console.log(parseInt(Math.random() * (50 - 30) + 30));
// console.log(Math.random() * (max - min) + min);

// const max = 50;
// const min = 30;
// const result = Math.round(Math.random() * (max - min) + min);

// console.log(result);

// const colors = ['tomato', 'teal', 'orange', 'deeppink', 'skyblue'];
// const max = colors.length - 1;
// const min = 0;
// const index = Math.round(Math.random() * (max - min) + min);
// const color = colors[index];
// console.log(color);
// document.body.style.backgroundColor = color;

// const firstName = 'Chelsy';
// const lastName = 'Emerald';
// const fullName = `${firstName} ${lastName}`;

// console.log(fullName);

// const room = 716;
// const type = 'VIP';

// // const welcomeMsg = '–ì–æ—Å—Ç—å ' + fullName + ' –ø–æ—Å–µ–ª—è–µ—Ç—Å—è –≤ ' + type + ' –Ω–æ–º–µ—Ä' + room;
// const welcomeMsg = `–ì–æ—Å—Ç—å ${fullName} –ø–æ—Å–µ–ª—è–µ—Ç—Å—è –≤ ${type} –Ω–æ–º–µ—Ä ${room}`;

// console.log(welcomeMsg);

// const brand = 'Samsung';
// const normalizedBrand = brand.toLowerCase();

// let brand = 'Samsung';
// brand = brand.toLowerCase();
// console.log(brand);

// let brand = 'samSUnG';
// console.log(brand[4]);
// console.log(brand.slice(1).toLowerCase());

// brand = brand[0] + brand.slice(1).toLowerCase();
// console.log(brand);

// const blacklistedWorld1 = '—Å–ø–∞–º';
// const blacklistedWorld2 = '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞';

// const string1 = '–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–∏–Ω—Ü –ê–±–¥—É–ª, —ç—Ç–æ –Ω–µ —Å–ø–∞–º, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –º–∏–ª–ª–∏–æ–Ω!';
// const string2 = '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –†–ê–°–ü–†–û–î–ê–ñ–ê —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!';
// const string3 = '–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è #fatlivesmatter';

// console.log(string1.toLowerCase().includes(blacklistedWorld1, blacklistedWorld2));
// console.log(string2.toLowerCase().includes(blacklistedWorld2, blacklistedWorld2));
// console.log(string3.toLowerCase().includes(blacklistedWorld2, blacklistedWorld2));

// console.log(4 && 'hello');
// console.log(false || 0 || null || 5 || 10);
// console.log(!true);

// const x1 = 10;
// const x2 = 30;
// const number = 50;
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1}?`, number < x1);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –ø–æ—Å–ª–µ ${x2}?`, number > x2);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –æ—Ç ${x1} –¥–æ ${x2}?`, number > x1 && number < x2);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1} –∏–ª–∏ –ø–æ—Å–ª–µ ${x2}?`, number < x1 || number > x2);

// const isOnline = true;
// const isFriend = true;
// const isDnd = false;

// const canOpenChat = isOnline && isFriend && !isDnd;
// console.log('–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç?', canOpenChat);

// const sub = 'pro';
// const canAccesContent = sub === 'pro' || sub === 'vip';
// console.log('–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?', canAccesContent);

// if (5 > 30) {
//     console.log('qweqwe');
// }

// if (5 > 30) {
//     console.log('x > y');
// } else {
//     console.log('x < y');
// }

// const salary = 1500;

// if (salary <= 500) {
//     console.log('Level 1')
// } else if(salary > 500 && salary <= 1500) {
//     console.log('Level 2')
// } else if (salary > 1500 && salary <= 3000) {
//     console.log('Level 3');
// } else {
//     console.log('Level 4');
// }

// const balance = 1000;
// // let message;

// // if (balance > 0) {
// //     message = '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å';
// // } else {
// //     message = '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å';
// // }

// // console.log(message);

// const message = balance > 0 ? '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å' : '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å';
// console.log(message);

// const b = 10;

// if (true) {
//     console.log(b)

//     var a = 5;
// }

// console.log(a);

// const stars = 1;
// let price;

// if (stars === 1) {
//     price = 20;
// } else if (stars === 2) {
//     price = 30;
// } else if (stars === 3) {
//     price = 50;
// } else if (stars === 4) {
//     price = 70;
// } else if (stars === 5) {
//     price = 120;
// } else {
//     console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// switch (stars) {
//     case 1:
//         price = 20;
//         break;

//     case 2:
//         price = 30;
//         break;

//     case 3:
//         price = 50;
//         break;

//     case 4:
//         price = 70;
//         break;

//     case 5:
//         price = 120;
//         break;

//     default:
//         console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// console.log(price);

// const stars = 1;
// let price;

// if (stars === 1 || stars === 2) {
//     price = 20;
// } else if (stars === 3 || stars === 4) {
//     price = 30;
// } else if (stars === 5) {
//     price = 120;
// } else {
//     console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// switch (stars) {
//     case 1:
//     case 2:
//         price = 20;
//         break;

//     case 3:
//     case 4:
//         price = 30;
//         break;

//     case 5:
//         price = 120;
//         break;

//     default:
//         console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// console.log(price);

// const options = 1;
// let message;

// switch (options) {
//     case 1:
//         message = '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–≤—Ç—Ä–∞ —Å 12:00 –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ';
//         break;

//     case 2:
//         message = '–ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –∑–∞–∫–∞–∑ –∑–∞–≤—Ç—Ä–∞ —Å 9:00 –¥–æ 18:00';
//         break;

//     case 3:
//         message = '–ü–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
//         break;

//     default:
//         message = '–í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä';
// }

// console.log(message);

// for (let i = 0; i <= 10; i += 1) {
//     console.log(i);
// }

// console.log();

// for (let i = 0; i <= 10; i++) {
//     console.log(i);
// }

// let a = 10;
// const b = a++;

// console.log(a)
// console.log(b);

// const minSalary = 500;
// const maxSalary = 5000;
// const employees = 3;
// let totalSalary = 0;

// for (let i = 1; i <= employees; i += 1) {
//     const salary = Math.round(Math.random() * (maxSalary - minSalary) + minSalary);
//     console.log(`–ó–ü —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–æ–º–µ—Ä ${i} - ${salary}`);

//     totalSalary += salary;

// }
//     console.log('totalSalary: ', totalSalary);

// const min = 0;
// const max = 10;
// let total = 0;

// for (let i = min; i <= max; i += 1) {
//     console.log(i);
//     if (i % 2 === 0) {
//         console.log('–ß–µ—Ç–Ω–æ–µ: ', i);
//         total += i;
//     }
// }

// console.log('total: ', total);

// let balance = 10000;
// const payment = 2000;

// console.log(
//     `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ${payment} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É`
// );

// if (balance >= payment) {
//     console.log('ok');
//     balance -= payment;

//     console.log(`–ù–∞ —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å ${balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
// } else {
//     console.log('–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏!');
// }
// console.log('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

// üçé
// üçí

// const apple = 'üçé';
// const appleQuantity = 8;
// const applePrice = 34;
// const appleMessage = `–£ –Ω–∞—Å –µ—Å—Ç—å ${appleQuantity} ${apple}, cost: ${applePrice * appleQuantity}`;
// console.log(appleMessage);

// const cherry = 'üçí';
// const cherryQuantity = 3;
// const cherryPrice = 72;
// const cherryMessage = `–£ –Ω–∞—Å –µ—Å—Ç—å ${cherryQuantity} ${cherry}, cost: ${cherryPrice * cherryQuantity}`;
// console.log(cherryMessage);

// const totalMinutes = 1441;
// const hrs = Math.floor(totalMinutes / 60);
// const mins = totalMinutes % 60;

// const result = `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
// console.log(result);

// const incomingValue = 0;
// const defaultValue = 10;
// const value = incomingValue ?? defaultValue;
// console.log(value);

// const value = 10;

// if (value === 10) {
//     console.log('value is 10!!');
// }

// if (value === 10) {
//      console.log('value is 10!!');
// } else {
// console.log("value is't 10!");
// }

// const value = 10;

// if (value === 1) {
//     console.log('1');
// } else if (value >= 10 && value <= 20) {
//     console.log('2!');
// } else {
//     console.log('3');
// }

// const value = 4;

// switch (value) {
//     case 1:
//         console.log(1);
//         break;

//     case 2:
//         console.log(2);
//         break;

//     case 3:
//         console.log(3);
//         break;

//     case 4:
//         console.log(4);
//         break;

//     default:
//         console.log('default');
//         break;
// }

// const age = 25;
// let msg = age >= 18 && age <= 30 ? '–í—ã –¥–æ–ø—É—â–µ–Ω—ã!' : '–í—ã –Ω–µ –¥–æ–ø—É—â–µ–Ω—ã!';

// console.log(msg);

// let number = 10;

// if (true) {
//     let number = 20;
//     if (true) {
//         number = 30;
//     }
// }

// console.log(number);

// for (let i = 1; i <= 10; i += 1) {
//     // if (i === 5) {
//     //     continue;
//     //     // break;
//     // }
//     // if (i === 8) {
//     //     continue;
//     // }

//     // if (i % 2 === 0) {
//     //     console.log(i);
//     // }
// }

// const PASSWORD = '12345';
// let userPassword = prompt('Enter a password');

// // if (PASSWORD === userPassword) {
// //     alert('Welcome')
// // } else {
// //     alert('Wrong password')
// // }

// while (PASSWORD !== userPassword) {
//     userPassword = prompt('Wrong password! Try again!!!');
// }
// alert('Welcome');

// let i = 0;

// do {
//     console.log(i);
//     i += 1;
// } while (i <= 10);

// const message = prompt('Enter color').toLowerCase();
// // const color = Number(message);
// let action;

// switch (message) {
//     case 'red':
//         action = 'STOP';
//         break;

//     case 'yellow':
//         action = 'Ready';
//         break;
//         action = '';

//     case 'green':
//         action = 'Go';
//         break;

//     default:
//         action = 'Be careful';
//         break;
// }

// console.log(action);

// function check(question, answer) {
//     console.log(question, answer);
//     const userAnswer = prompt(question).toLowerCase();
//     return userAnswer === answer;
// }

// console.log(check('–•–æ—Ç—è –Ω–µ —Å–∞–º–æ–ª–µ—Ç, –∞ –∫—Ä—ã–ª–∞—Ç—ã–π, –±–µ–∑ –∫—Ä—ã–ª—å–µ–≤ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!', '–≤–µ—Ç—Ä—è–∫'));

// console.log(check('–ß–µ—Ä–µ–∑ –≤–æ–¥—É –æ–Ω –ø—Ä–æ–≤–æ–¥–∏—Ç, –∞ —Å–∞–º —Å –º–µ—Å—Ç–∞ –≤–µ–∫ –Ω–µ —Å—Ö–æ–¥–∏—Ç!', '–º–æ—Å—Ç'));

// console.log('1' != 1);

// console.log('P'.charCodeAt());
// console.log('a'.charCodeAt());

// const quantity = Number(prompt('text your variant'));22
// console.log(quantity);
// console.log(typeof quantity);

//? ___________________________________________

// let elementWidth = '50px';

// elementWidth = Number.parseInt(elementWidth);
// console.log('element Width', elementWidth);

// let elementHeight = '200.74px';

// elementHeight = Number.parseFloat(elementHeight);
// console.log('element Height', elementHeight);

// let salary = 1300.16472;
// salary = Number(salary.toFixed(2));

// console.log(salary);

//? ___________________________________________

// const base = 2;
// const power = 5;

// const result = Math.pow(base, power);
// console.log(result);
// console.log(base ** power);

//? ___________________________________________

// const base = Number(prompt('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: '));
// console.log(base)
// const power = Number(prompt('–í–≤–µ–¥–∏ —Å—Ç–µ–ø–µ–Ω—å: '));
// console.log(power);

// console.log(base ** power);

//? ___________________________________________

// const colors = ['tomato', 'teal', 'orange', 'deeppink', 'skyblue', 'green'];
// const max = colors.length - 1;
// const min = 0;

// const index = Math.round(Math.random() * (max - min) + min);
// const color = colors[index];
// console.log(color);

// document.body.style.backgroundColor = color;

//? ___________________________________________

// let brand = prompt('Text brand:')
// brand = brand[0].toUpperCase() + brand.slice(1).toLowerCase()
// console.log(brand)

//? ___________________________________________

// const x1 = 10;
// const x2 = 30;

// const number = 50;

// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1}`, number < x1);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –ø–æ—Å–ª–µ ${x2}`, number > x2);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –æ—Ç ${x1} –¥–æ ${x2}`, number > x1 && number < x2);
// console.log(
//     `–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1} –∏–ª–∏ –ø–æ—Å–ª–µ ${x2}`,
//     number < x1 || number > x2
// );

// //? ___________________________________________

// const isOnline = true;
// const isFriend = true;
// const isDnd = false;

// const canOpenChat = isOnline && isFriend && !isDnd;

// console.log('–ú–æ–∂–µ–æ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç? ', canOpenChat);

// //? ___________________________________________

// const sub = 'vip';
// console.log(sub);

// const canAccesContent = sub.toLowerCase() === 'pro' || sub.toLowerCase() === 'vip';
// console.log('–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø?', canAccesContent);

// //? ___________________________________________

// const balance = 1000
// let message

//? ___________________________________________

// const balance = 1000;

// const message = balance >= 0 ? '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å' : '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å'; //! –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä

// /* –û–Ω –∑–∞–º–µ–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫—É if -> else

//     if (balance >= 0) {
//     message = '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å'
//     } else {
//     message = '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å'
//     }

// */
// console.log(message);

//? ___________________________________________

// const stars = 1;
// let price;

// switch (stars) {
//     case 1:
//     case 2:
//         price = 20;
//         break;

//     case 3:
//     case 4:
//         price = 30;
//         break;

//     case 5:
//         price = 120;
//         break;

//     default:
//         console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// console.log(price);

//? ___________________________________________

// const option = 1;
// let message = ' ';

// switch (option) {
//     case 1:
//         message = '–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–≤—Ç—Ä–∞ —Å 12:00 –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ';
//         break;

//     case 2:
//         message = '–ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –∑–∞–∫–∞–∑ –∑–∞–≤—Ç—Ä–∞ —Å 9:00 –¥–æ 18:00';
//         break;

//     case 3:
//         message = '–ü–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
//         break;
//     default:
//         message = '–í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä';
// }

// console.log(message);

//? ___________________________________________

// for (let i = 0; i <= 10; i += 1) {
//     console.log(i)
// }
// console.log('qweqwe')

//? ___________________________________________

// const minSalary = 500;
// const maxSalary = 5000;

// const employees = 6;
// let totalSalary = 0;

// for (let i = 1; i <= employees; i += 1) {
//     const salary = Math.round(Math.random() * (maxSalary - minSalary) + minSalary);
//     console.log(`–ó–ü –†–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–æ–º–µ—Ä ${i} - `, salary);
//     totalSalary += salary;
// }

// console.log('totalSalary: ', totalSalary);

//? ___________________________________________

// const min = 0;
// const max = 7;
// let total = 0;

// for (let i = min; i <= max; i += 1) {

//     if (i % 2 !== 0) {
//         console.log('–ù–µ —á–µ—Ç–Ω–æ–µ: ', i)
//         continue
//     }

//     console.log('–ß–µ—Ç–Ω–æ–µ: ', i);
//     total += i;
// }

// console.log(total);

//? ___________________________________________

// let balance = 10000;
// const payment = 2000;

// console.log(
//     `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ${payment} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É`
// );

// if (payment <= balance) {
//     balance -= payment;
//     console.log('–í—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏...   –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!');
//     console.log(`–ù–∞ —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å ${balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
// } else {
//     console.log('–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
// }

// console.log('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

//? ___________________________________________

// let totalSpent = 2000;
// let payment = 500;
// let discount = 0;

/*

    –ï–©–ï –û–î–ò–ù –í–ê–†–ò–ê–ù–¢ –†–ï–®–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò

if (totalSpent < 100) {
    console.log('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏');
} else if (totalSpent >= 100 && totalSpent <= 1000) {
    console.log('–ë—Ä–æ–Ω–∑–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 2%');
    discount = 0.02;
} else if (totalSpent >= 1000 && totalSpent <= 5000) {
    console.log('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 5%');
    discount = 0.05;
} else {
    console.log('–ó–æ–ª–æ—Ç–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 10%');
    discount = 0.1;
}

*/

// if (totalSpent >= 100 && totalSpent <= 1000) {
//     console.log('–ë—Ä–æ–Ω–∑–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 2%');
//     discount = 0.02;
// } else if (totalSpent >= 1000 && totalSpent <= 5000) {
//     console.log('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 5%');
//     discount = 0.05;
// } else if (totalSpent >= 5000) {
//     console.log('–ó–æ–ª–æ—Ç–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 10%');
//     discount = 0.1;
// } else {
//     console.log('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏');
// }

// console.log(`–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${payment} —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount * 100}%`);
// console.log(payment);

// payment -= payment * discount
// totalSpent += payment;

// console.log(`–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${totalSpent}`);

//? ___________________________________________

// const btnAdd = document.querySelector('button[data-add]');
// const btnReset = document.querySelector('button[data-reset]');
// const valueInput = document.querySelector('input[data-value]');
// const outputEl = document.querySelector('.js-output span');

// console.log(outputEl);

// console.log(btnAdd);
// console.log(valueInput);

// let total = 0;

// console.dir(btnAdd);
// console.dir(btnAdd.textContent);
// btnAdd.textContent = 'qweqwe'

// btnAdd.addEventListener('click', function () {
//     console.log('click hehehe');

//     const value = Number(valueInput.value);

//     console.log(typeof value, value);

//     total += value;

//     // outputEl.textContent = `–°—É–º–º–∞: ${total}`;
//     outputEl.textContent = total;
//     valueInput.value = '';
// });

// btnReset.addEventListener('click', function () {
//     total = 0
//     outputEl.textContent = total;
// });

/*  //!–ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏
//*      btnAdd.addEventListener('click', () => {
//*          console.log('click hehehe');
//*      })
*/

//? ___________________________________________

// function makeTransaction(pricePerDroid, orderedQuantity, customerCredits) {
//     let message;
//     const totalPrice = pricePerDroid * orderedQuantity;
//     // Change code below this line
//     if (totalPrice > customerCredits) {
//         message = 'Insufficient funds!';
//         console.log(message);
//     } else {
//         customerCredits -= totalPrice;
//         message = `You ordered ${orderedQuantity} droids, you have ${customerCredits} credits left`;
//         console.log(message);
//     }
//     // Change code above this line
//     return message;
// }

// makeTransaction(3000, 5, 23000);

//? ___________________________________________

// const clients = ['Mango', 'Poly', 'Ajax', 'Alex'];

// console.log(clients);

// clients[0] = 'Pablo'
// clients[1] = 'Escobar'
// console.log(clients);

// console.log(clients.length);

// const lastElementIndex = clients.length - 1
// console.log(lastElementIndex);
// console.log(clients[lastElementIndex]);
//? ___________________________________________
// for (let i = 0; i < clients.length; i += 1) {
//     console.log(clients[i]);
// }

// for (const client of clients) {
//     console.log(client);
// }

// const string = 'JavaScript'

// for (const charecter of string) {
//     console.log(charecter);
// }
//? ___________________________________________
// const clientNameToFind = 'Poly'
// let message = '–ö–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!';

// for (const client of clients) {
//     if (client === clientNameToFind) {
//         message = '–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
//         break
//     }
//     // message = '–ö–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!';    //* –ò–ª–∏ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ü—ã–∫–ª–∞ for
// }

// console.log(message);
//? ___________________________________________
// const numbers = [1, 3, 14, 18, 4, 7, 29, 6, 34];
// const threshold = 15;

// for (let i = 0; i < numbers.length; i += 1) {
//     if (numbers[i] < threshold) {
//         continue;
//     }

//     console.log(`–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º ${threshold}: ${numbers[i]}`);
// }
//? ___________________________________________

// const a = ['Mango']
// const b = a

// console.log(a);
// console.log(b);

// a.push('Poly')
// console.log(a);
// console.log(b);

// a.push('Ajax')
// console.log(a);
// console.log(b);

//? ___________________________________________

// const name = 'Mango'
// console.log((name.split('')));

// const message = 'JavaScript —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ';
// console.log(message.split(' '));

// const words = ['JavaScript', '—ç—Ç–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'];

// console.log(words.join(''));
// console.log(words.join(' '));
// console.log(words.join('-'));

//? ___________________________________________

// const clients = ['Mango', 'Ajax', 'Poly', 'Kiwi'];

// console.log(clients.indexOf('Poly'));
// console.log(clients.indexOf('Monkong'));

// console.log(clients.includes('Poly'));
// console.log(clients.includes('Monkong'));

//? ___________________________________________

// const redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];
// const fruit = 'cherry';

// const hasFruit = redFruits.includes(fruit);

// if (hasFruit) {
//     console.log(`${fruit} is a red fruit`);
// }

//? ___________________________________________

// const numbers = []

// numbers.push(1)
// console.log(numbers)

// numbers.push(2);
// console.log(numbers);

// numbers.push(3);
// console.log(numbers);

// numbers.push(4);
// console.log(numbers);

// numbers.push(5);
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

//? ___________________________________________

// const clients = ['Mango', 'Ajax', 'Poly', 'Kiwi'];
// console.log(clients.slice(1, 3));
// console.log(clients.slice());
// console.log(clients.slice(1));
// console.log(clients.slice(2));

//? ___________________________________________

// const scores = [1, 2, 3, 4, 5];

// const deletedScores = scores.splice(0, 3)

// console.log(scores);
// console.log(deletedScores);

//? ___________________________________________

// const colors = ['red', 'green', 'blue'];

// colors.splice(2, 0, 'purple');
// console.log(colors);
// colors.splice(1, 0, 'yellow', 'pink');
// console.log(colors);

//? ___________________________________________

// const languages = ['C', 'C++', 'Java', 'JavaScript'];
// console.log(languages);

// languages.splice(1, 1, 'Python')
// console.log(languages);

// languages.splice(2, 1, 'C#', 'Swift', 'Go')
// console.log(languages);

//? ___________________________________________
//! –ú–µ—Ç–æ–¥ concat()

// const oldClients = ['Mango', 'Ajax', 'Poly', 'Kiwi'];
// const newClients = ['Monkong', 'Singu'];

// const allClientsWithOldFirst = oldClients.concat(newClients)
// console.log(allClientsWithOldFirst);

// const allClientsWithNewFirst = newClients.concat(oldClients)
// console.log(allClientsWithNewFirst);

// console.log(oldClients);
// console.log(newClients);

//? ___________________________________________
//! –§—É–Ω–∫—Ü–∏–∏

// function multiply(x, y, z) {
//     console.log('–ö–æ–¥ –¥–æ return –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ');

//     return x * y * z;

//     console.log('–≠—Ç–æ—Ç –ª–æ–≥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –æ–Ω —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ return');
// }

// let result = multiply(2, 3, 5);
// console.log(result)

// function multiply(x, y, z) {
//     console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${x * y * z}`);
// }

// console.log('–õ–æ–≥ –¥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ multiply');
// multiply(2, 3, 5); // –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω 30
// console.log('–õ–æ–≥ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ multiply');

// function count(countFrom = 0, countTo = 10, step = 1) {
//   console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);

//   for (let i = countFrom; i <= countTo; i += step) {
//     console.log(i);
//   }
// }

// count(1, 5); // countFrom = 1, countTo = 5, step = 1
// count(2); // countFrom = 2, countTo = 10, step = 1
// count(); // countFrom = 0, countTo = 10, step = 1
// count(3, 6)

//? ___________________________________________
//! –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ arguments

// function multiply() {
//   let total = 1;

//   for (const argument of arguments) {
//     total *= argument;
//   }

//   return total;
// }

// console.log(multiply(1, 2, 3)); //  6
// console.log(multiply(1, 2, 3, 4)); //  24
// console.log(multiply(1, 2, 3, 4, 5)); //  120
// console.log(multiply(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));

//? ___________________________________________
//! –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–∞

// function fn() {
//     const args = Array.from(arguments);
// }

// function fn(...args) {
//     console.log(args);
// }

// fn(1, 2, 3, 4, 'text')

// console.log(fn);

//? ___________________________________________
//! –ü–∞—Ç—Ç–µ—Ä–Ω ¬´–†–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç¬ª
//* –í–æ—Ç —ç—Ç–æ:

// function withdraw(amount, balance) {
//     if (amount === 0) {
//         console.log('–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è');
//     } else if (amount > balance) {
//         console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É');
//     } else {
//         console.log('–û–ø–µ—Ä–∞—Ü–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
//     }
// }

// withdraw(0, 300);
// withdraw(500, 300);
// withdraw(100, 300);

//*–ú–æ–∂–Ω–æ –∑–ø–º–µ–Ω–∏—Ç—å –≤–æ—Ç —ç—Ç–∏–º:

// function withdraw(amount, balance) {
//     if (amount === 0) {
//         console.log('–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è');
//         return;
//     }

//     if (amount > balance) {
//         console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É');
//         return;
//     }

//     console.log(`–û–ø–µ—Ä–∞—Ü–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞: -${amount}, —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: ${balance - amount} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
// }

// withdraw(0, 300);
// withdraw(500, 300);
// withdraw(100, 300);
// withdraw(155, 200)
// withdraw(200, 200);

//? ___________________________________________
//! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ

//* –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (function declaration):
// function multiply(x, y, z) {
//     console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${x * y * z}`);
// }

// multiply(2, 5, 6)

//* –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (function expression):
// const multiply = function (x, y, z) {
//     console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${x * y * z}`);
// }

// multiply(5, 6, 10)

//? ___________________________________________
//! –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤

// function fnA() {
//     console.log("–õ–æ–≥ –≤–Ω—É—Ä—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fnA –¥–æ –≤—ã–∑–æ–≤–∞ fnB");
//     fnB()
//      console.log("–õ–æ–≥ –≤–Ω—É—Ä—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fnA –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ fnB");
// }

// function fnB() {
//     console.log("–õ–æ–≥ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fnB");
// }

// console.log("–õ–æ–≥ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º fnA");
// fnA();
// console.log("–õ–æ–≥ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ fnA");

//? ___________________________________________

// function bar() {
//     console.log('bar');
// }

// function baz() {
//     console.log('baz');
// }

// function foo() {
//     console.log('foo');
//     bar();
//     baz();
// }

// foo();

//? ___________________________________________
//! –ú–∞—Å—Å–∏–≤—ã

// const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax']
// console.table(friends)
// // console.log(friends.length);
// console.log(friends[2]);

// friends[1] = 'qweqwe'
// friends[4] = 'qweqweqwe'
// console.table(friends);

// const lastIndex = friends.length - 1
// console.log(lastIndex);

//? ___________________________________________
//! –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é

// let a = 10
// let b = a

// console.log(a);
// console.log(b);

// a = 20

// console.log(a);
// console.log(b);

//! –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ —Å—Å—ã–ª–∫–µ

// const a = [1, 2, 3]
// const b = a

// console.log('a', a);
// console.log('b', b);

// a[0] = 500

// console.log('a', a);
// console.log('b', b);
// console.log(a === b); // true

// console.log([1, 2, 3] === [1, 2, 3]); // false

//? –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞:

// const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax']
// // console.table(friends);

// for (let i = 0; i < friends.length; i += 1) {
//     // console.log(friends[i]);
//     friends[i] += `-${i + 1}`
// }

// for (const friend of friends) {
//     console.log(friend);
// }

// console.table(friends);

//? ___________________________________________

// const cart = [54, 28, 105, 70, 92, 17, 120];
// let total = 0;

// // for (let i = 0; i < cart.length; i += 1) {
// //     console.log(cart[i]);

// //     total += cart[i]
// // }
// //* –ó–∞–¥–∞—á–∫–∞ –±–µ–∑ –Ω–∞–ª–æ–≥–∞:
// // for (const value of cart) {
// //     total += value
// // }

// //* –ó–∞–¥–∞—á–∫–∞ + —Ç–∞–∫—Å:
// for (let i = 0; i < cart.length; i += 1) {
//     // cart[i] = Math.round(cart[i] * 1.05)
//     cart[i] *= 1.05

//     total += cart[i]
// }

// console.log('Total $:', total.toFixed(2));

//? ___________________________________________

// const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
// let total = 0;

// // for (let i = 0; i < numbers.length; i += 1) {
// //     // console.log(numbers[i]);
// //     if (numbers[i] % 2 === 0) {
// //         console.log('–ß–µ—Ç–Ω–æ–µ');

// //         total += numbers[i]
// //     }
// // }

// for (const number of numbers) {
//     if (number % 2 === 0) {
//         console.log(`${number} - —á–µ—Ç–Ω–æ–µ`);
//         total += number;
//     }
// }
// //* –õ–æ–≥–∏–∫–∞ –æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ:
// // for (const number of numbers) {
// //     if (number % 2 !== 0) {
// //         console.log(`${number} - –Ω–µ—á–µ—Ç–Ω–æ–µ`);
// //         continue;
// //     }

// //     total += number;
// //     console.log(`${number} - —á–µ—Ç–Ω–æ–µ`);
// // }

// console.log('Total:', total);

//? ___________________________________________

// const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n'];
// const loginToFind = 'poly1scute';
// let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

// for (let i = 0; i < logins.length; i += 1) {
//     if (logins[i] === loginToFind) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//         break;
//     }
// }

// console.log(message);

//* ___________________________________________

// for (const login of logins) {
//     if (login === loginToFind) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//         break;
//     }
// }

// console.log(message);

//* ___________________________________________

// const message = logins.includes(loginToFind)
//     ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`
//     : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

// console.log(message);

//? ___________________________________________
//! –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ:

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0]

// for (const number of numbers) {

//     if (smallestNumber > number) {
//         smallestNumber = number
//     }
// }

// console.log(smallestNumber);

//! –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ:

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0];

// for (const number of numbers) {
//     if (smallestNumber < number) {
//         smallestNumber = number;
//     }
// }

// console.log(smallestNumber);

//? ___________________________________________
//! –ú–µ—Ç–æ–¥ join():

// const friends = ['Mango', 'Poly', 'Kiwi', 'Ajax'];
// // let string = '';

// // for (const friend of friends) {
// //     string += friend + ','
// // }
// // string = string.slice(0, string.length - 1);

// const string = friends.join(', ')
// console.log(string);

//? ___________________________________________

// const string = 'JavaScript';
// const letters = string.split('');
// let invertedString = '';

// console.log(letters);

// for (const letter of letters) {
//     console.log(letter);

//     // if (letter === letter.toLowerCase()) {
//     //     invertedString += letter.toUpperCase()
//     // } else {
//     //     invertedString += letter.toLowerCase()
//     // }

//     invertedString += letter === letter.toLowerCase() ? letter.toUpperCase() : letter.toLowerCase();
// }

// console.log('invertedString:', invertedString);

//? ___________________________________________

// const title = 'Top 10 benefits of React framework';

// //* –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥:

// // const normalizedTitle = title.toLowerCase()
// // console.log(normalizedTitle.split(' ').join('-'));

// //*–¶–µ–ø–æ—á–∫–∞ –≤—ã–∑–æ–≤–∞:

// const slug = title.toLowerCase().split(' ').join('-')

// console.log(slug);

//? ___________________________________________
//! –ú–µ—Ç–æ–¥ concat() :

// const array1 = [5, 10, 15, 20];
// const array2 = [10, 20, 30];

// //* –°—à–∏—Ç–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤:
// const numbers = array1.concat(array2)

// let total = 0

// for (const number of numbers) {
//     total += number
// }

// console.log(total);

//? ___________________________________________

// const cards = ['–ö–∞—Ä—Ç–æ—á–∫–∞-1', '–ö–∞—Ä—Ç–æ—á–∫–∞-2', '–ö–∞—Ä—Ç–æ—á–∫–∞-3', '–ö–∞—Ä—Ç–æ—á–∫–∞-4', '–ö–∞—Ä—Ç–æ—á–∫–∞-5'];
// console.table(cards);

// //* –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É), –º–µ—Ç–æ–¥ (indexOf):

// const cardToRemove = '–ö–∞—Ä—Ç–æ—á–∫–∞-3';
// const index = cards.indexOf(cardToRemove);

// // console.log(cards.splice(index, 1)); // ['–ö–∞—Ä—Ç–æ—á–∫–∞-3'] - —É–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
// cards.splice(index, 1)
// console.log(index);

// console.table(cards);
// console.log(cards);

//* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É):

// const cardToInsert = '–ö–∞—Ä—Ç–æ—á–∫–∞-6';
// const index = 3;

// cards.splice(index, 0, cardToInsert);

// console.table(cards);

//* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É):

// const cardToUpdate = 'NEW –ö–∞—Ä—Ç–æ—á–∫–∞-4';
// const index = 3;

// cards.splice(index, 1, cardToUpdate);

// console.table(cards);

//? ___________________________________________
//! –§–£–ù–ö–¶–ò–ò
//? ___________________________________________

// const add = function (x, y) {
//     return x + y;
// };

// const r1 = add(2, 6);
// console.log('r1:', r1);
// const r2 = add(5, 10);
// console.log('r2:', r2);

//? ___________________________________________

// const fn = function (value) {
//     if (value < 50) {
//         return '–ú–µ–Ω—å—à–µ —á–µ–º 50';
//     }
//     return '–ë–æ–ª—å—à–µ —á–µ–º 50';
// };

// console.log('Result:', fn(48));
// console.log('Result:', fn(482));

//? ___________________________________________
/* 
    //*!    * - –°—Ç—ç–∫ –≤—ã–∑–æ–≤–æ–≤
    //*!    * - Stack trace –∏ –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
*/

// const fnA = function () {
//     console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è A');
// fnB();

// }

// const fnB = function () {
//     console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è B');
// fnC();

// };

// const fnC = function () {
//     console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è C');
//     console.log(value);
// };

// fnA()
// fnB()
// fnC()

//? ___________________________________________

// const calculateTotalPrice = function (items) {
//     console.log(items);

//     let total = 0;

//     for (const item of items) {
//         total += item;
//     }
//     return total;
// };

// console.log(calculateTotalPrice([1, 2, 3]));
// console.log(calculateTotalPrice([5, 10, 15, 20]));
// console.log(calculateTotalPrice([100, 200, 300]));

//? ___________________________________________

// const logItems = function (items) {
//     for (const item of items) {
//         console.log(item);
//     }
// };

// logItems(['Mango', 'Kiwi', 'Poly', 'Ajax']);
// logItems([1, 2, 3, 4, 5]);
// logItems(['–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–Ω–∞—É—à–Ω–∏–∫–∏', '—á–∞—Å—ã']);

//? ___________________________________________

// const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n'];
// // const loginToFind = 'poly1scute';
// // let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

// const findLogin = function (allLogins, loginToFind) {
//     return allLogins.includes(loginToFind)
//         ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`
//         : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

//     //! ___________________________________________

//     // for (const login of allLogins) {
//     //     if (login === loginToFind) {
//     //         return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//     //     }
//     // }

//     // return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
// };

// console.log(findLogin(logins, 'avocod3r'));
// console.log(findLogin(logins, 'k1widab3st'));
// console.log(findLogin(logins, 'jam4l'));
// console.log(findLogin(logins, 'poly1scute'));

//? ___________________________________________

// const findSmallestNumber = function (numbers) {
//     let smallestNumber = numbers[0];

//     for (const number of numbers) {
//         if (number < smallestNumber) {
//             smallestNumber = number;
//         }
//     }
//     return smallestNumber;
// };

// console.log(findSmallestNumber([3, 8, 12, -2, 15]));
// console.log(findSmallestNumber([100, 54, 8, 12, 47]));
// console.log(findSmallestNumber([7, 21, 84, 15, 4]));

//? ___________________________________________

// const changeCase = function (string) {
//     const letters = string.split('');
//     let invertedString = '';

//     for (const letter of letters) {
//         const isInLowerCase = letter === letter.toLowerCase();

//         invertedString += isInLowerCase ? letter.toUpperCase() : letter.toLowerCase();
//     }

//     return invertedString;
// };

// console.log(changeCase('qweRTY'));
// console.log(changeCase('mAnGo'));
// console.log(changeCase('AjAx'));

//? ___________________________________________

// const title = 'Top 10 benefits of React framework';

// const slugify = function (string) {
//     return string.toLowerCase().split(' ').join('-')
// }

// console.log(slugify('qweqwe qweqwe qweqwe'));
// console.log(slugify('Hello my name is'));
// console.log(slugify('QweEQ aOLIIPki POKJ'));

//? ___________________________________________

// const fn = function () {
//     console.log(arguments);

// const args = Array.from(arguments)

//     console.log(args);
// };

// fn(1, 2, 3);
// fn(1, 2, 3, 4, 5);
// fn(1, 2, 3, 4, 5, 6, 7);

//! ___________________________________________

// const fn = function (a, b, ...args) {
//     console.log(`${a} ${b}`);
//     console.log(args);
// };

// fn(1, 2, 3);
// fn(1, 2, 3, 4, 5);
// fn(1, 2, 3, 4, 5, 6, 7);

//? ___________________________________________

// const add = function (...args) {
//     console.log(args);

//     let total = 0

//     for (const arg of args) {
//         total += arg
//     }

//     return total
// };

// console.log(add(1, 2, 3));
// console.log(add(1, 2, 4, 5, 6));

//? ___________________________________________

// const filterNumbers = function (array, ...args) {
//     console.log(array);
//     console.log(args);

//     const uniqueElements = [];

//     for (const element of array) {
//         if (args.includes(element)) {
//             uniqueElements.push(element);
//             console.log(`${element} –µ—Å—Ç—å –≤–µ–∑–¥–µ!`);
//         }
//     }

//     return uniqueElements;
// };

// console.log(filterNumbers([1, 2, 3, 4, 5], 10, 15, 2, 3, 8));
// console.log(filterNumbers([10, 15, 25, 30], 23, 30, 18, 15));
// console.log(filterNumbers([100, 200, 300, 400, 500], 7, 12, 200, 64));

//? ___________________________________________
//! –û–±—ä–µ–∫—Ç—ã
//? ___________________________________________

// const book = {
//     title: 'The Last Kingdom',
//     author: 'Bernard Cornwell',
//     genres: ['historical prose', 'adventure'],
//     isPublic: true,
//     rating: 8.38,
// };

// console.log(book);

// const user = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: {
//         country: 'Jamaica',
//         city: 'Ocho Rios',
//     },
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// console.log(user);

//? ___________________________________________
//! –°–≤–æ–π—Å—Ç–≤–∞
//? ___________________________________________

// const playlist = {
//     name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//     rating: 5,
//     tracks: ['track-1', 'track-2', 'track-3'],
//     trackCount: 3,
// };

// playlist.price = 200;
// playlist.array = [1, 2, 3];
// playlist.location = {
//     country: 'Canada',
//     province: 'AB',
//     city: 'Calgary',
// };

// console.log(playlist);
// console.log(playlist);

// console.log(playlist.rating);
// console.log(playlist.name);
// console.log(playlist.trackCount);
// console.log(playlist.tracks);

const propertyName = 'tracks';

// console.log(playlist.propertyName);
// console.log(playlist[propertyName]);

//! –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å —Å–≤–æ-—Ç–≤:

// const username = 'Mango';
// const email = 'mango@mail.com';

// const signupData = {
//     username,
//     email,
// };

// console.log(signupData);

//! –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤-–≤–∞

//* <input name='color' value='tomato' ></input>

// const inputName = 'color';
// const inputValue = 'tomato';

// const colorPickerDate = {
//     [inputName]: inputValue,
// };

// console.log(colorPickerDate);

//! –°—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø {} === {}

// const a = { x: 1, y: 2 };
// const b = a;

// console.log(b === a);

// a.c = 100;

// console.log(a);
// console.log(b);

//! –ú–∞—Å—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã

// const a = [1, 2, 3];

// a.hello = ':)'

// console.log(a);

// const fn = function () {
//     console.log('hello');
// };

// fn.hello = ':)'

// // console.log(fn);
// console.dir(fn);
// console.log(fn.hello);

//? ___________________________________________

// const playlist = {
//     name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//     rating: 5,
//     tracks: ['track-1', 'track-2', 'track-3'],
//     // getName: function () {
//     //     console.log('This is the getName');
//     // },
//     // getName() {
//     //     console.log('This is the getName');
//     // },

//     changeName(newName) {
//         console.log('this inside changeName', this);

//         this.name = newName;
//     },

//     addTrack(track) {
//         this.tracks.push(track);
//     },

//     updateRating(newRating) {
//         this.rating = newRating;
//     },

//     getTrackCount() {
//         return this.tracks.length;
//     },
// };
// // playlist.getName();
// console.log(playlist);

// playlist.changeName('New cool name');

// playlist.addTrack('new track');
// console.log(playlist);

// playlist.updateRating(10);
// console.log(playlist);

//? ___________________________________________
//! –ü–µ—Ä–µ–±–æ—Ä —á–µ—Ä–µ–∑ for...in –∏ Object.keys | values | entries

// const feedback = {
//     good: 5,
//     neutral: 10,
//     bad: 3,
// };

// let totalFeedback = 0;

// const keys = Object.keys(feedback)

// console.log(keys);

// for (const key of keys) {
//     console.log(key);
//     console.log(feedback[key]); // –î–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é

// }

// const values = Object.values(feedback);
// console.log(values);

// for (const value of values) {
//     console.log(value);
//     totalFeedback += value;
// }

// console.log('totalFeedback: ', totalFeedback);

// const keys = [];
// const values = [];
// const advert = {
//     service: 'apt',
// };
// const apartment = Object.create(advert);
// apartment.descr = 'Spacious apartment in the city center';
// apartment.rating = 4;
// apartment.price = 2153;

// for (const key in apartment) {
//     // Change code below this line

//     if (apartment.hasOwnProperty(key)) {
//         keys.push(key)
//         values.push(apartment[key])
//     }

//     // Change code above this line
// }

// console.log(keys);
// console.log(values);
//? ___________________________________________

// const friends = [
//     { name: 'Mango', online: false },
//     { name: 'Kiwi', online: true },
//     { name: 'Poly', online: true },
//     { name: 'Ajax', online: false },
// ];

// console.table(friends);

// for (const friend of friends) {
//     console.log(friend.name);

//     friend.newprpo = 555;
// }

// console.table(friends);

//* –ò—â–µ–º –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏

// const findFriendByName = function (allFriends, name) {
//     for (const friend of allFriends) {
//         if (friend.name === name) {
//             return '–ù–ê–®–õ–ò';
//         }
//     }
//     return '–ù–ï –ù–ê–®–õ–ò';
// };

// console.log(findFriendByName(friends, 'Poly'));
// console.log(findFriendByName(friends, 'Chelsy'));

//? ___________________________________________

// const getAllNames = function (allFriends) {
//     const names = [];

//     for (const friend of allFriends) {
//         // console.log(friend.name);
//         names.push(friend.name);
//     }
//     return names;
// };

// console.log(getAllNames(friends));

//? ___________________________________________

// const getOnlineFriends = function (allFriends) {

//     const onlineFriends = []

//     for (const friend of allFriends) {

//         if (friend.online)
//            onlineFriends.push(friend)
//     }
//     return onlineFriends
// };

// console.log(getOnlineFriends(friends));

//? ___________________________________________

// const getOfflineFriends = function (allFriends) {

//     const offlineFriends = [];

//     for (const friend of allFriends) {
//         if (!friend.online) {
//             offlineFriends.push(friend);
//         }

//     }
//     return offlineFriends
// };

// console.log(getOfflineFriends(friends));

//? ___________________________________________

// const getFriendsByOnlineStatus = function (allFriends) {
//     const friendsByStatus = {
//         online: [],
//         offline: [],
//     };

//     for (const friend of allFriends) {
//         if (friend.online) {
//             friendsByStatus.online.push(friend);
//             continue;
//         }
//         friendsByStatus.offline.push(friend);
//     }

//     return friendsByStatus;
// };

// console.log(getFriendsByOnlineStatus(friends));

//? ___________________________________________

// const x = {
//     a: 1,
//     b: 2,
//     c: 50,
//     d: 100,
// };

// console.log(Object.keys(x));
// console.log(Object.keys(x).length);

//? ___________________________________________
/* //! –û–ø–µ—Ä–∞—Ü–∏—è spread (—Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ)
 * //! Arrey.prototype.concat() –∏ –∞–Ω–∞–ª–æ–≥ —á–µ—Ä–µ–∑ spread
 */

// const numbers = [1,2,3].concat([4,5,6], [7,8,9])

// const numbers = [0,5,10, ...[1, 2, 3], 4, 5];
// const numbers = [...[1, 2, 3], ...[4, 5, 6], ...[7, 8, 9]];

// console.log(numbers);

/*
 * //! –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –º–∞–ª–µ–∫—å–µ–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—á–∏—Å–ª–∞)
 */

// const temps = [18, 14, 12, 21, 17, 29, 24];
//!________________________________________

// const a = [{ x: 1 }, { y: 2 }, { z: 3 }];
// const b = [...a];

// console.log(a);
// console.log(b);

// a[0].x = 1000

// console.log(a);
// console.log(b);

//? ___________________________________________
//! –°—à–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –æ–¥–∏–Ω —á–µ—Ä–µ–∑ concat() –∏ spread

// const lastWeekTemps = [1, 2, 3];
// const currentTemps = [4, 5, 6];
// const nextWeekTemps = [7, 8, 9];

// const allTemps = lastWeekTemps.concat(currentTemps, nextWeekTemps) //* –ú–µ—Ç–æ–¥ concat()

// const allTemps = [...lastWeekTemps, ...currentTemps, ...nextWeekTemps]    //* –ú–µ—Ç–æ–¥ spread

// console.log(allTemps);

//? ___________________________________________
/* //! –†–∞—Å–ø—ã–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
 * //! -Object.prototype/assign() –∏ spread
 */

// const a = { x: 1, y: 2 };
// const b = { x: 0, z: 3 };

// const c = Object.assign({}, a, b)  //* —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥

// const c = {
//     ...a,
//     ...b,
// };

// console.log(c);

// const defaultSettings = {
//     theme: 'light',
//     showNotifications: true,
//     hideSidebar: false,
// };

// const userSettings = {
//     // theme: 'dark',
//     showNotifications: false,
//     hideSidebar: true,
// };

// const finalSettings = {
//     ...defaultSettings,
//     ...userSettings
// }

// console.log(finalSettings);

//? ___________________________________________
/* //! –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
 * //! - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * //! - –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
 */

// const playlist = {
//     name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//     rating: 5,
//     tracks: ['track-1', 'track-2', 'track-3'],
//     // trackCount: 3,
// };

// const {
//     name,
//     rating,
//     tracks,
//     trackCount: numberOfTracks = 2,
//     author = 'unknown'
// } = playlist;

// // console.log(name, rating, tracks, numberOfTracks);
// console.log(numberOfTracks);
// console.log(author);

/*
 * //! –ì–ª—É–±–æ–∫–∞—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
 */

// const profile = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: 'Ocho Rios, Jamaica',
//     avatar: 'http//s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// const {
//     name,
//     tag,
//     location,
//     avatar,
//     stats: { followers, views, likes },
// } = profile;

// console.log(followers);

//? ___________________________________________
//! –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤

// const rgb = [255, 100, 80];

// const [red, green, blue] = rgb;
// const [red, , blue] = rgb; // –ø—Ä–æ–ø—É—Å–∫ —Å–≤–æ–π—Å—Ç–≤–∞
// console.log(red, blue);

// console.log(red, green, blue);

// const authors = {
//     kiwi: 4,
//     poly: 7,
//     ajax: 9,
//     mango: 6,
// };

// // const ratings = Object.values(authors)
// // console.log(Math.max(...ratings));

// const entries = Object.entries(authors);

// for (const /*entry*/ [name, rating] of entries) {
//     // const [name, rating] = entry

//     // const name = entry[0];
//     // const rating = entry[1];

//     console.log(name, rating);
// }

//? ___________________________________________
//! –û–ø–µ—Ä–∞—Ü–∏—è rest (—Å–±–æ—Ä)

// const profile = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: 'Ocho Rios, Jamaica',
//     avatar: 'http//s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// // const { name, tag, location, ...restProps } = profile;

// // console.log(profile);
// // console.log(restProps);

// const showProfileInfo = function (userProfile) {
//     const {
//         name,
//         tag,
//         location,
//         // avatar,
//         // stats: { followers, views, likes },
//         ...restProps
//     } = userProfile;

//     console.log(userProfile);
//     console.log(restProps);
// };

// showProfileInfo(profile);

//? ___________________________________________
//! EXAMPLE

// const profile = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: 'Ocho Rios, Jamaica',
//     avatar: 'http//s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// const makeProfileMarkup = function (userProfile) {
//     const {
//         avatar = 'http://i.pravatar.cc/400?img=6',
//         name,
//         tag,
//         location = 'Planet Earth',
//         stats: { followers, views, likes },
//     } = userProfile;

//     return `<div>
//             <img src="${avatar}" alt="user avatar">
//             <p>
//                 ${name}
//                 <span>@${tag}</span>
//             </p>
//             <p>Location: ${location}</p>
//             <ul>
//                 <li>Followers: ${followers}</li>
//                 <li>Views: ${views}</li>
//                 <li>Likes: ${likes}</li>
//             </ul>
//         </div>`;
// };

// const markup = makeProfileMarkup(profile)

// console.log(markup);

// document.body.insertAdjacentHTML('afterbegin', markup)

//? ___________________________________________

//! CART_____________________

// const cart = {
//     items: [],
//     getItems() {
//         return this.items;
//     },
//     add(product) {
//         for (const item of this.items) {
//             if (item.name === product.name) {
//                 item.quantity += 1;
//                 return;
//             }
//         }

//         const newProduct = {
//             ...product,
//             quantity: 1,
//         };

//         this.items.push(newProduct);
//     },
//     remove(productName) {
//         const { items } = this;

//         for (let i = 0; i < items.length; i += 1) {
//             console.log(items[i]);
//             const { name } = items[i];

//             if (productName === name) {
//                 console.log('hello', productName);

//                 items.splice(i, 1);
//             }
//         }
//     },
//     clear() {
//         this.items = [];
//     },
//     countTotalPrice() {
//         const { items } = this;

//         let total = 0;

//         for (const { price, quantity } of items) {
//             total += price * quantity
//             console.log(total);
//         }

//         return total;
//     },
//     increaseQuantity(productName) {},
//     decreaseQuantity(productName) {},
// };

// console.log(cart.getItems());
// console.table(cart.getItems());

// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçê', price: 60 });
// cart.add({ name: 'üçì', price: 110 });

// console.table(cart.getItems());

// cart.remove('üçã');
// console.table(cart.getItems());

// console.log('Total: ', cart.countTotalPrice());

// cart.clear();
// console.log(cart.getItems());
// // console.table(cart);

//! CART_____________________

//? ___________________________________________
//! CALLBACK

// const fnA = function (message, callback) {
//     console.log(message);

//     console.log(callback);
//     callback(100)
// };

// const fnB = function (number) {
//     console.log('–≠—Ç–æ –ª–æ–≥ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ fnB', number);
//   }

// fnA('qweqwe', fnB);

//? ___________________________________________
//! –§—É–Ω–∫—Ü–∏—è doMath(a, b, callback)

// const doMath = function (a, b, callback) {
//     const result = callback(a, b);

//     console.log(result);
// };

// doMath(2, 3, function (x, y) {
//     return x + y;
// });
// doMath(10, 8, function (x, y) {
//     return x - y;
// });

//? ___________________________________________
//! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π

// const buttonRef = document.querySelector('.js-button');

// buttonRef.addEventListener('click', function () {
//     console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ');
// });

// function addEventListener(eventType, callback) {
//     // –ï—Å–ª–∏
//     if (eventType === event) {
//         callback();
//     }
// }

//! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è

// const onGetPositionSucces = function (position) {
//     console.log('–≠—Ç–æ –≤—ã–∑–æ–≤: onGetPositionSucces');
//     console.log(position);
// }

// const onGetPositionError = function (error) {
//     console.log(error);
// }

// window.navigator.geolocation.getCurrentPosition(onGetPositionSucces, onGetPositionError);

//! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã

// const callback = function () {
//     console.log('–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ');
// }

// console.log('–í –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —Ç–∞–π–º–∞—É—Ç–æ–º');

// setTimeout(callback, 2000)

// console.log('–í –∫–æ–¥–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞');

/* //! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: http-–∑–∞–ø—Ä–æ—Å
 * //! - API URL: https://pokeapi.co/api/v2/pokemon
 */

// const onRequestSucces = function (response) {
//     console.log('–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
//     console.log(response);
// }

// fetch('https://pokeapi.co/api/v2/pokemon').then(res => res.json()).then(onRequestSucces);

// console.log('–ø–µ—Ä–µ–¥ fetch');
// console.log('–ø–æ—Å–ª–µ fetch');

//! –§–∏–ª—å—Ç—Ä

// const filter = function (array, test) {
//     const filteredArray = [];

//     for (const el of array) {
//         console.log(el);
//         const passed = test(el);
//         if (passed) {
//             filteredArray.push(el);
//         }
//     }
//     console.log(filteredArray);
//     return filteredArray;
// };

// filter([1, 2, 3, 4, 5], function (value) {
//     return value >= 3;
// });
// filter([1, 2, 3, 4, 5, 6, 7, 8], function (value) {
//     return value <= 4;
// });

// const fruits = [
//     { name: 'apples', quantity: 200, isFresh: true },
//     { name: 'grapes', quantity: 150, isFresh: false },
//     { name: 'bananas', quantity: 100, isFresh: true },
// ];

// filter(fruits, function (fruit) {
//     return fruit.quantity >= 120;
// });

//! –ó–ê–ú–´–ö–ê–ù–ò–ï

// const fnA = function (parameter) {
//     const innerVariable = '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA';

//     const innerFunction = function () {
//         console.log(parameter);
//         console.log(innerVariable);
//         console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction');
//     };

//     return innerFunction;
// };

// const fnB = fnA(777);

// fnB();

// console.log(fnB);

//! –ü–æ–≤–∞—Ä—ë–Ω–æ–∫ (–ø—Ä–∏–º–µ—Ä)

// const makeDish = function (sheffName, dish) {
//     console.log(`${sheffName} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
// };

// makeDish('Mango', '–ø–∏—Ä–æ–∂–æ–∫');
// makeDish('Mango', '–æ–º–ª–µ—Ç');
// makeDish('Mango', '—á–∞–π');

// makeDish('Poly', '–∫–æ—Ç–ª–µ—Ç—ã');
// makeDish('Poly', '—Å—É–ø–∏–∫');
// makeDish('Poly', '–∫–æ—Ñ–µ');

// const makeSheff = function (name) {
//     const makeDish = function (dish) {
//     console.log(`${name} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);

//     };

//     return makeDish;
// };

// const mango = makeSheff('Mango')
// const poly = makeSheff('Poly')

// console.dir(mango);
// console.log(mango);

// mango('–∫–æ—Ç–ª–µ—Ç—ã')
// poly('—á–∞–π')

//! –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è

// const floatingPoint = 3.456789;
// const someInt = Math.round(floatingPoint); // 3
// const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46

// // const rounder = function (number, places) {
// //     return Number(number.toFixed(places));
// // };

// const rounder = function (places) {
//     return function (number) {
//         return Number(number.toFixed(places));
//     };
// };

// const rounder2 = rounder(2);
// const rounder3 = rounder(3);

// console.log(rounder3(3.4567));
// console.log(rounder2(6.4567));

// rounder2(floatingPoint); //  3.46
// rounder3(floatingPoint); //  3.457

//! –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

// const salatyManagerFactory = function (employeeName, baseSalary) {
//     let salaty = baseSalary;

//     return {
//         raise(amount) {
//             salaty += amount
//         },
//         lower(amount) {
//             salaty -= amount;
//         },
//         current() {
//             return `–¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ${employeeName} - ${salaty}`;
//         },
//     };
// }
// const salaryManager = salatyManagerFactory('Mango', 5000)

// console.log(salaryManager.raise(222));
// console.log(salaryManager.current());

//? ___________________________________________

// const myLibFactory = function () {
//     let value = 0;

//     const add = function (num) {
//     value += num
// }

//     return {
//         add,
//         getValue() {
//             return value
//         }
//     };
// };

// const myLib = myLibFactory()

// console.log(myLib);

// console.log(myLib.getValue());
// myLib.add(10)
// console.log(myLib.getValue());

//? ___________________________________________
/*//! –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 * //!      - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
 * //!      - –Ø–≤–Ω—ã–π –∏ –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
 * //!      - –ê—Ä–≥–µ–º–µ–Ω—Ç—ã
 * //!      - –ù–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
 */

// const add = function (a, b, c) {
//     console.log(arguments);
//     console.log(a, b, c);
//     return a + b + c;
// };

// const addArrow = (...args) => {
//     console.log(args);
//     // return a + b + c;
// };

// const addArrow1 = (a, b, c) => 5 + 10 + 15;
// console.log(addArrow1());

// // console.log(add(5, 10, 15));

// console.log(addArrow(5, 10, 15));

//? ___________________________________________

// const fnA = function () {
//     return {
//         a: 5,
//     };
// };

// console.log(fnA());

// const arrowFnA = () => ({ arrowA: 5 });

// console.log(arrowFnA());

//? ___________________________________________

// const onGetPositionSucces = (position) => {
//     console.log('–≠—Ç–æ –≤—ã–∑–æ–≤: onGetPositionSucces');
//     console.log(position);
// }

// const onGetPositionError = (error) => {
//     console.log(error);
// }

// window.navigator.geolocation.getCurrentPosition(onGetPositionSucces, onGetPositionError);

//? ___________________________________________

// const filter = (array, test) => {
//     const filteredArray = [];

//     for (const el of array) {
//         console.log(el);
//         const passed = test(el);
//         if (passed) {
//             filteredArray.push(el);
//         }
//     }
//     return filteredArray;
// };

// filter([1, 2, 3, 4, 5], value => value >= 3);
// filter([1, 2, 3, 4, 5, 6, 7, 8], value => value <= 4);

// const fruits = [
//     { name: 'apples', quantity: 200, isFresh: true },
//     { name: 'grapes', quantity: 150, isFresh: false },
//     { name: 'bananas', quantity: 100, isFresh: true },
// ];

// filter(fruits, fruit => fruit.quantity >= 120)

//? ___________________________________________

/*  //!  –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 *  //!     - —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 *  //!     - —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
 *  //!     - –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */

// const add = (a, b) => a + b;
// const logMessage = a => a;
// const great = () => 'Hello';

// console.log(add(5, 20));
// console.log(logMessage('–ü—Ä–∏–≤–µ—Ç'));
// console.log(great());

// const showThis = () => {
//     console.log('this in showThis: ', this);
// }

// showThis()

// const user = { name: 'Mango' }
// user.showContext = showThis
// user.showContext();

//? ___________________________________________

// const user = {
//     fullName: 'Mango',
//     showName() {
//         console.log('this: ', this);
//         console.log('this.fullName: ', this.fullName);

//         const inner =  () => {
//             console.log('this in inner: ', this);
//         }

//         inner()
//     }

// }

// user.showName()

//? ___________________________________________

//? ___________________________________________

//! –Ø–≤–Ω—ã–π –∏ –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
//! –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ arguments

//!_____________
// const fn = feets => {
//     const daySpeed = 7
//     const nightSpeed = 2

//     let total = 0
//     let days = 0

//     while (total < feets) {
//         total += daySpeed
//         days += 1

//         if (total < feets) {
//             total -= nightSpeed
//         }
//     }

//     console.log(days);
//     return days
// }

// fn(128)
// fn(42);
// fn(31);

//!_______

// const objA = {
//     x: 5,
//     showX() {
//         console.log(this.x);

//         const objB = {
//             y: 10,
//             showThis() {
//                 console.log('this –≤ objB.showThis: ', this);
//             }
//         }
//         objB.showThis()
//     }
// }

// objA.showX()

//!_______

// const numbers = [1, 5, 2, 4, 3];

// const greaterThenTwo = numbers.filter(num => num > 2)
// console.log(greaterThenTwo);

// const multByTwo = greaterThenTwo.map(num => num * 3)
// console.log(multByTwo);

// const sorted = multByTwo.sort((a, b) => a - b)
// console.log(sorted);

// const res = numbers
//     .filter(num => num > 2)
//     .map(num => num * 3)
//     .sort((a, b) => a - b)

//     console.log(res);

// const players = [
//     { id: 'id-1', tag: 'Mango', isOnline: true, rank: 800 },
//     { id: 'id-2', tag: 'Poly', isOnline: false, rank: 600 },
//     { id: 'id-3', tag: 'Ajax', isOnline: true, rank: 100 },
//     { id: 'id-4', tag: 'Kiwi', isOnline: true, rank: 400 },
// ];

// const onlineAndSorted = players
//     .filter(player => player.isOnline)
//     .sort((prevPlayer, nextPlayer) => prevPlayer.rank - nextPlayer.rank);

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, points: 54, isOnline: false, rank: 800 },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, points: 92, isOnline: true, rank: 600 },
//     { id: 'player-4', name: 'Kiwi', timePlayed: 230, points: 48, isOnline: true, rank: 400 },
//     { id: 'player-3', name: 'Ajax', timePlayed: 150, points: 71, isOnline: false, rank: 100 },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, points: 48, isOnline: true, rank: 400 },
// ];

// // const updatedPlayers = players.map(player => ({
// //     ...player,
// //     points: player.points + player.points * 0.1,
// // }));

// const playerIdToUpdate = 'player-3';

// const updatedPlayers = players.map(player =>
//     player.id === playerIdToUpdate ? { ...player, timePlayed: player.timePlayed + 50 } : player
// );

// console.table(updatedPlayers);

//? ___________________________________________
/*
 *  –ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤:
 *      - forEach
 *      - map
 *      - filter
 *      - find
 *      - every –∏ some
 *      - reduce
 *      - sort
 *   - –ß–µ–π–Ω–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤
 */

//!--------------------------------

/*
 *      Array.prototype.forEach(callback(currentValue, index, array), thisArg)
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 *          - –ó–∞–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π for, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ü–∏–∫–ª
 */

// const numbers = [5, 10, 15, 20, 25];

// numbers.forEach(function (number, index, array) {
//     console.log('number', number);

//     array[index] = 20;
// });

// console.log(numbers);

/*
 *      Array.prototype.map()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏–Ω—ã
 */

// const numbers = [5, 10, 15, 20, 25];

// const doubleNums = numbers.map(number => number * 2);

// console.log('doubleNums', doubleNums);

//? ___________________________________________

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, points: 54, online: false, rank: 800 },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, points: 92, online: true, rank: 600 },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, points: 48, online: true, rank: 400 },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, points: 71, online: false, rank: 100 },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, points: 48, online: true, rank: 400 },
// ];
// console.table(players);

//! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–º—ë–Ω –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤

// const playersNames = players.map(player => player.name);
// console.log('playersNames', playersNames);

// const playerIds = players.map(player => player.id);
// console.log('playerIds', playerIds);

// const res = players.map(({ name, online }) => ({ name, online }));
// console.log('res', res);

//! –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 10%

// const updatedPlayers = players.map(player => ({
//     ...player,
//     points: player.points * 1.1,
//     type: 'Gamer',
// }));
// console.table(updatedPlayers);

//! –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –∏–≥—Ä–æ–∫–∞ –ø–æ ID

// const playerIdToUpdate = 'player-3';

// const updatedPlayers = players.map(player =>
//     // –¢–µ—Ä–Ω–∞—Ä–Ω–∏–∫
//     playerIdToUpdate === player.id ? { ...player, timePlayed: (player.timePlayed += 300) } : player
// );

// console.log(updatedPlayers);

/*
 *      Array.prototype.filter()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (—Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π)
 *          - –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é callback - —Ñ—É–Ω–∫—Ü–∏–∏
 *              - –µ—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª true —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤
 *              - –µ—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª false —ç–ª–µ–º–µ–Ω—Ç –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤
 */

// const numbers = [5, 10, 15, 20, 25];

// const filterNumbers = numbers.filter(number => number < 15);
// console.log(filterNumbers);

// //! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö online –∏–≥—Ä–æ–∫–æ–≤

// const onlinePlayers = players.filter(({ online }) => online);
// console.table(onlinePlayers);

// //! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö offline –∏–≥—Ä–æ–∫–æ–≤

// const offlinePlayers = players.filter(({ online }) => !online);
// console.table(offlinePlayers);

// //! –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º –±–æ–ª—å—à–µ 250

// const hardcorePlayers = players.filter(({ timePlayed }) => timePlayed > 250)
// console.table(hardcorePlayers);

/*
 *      Array.prototype.find()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é –∏–ª–∏ undefined
 */
// const numbers = [5, 10, 15, 20, 25];

// const number = numbers.find(number => number === 10)
// console.log(number);

// const players = [
//     {
//         id: 'player-1',
//         name: 'Mango',
//         timePlayed: 310,
//         points: 54,
//         online: false,
//         rank: 800,
//     },
//     {
//         id: 'player-2',
//         name: 'Poly',
//         timePlayed: 470,
//         points: 92,
//         online: true,
//         rank: 600,
//     },
//     {
//         id: 'player-3',
//         name: 'Kiwi',
//         timePlayed: 230,
//         points: 48,
//         online: true,
//         rank: 400,
//     },
//     {
//         id: 'player-4',
//         name: 'Ajax',
//         timePlayed: 150,
//         points: 71,
//         online: false,
//         rank: 100,
//     },
//     {
//         id: 'player-5',
//         name: 'Chelsy',
//         timePlayed: 80,
//         points: 48,
//         online: true,
//         rank: 400,
//     },
// ];

//! –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ ID

// const playerIdToFind = 'player-3';

// const playerWithId = players.find(({ id }) => id === playerIdToFind);
// // console.log(playerWithId);

// const findPlayerById = (allPlayers, playerId) => allPlayers.find(({ id }) => id === playerId);

// console.log(findPlayerById(players, 'player-1'));
// console.log(findPlayerById(players, 'player-4'));

//! –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏

// const playerNameToFind = 'Mango';
// const playerWithName = players.find(({ name }) => name === playerNameToFind);
// console.log(playerWithName);

/*
 *      Array.prototype.every()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é
 */

// const isAllOnline = players.every(({ online }) => online);
// console.log('isAllOnline', isAllOnline);

/*
 *      Array.prototype.some()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é
 */

// const isAnyOnline = players.some(({online}) => online)
// console.log('isAnyOnline', isAnyOnline);

// const anyHardcorePlayers = players.some(({ timePlayed }) => timePlayed > 400)
// console.log('anyHardcorePlayers', anyHardcorePlayers);

/*
 *      Array.prototype.reduce()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ —É–≥–æ–¥–Ω–æ ü§Ø
 *          - –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞ —Å–≤–µ—Ç–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Å —É–º–æ–º
 */

// const numbers = [5, 10, 15, 20, 25];

// const total = numbers.reduce((acc, number) => acc + number, 0);

// console.log(total);

//? ___________________________________________
//! –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –∑–∞—Ä–ø–ª–∞—Ç—É

// const salary = {
//     mango: 100,
//     poly: 50,
//     ajax: 150,
// };

// const totalSalary = Object.values(salary).reduce(
//     (total, value) => total + value
// );
// console.log('totalSalary', totalSalary);

//! –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, online: true },
// ];

// const totalTimePlayed = players.reduce(
//     (totalTime, player) => totalTime + player.timePlayed,
//     0
// );
// console.log('totalTimePlayed', totalTimePlayed);

//! –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã

// const cart = [
//     { label: 'Apples', price: 100, quantity: 2 },
//     { label: 'Bananas', price: 120, quantity: 3 },
//     { label: 'Lemons', price: 70, quantity: 4 },
// ];

// const totalAmount = cart.reduce(
//     (total, {price, quantity}) =>  total + price * quantity,
//     0
// );

// console.log(totalAmount);

//? ___________________________________________
//! –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–æ –∏–∑ —Ç–≤–∏—Ç–æ–≤

// const tweets = [
//     { id: '000', likes: 5, tags: ['js', 'nodejs'] },
//     { id: '001', likes: 2, tags: ['html', 'css'] },
//     { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },
//     { id: '003', likes: 8, tags: ['css', 'react'] },
//     { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },
// ];

// const allTags = tweets.reduce((acc, tweet) => [...acc, ...tweet.tags], []);
// tags.push(...tweet.tags);
// return tags;

//! –í–µ–¥–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤

//! #1
// console.log(allTags);
// const tagsStats = allTags.reduce((acc, tag) => {

//     if (acc[tag]) {
//         acc[tag] += 1

//         return acc
//     }

//     acc[tag] = 1

//     return acc
// }, {})
// console.log(tagsStats);

//! #2
// console.log(allTags);
// const tagsStats = allTags.reduce((acc, tag) => {

//     return {
//         ...acc,
//         [tag]: acc[tag] ? acc[tag] + 1 : 1,
//     };
// }, {});
// console.log(tagsStats);

//! #3
// console.log(allTags);
// const tagsStats = allTags.reduce((acc, tag) => ({
//     ...acc,
//     [tag]: acc[tag] ? acc[tag] + 1 : 1,
// }), {});
// console.log(tagsStats);

//? ___________________________________________

/*
 *      Array.prototype.sort(callback(currentEl, nextEl){})
 *          - –°–æ—Ä—Ç–∏—Ç—Ä—É–µ—Ç –∏ –ò–ó–ú–ï–ù–Ø–ï–¢ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:
 *              - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
 *              - –ø—Ä–∏–≤–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫ —Å—Ç—Ä–æ–∫–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ [Unicode](http://unicode-table.com/en/)
 */

// const numbers = [1, 9, 6, 2, 3];
// numbers.sort()
// console.log('numbers', numbers);

// const letters = ['b', 'B', 'a', 'A'];
// letters.sort()
// console.log('letters', letters);

/*
 *      compareFunction - —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (callback)
 *      –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ—ë –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
 *          - –µ—Å–ª–∏ compareFunction(A, B) –º–µ–Ω—å—à–µ 0, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç A –ø–µ—Ä–µ–¥ B
 *          - –µ—Å–ª–∏ compareFunction(A, B) –±–æ–ª—å—à–µ 0, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç B –ø–µ—Ä–µ–¥ A
 *          - –µ—Å–ª–∏ compareFunction(A, B) –≤–µ—Ä–Ω—ë—Ç 0, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç A –∏ B –Ω–∞
 *          –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É, –Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é
 *          –∫–æ –≤—Å–µ–º –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
 */

// numbers.sort((currentEl, nextEl) => {
//     return currentEl - nextEl
// })

// console.log(numbers);

/*
 *      –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
 *          - Array.prototype.slice()
 *          - –û–ø–µ—Ä–∞—Ü–∏—è spread
 */

// const copy = [...numbers]
// copy.sort()

// const ascSortedNumbers = [...numbers].sort((a, b) => a - b);
// const descSortedNumbers = [...numbers].sort((a, b) => b - a);

// console.log([1, 2, 3, 4, 5].reverse());  // .reverse()

// console.log('ascSortedNumbers', ascSortedNumbers); // console.log('copy', copy);
// console.log('descSortedNumbers', descSortedNumbers);
// console.log('numbers', numbers);

//! –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, online: true },
// ];

//! –ü–æ –∏–≥—Ä–æ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
// const sortedByBestPlayer = [...players].sort(
//     (prevPlayer, nextPlayer) =>nextPlayer.timePlayed - prevPlayer.timePlayed
// );
// console.table(sortedByBestPlayer);
// console.log(sortedByBestPlayer);

// const sortedByWorstPlayer = [...players].sort(
//     (prevPlayer, nextPlayer) => prevPlayer.timePlayed - nextPlayer.timePlayed
// );
// console.table(sortedByWorstPlayer);
// console.log(sortedByWorstPlayer);

// const sortedByName = [...players].sort((a, b) => {
//     const res = a.name[0] < b.name[0]

//     if (res) {
//         return -1
//     }
//     if (!res) {
//         return 1
//     }
// })
// console.table(sortedByName);
// console.log(sortedByName);

/*
 *      Array.prototype.flat(depth)
 *          - –†–∞–∑–≥–ª–∞–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
 *          - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª—É–±–∏–Ω–∞ 1
 */

// const array = [1, 2, [4, [5]], [6, [7, 8, [9]]]];
// console.log(array);
// console.log(array.flat());
// console.log(array.flat(2));
// console.log(array.flat(3));

/*
 *      Array.prototype.flatMap(callback)
 *          - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è map + flat
 */

// const tweets = [
//     { id: '000', likes: 5, tags: ['js', 'nodejs'] },
//     { id: '001', likes: 2, tags: ['html', 'css'] },
//     { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },
//     { id: '003', likes: 8, tags: ['css', 'react'] },
//     { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },
// ];

// const tags = tweets.reduce((acc, tweet) => [...acc, ...tweet.tags], []);

// //!_____________________________________________
// // const tags = tweets.map(t => t.tags).flat()

//! –¶–µ–ø–æ—á–∫–∞
// const tags = tweets
//     .flatMap(tweet => tweet.tags)
//     .reduce(
//         (acc, tag) => ({
//             ...acc,
//             [tag]: acc[tag] ? acc[tag] + 1 : 1,
//         }),
//         {}
//     );
// console.log(tags);
// //!_____________________________________________

// const stats = tags.reduce(
//     (acc, tag) => ({
//         ...acc,
//         [tag]: acc[tag] ? acc[tag] + 1 : 1,
//     }),
//     {}
// );
// console.log(stats);

//? ___________________________________________

/*
 *      –¶–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤ - chaining
 */

// const numbers = [1, 5, 2, 4, 3];

//! üí©—Å–ø–æ—Å–æ–±____________
// const greaterThenTwo = numbers.filter(num => num > 2);
// console.log(greaterThenTwo);

// const multByThree = greaterThenTwo.map(num => num * 3);
// console.log(multByThree);

// const sorted = multByThree.sort((a, b) => a - b);
// console.log(sorted);

//! –¶–µ–ø–æ—á–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ—Ö
// const sorted = numbers
//     .filter(num => num > 2)
//     .map(num => num * 3)
//     .sort((a, b) => a - b);

// console.log(sorted);

/*
 *      –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Ö –∫—Ç–æ online –ø–æ —Ä–∞–Ω–≥—É
 *          - —Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
 *          - –ø–æ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º
 */

// const players = [
//     { id: 'id-1', tag: 'Mango', isOnline: true, rank: 800 },
//     { id: 'id-2', tag: 'Poly', isOnline: false, rank: 600 },
//     { id: 'id-3', tag: 'Ajax', isOnline: true, rank: 100 },
//     { id: 'id-4', tag: 'Kiwi', isOnline: true, rank: 400 },
//     { id: 'id-5', tag: 'Chelsy', isOnline: false, rank: 200 },
// ];

// const onlineAndSorter = players
//     .filter(player => player.isOnline)
//     .sort((prevPlayer, nextPlayer) => nextPlayer.rank - prevPlayer.rank);
// console.log(onlineAndSorter);

/*
 *      Chaining –≤ –º–µ—Ç–æ–¥–∞—Ö –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ jQuery
 */

// const element = {
//     class: '',
//     hovered: false,
//     chsngeClass(cls) {
//         this.class = cls;

//         return this;
//     },
//     toggleHovered() {
//         this.hovered = !this.hovered;

//         return this;
//     },
// };

// element.toggleHovered().chsngeClass('open');
// console.log(element);

/*
 *      Lodash
 */

//! isEmpty()

// console.log(_.isEmpty({}));
// console.log(_.isEmpty({ a: 1 }));

/*
 *      get()
 *
 *          - user && user.location && obj.location.city
 *          - user?.location?.city
 */

// const user = {
//     name: 'mango',
//     location: {
//         coords: [1, 2],
//         city: 'Lviv',
//     },
// };

// console.log(_.get(user, 'location.city',  ));

//! –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
// console.log(user?.location?.city);

/*
 *      union()
 */

// console.log(_.union([1, 2, 3], [3, 4, 5]));

/*
 *      range()
 */

// console.log(_.range(3, 8, 1));

/*
 *      sortBy()
 */

// const users = [
//     { user: 'fred', age: 48 },
//     { user: 'barney', age: 36 },
//     { user: 'fred', age: 40 },
//     { user: 'barney', age: 34 },
// ];

// console.log(_.sortBy(users, user => user.age));

/*
 *      sum() –∏ sumBy()
 */

// console.log(_.sum([1, 2, 3, 4, 5]));

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, online: true },
// ];

// console.log(_.sumBy(players, player => player.timePlayed));

/*
 *     uniq() –∏ uniqBy()
 *     sortedUniq() –∏ sortedUniqBy()
 */

/*
 *      random()
 */

/*
 *      min() –∏ max()
 *      minBy() –∏ maxBy()
 */

// console.log(_.minBy(players, player => player.timePlayed).name);

/*
 *      camelCase(), capitalize(), kebabCase(), lowerCase(), upperCase()
 */

// console.log(_.kebabCase('a b c'));

//?______________________________
// const users = [
//     {
//         name: 'Moore Hensley',
//         email: 'moorehensley@indexia.com',
//         eyeColor: 'blue',
//         friends: ['Sharron Pace'],
//         isActive: false,
//         balance: 2811,
//         gender: 'male',
//         age: 37,
//     },
//     {
//         name: 'Sharlene Bush',
//         email: 'sharlenebush@tubesys.com',
//         eyeColor: 'blue',
//         friends: ['Briana Decker', 'Sharron Pace'],
//         isActive: true,
//         balance: 3821,
//         gender: 'female',
//         age: 34,
//     },
//     {
//         name: 'Ross Vazquez',
//         email: 'rossvazquez@xinware.com',
//         eyeColor: 'green',
//         friends: ['Marilyn Mcintosh', 'Padilla Garrison', 'Naomi Buckner'],
//         isActive: false,
//         balance: 3793,
//         gender: 'male',
//         age: 24,
//     },
//     {
//         name: 'Elma Head',
//         email: 'elmahead@omatom.com',
//         eyeColor: 'green',
//         friends: ['Goldie Gentry', 'Aisha Tran'],
//         isActive: true,
//         balance: 2278,
//         gender: 'female',
//         age: 21,
//     },
//     {
//         name: 'Carey Barr',
//         email: 'careybarr@nurali.com',
//         eyeColor: 'blue',
//         friends: ['Jordan Sampson', 'Eddie Strong'],
//         isActive: true,
//         balance: 3951,
//         gender: 'male',
//         age: 27,
//     },
//     {
//         name: 'Blackburn Dotson',
//         email: 'blackburndotson@furnigeer.com',
//         eyeColor: 'brown',
//         friends: ['Jacklyn Lucas', 'Linda Chapman'],
//         isActive: false,
//         balance: 1498,
//         gender: 'male',
//         age: 38,
//     },
//     {
//         name: 'Sheree Anthony',
//         email: 'shereeanthony@kog.com',
//         eyeColor: 'brown',
//         friends: ['Goldie Gentry', 'Briana Decker'],
//         isActive: true,
//         balance: 2764,
//         gender: 'female',
//         age: 39,
//     },
// ];

/*
 *      –§—É–Ω–∫—Ü–∏—è —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –æ–±—ä–µ–∫—Ç–∞ -> –°–°–´–õ–û–ß–ù–´–ô –¢–ò–ü
 */

// console.log('[] === []: ', [] === []);
// console.log('{} === {}: ', {} === {});
// console.log(
//     'function () {} === function () {}: ',
//     function () {} === function () {}
// );

// const fnA = function () {
//     console.log('hello');
// };

// const fnB = fnA;
// console.log('fnB === fnA: ', fnB === fnA);

/*
 *      –ö–æ–Ω—Ç–µ–∫—Å—Ç (this)
 *          - –ì–¥–µ –∏ –∫–∞–∫ –±—ã–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ò–ú–ï–ï–¢ –ù–ò–ö–ê–ö–û–ì–û –í–õ–ò–Ø–ù–ò–Ø –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç
 *          - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –í –ú–û–ú–ï–ù–¢ –í–´–ó–û–í–ê –§–£–ù–ö–¶–ò–ò, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —è–≤–Ω–æ
 */

/*
 *      –ö–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—ä–µ–∫—Ç–∞
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//     },
// };

// user.showTag()

/*
 *      –í—ã–∑–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 *          - –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ = undefined
 *          - –ù–µ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ = window
 */

// const foo = function () {
//     console.log('foo -> this', this);
// };

// foo();

/*
 *      –ö–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è.
 *      –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—ä–µ–∫—Ç–∞.
 */

// const showTag = function () {
//     console.log('showTag -> this', this);
//     console.log('showTag -> this.tag', this.tag);
// };

// showTag()

// const user = {
//     tag: 'Mango',
// };

// console.log('user', user);

// user.showUserTag = showTag;

// user.showUserTag();

/*
 *      –í—ã–∑–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –æ–±—ä—è–≤–Ω–µ–Ω–∞ –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//         console.log('showTag -> this.tag', this.tag);
//     },
// };

// user.showTag();

// const outerShowTag = user.showTag;

// outerShowTag();

/*
 *      –í—ã–∑–æ–≤ –≤ callback-—Ñ—É–Ω–∫—Ü–∏—è—Ö
 */

// const xyz = user.showTag

// console.log(xyz);

// xyz()

// const invokeAction = function (action) {
//     console.log(action);

//     action();
// };

// invokeAction(user.showTag)

/*
 *      –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1
 */

// const fn = function () {
//     console.log('fn -> this', this);
// };

// fn();

/*
 *      –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2
 */

// const book = {
//     title: 'React for beginners',
//     showThis() {
//         console.log('showThis -> this', this);
//     },
//     showTitle() {
//         console.log('showTitle -> this.title', this.title);
//     }
// }

// book.showThis()
// const outerSHowThis = book.showThis
// outerSHowThis()

// const outerShowTitle = book.showTitle
// book.outerShowTitle()

// book.showTitle()

/*
 *      –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3
 */

// const makeChangeColor = function () {
//     const changeColor = function (color) {
//         console.log('changeColor -> this', this);
//     };

//     changeColor()

//     const sweater = {
//         color: 'teal'
//     }

//     sweater.updateColor = changeColor

//     sweater.updateColor('red')

//     return sweater.updateColor
// };

// const swapColor = makeChangeColor()
// swapColor('blue')

/*
 *      –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 4
 */

// const makeChangeColor = function () {
//     const changeColor = function (color) {
//         console.log('changeColor -> this', this);
//         this.color = color;
//     };

//     return changeColor;
// };

// const updateColor = makeChangeColor();
// // updateColor('yellow')

// const hat = {
//     color: 'blue',
//     updateColor,
// };

// hat.updateColor('orange')
// console.log(hat);

/*
 *      –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 5
 */

// const counter = {
//     value: 0,
//     increment(value) {
//         console.log('increment -> this', this);
//         this.value += value;
//     },
//     decrement(value) {
//         console.log('decrement -> this', this);
//         this.value -= value;
//     },
// };

// const updateCounter = function (value, operation) {
//     operation(value);
// };

/*
 *      –ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∫ callback'–æ–≤ - –ö–û–ù–¢–ï–ö–°–¢ –ù–ï –°–û–•–†–ê–ù–Ø–ï–¢–°–Ø          //!–ù–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–†–ò–í–Ø–ó–ö–ò –ö–û–ù–¢–ï–ö–°–¢–ê
 *          //! counter.increment / counter.decrement –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç -> üí©  (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç)
 */
// updateCounter(10, counter.increment);
// updateCounter(5, counter.decrement);

/*
 *      –ú–µ—Ç–æ–¥—ã:
 *                  call –∏ apply - –≤—ã–∑—ã–≤–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å
 */

// const showThis = function (a, b, array) {
//     console.log(a, b, array);
//     console.log('showThis -> this', this);
// };

// showThis();

// const objA = {
//     a: 5,
//     b: 10,
// };

// // showThis.call(objA, 12, 20, 30, 35);
// showThis.call(objA, 5, 1, [100, 200, 300]);
// showThis.apply(objA, [5, 1, [100, 200, 300]]);
// showThis.call(objA);

// const objB = {
//     x: 788,
//     y: 25,
// };

// showThis.call(objB, 1, 1, 2);
// showThis.apply(objB, [1, 1, 2]);

// const changeColor = function (color) {
//     console.log('changeColor -> this', this);
//     this.color = color;
// };

// const hat = {
//     color: 'black',
// };

// // changeColor.call(hat, 'orange');

// // console.log(hat);

// const sweater = {
//     color: 'green',
// };

// // changeColor.call(sweater, 'blue');
// // console.log(sweater);

// /*
//  *      bind - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∞–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
//  */

// const changeHatColor = changeColor.bind(hat);
// const changeSweaterColor = changeColor.bind(sweater)

// // console.log(changeHatColor());
// changeHatColor()
// changeSweaterColor()

/*
 *      counter
 */

// const counter = {
//     value: 0,
//     increment(value) {
//         console.log('increment -> this', this);
//         this.value += value;
//     },
//     decrement(value) {
//         console.log('decrement -> this', this);
//         this.value -= value;
//     },
// };

// const updateCounter = function (value, operation) {
//     operation(value);
// };

// updateCounter(10, counter.increment.bind(counter));
// console.log(counter);

// updateCounter(5, counter.decrement.bind(counter));
// console.log(counter);

//! –°—á–µ—Ç—á–∏–∫

// const counter = {
//     value: 0,
//     increment(value) {
//         console.log('increment -> this', this);
//         this.value += 1;
//     },
//     decrement(value) {
//         console.log('decrement -> this', this);
//         this.value -= 1;
//     },
// };

// const decrementBtn = document.querySelector('.js-decrement');
// const incrementBtn = document.querySelector('.js-increment');
// const valueEl = document.querySelector('.js-value');

// decrementBtn.addEventListener('click', function () {
//     console.log('–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ -');

//     counter.decrement();
//     console.log(counter);

//     valueEl.textContent = counter.value
// });

// incrementBtn.addEventListener('click', function () {
//     console.log('–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ +');

//     counter.increment();
//     console.log(counter);

//     valueEl.textContent = counter.value;
// });

// console.log(decrementBtn);
// console.log(incrementBtn);
// console.log(valueEl);

// decrementBtn.textContent = 'adawdawdadaw'

/*      //! –ü–ª–∞–Ω –∑–∞–Ω—è—Ç–∏—è:
 *      - –ü—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
 *      - –ü—Ä–æ—Ç–æ—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ Object.create()
 *      - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ new - —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 *      - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
 */

/*
 *      –ü—Ä–æ—Ç–æ—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
 *
 *          - Object.create()
 *          - [[Prototype]] –∏ __proto__
 *          - Object.getPrototypeOf()
 *          - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ Object.prototype.hasOwnProperty()
 *          - –¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤
 */

// const objC = {
//     z: 5,
// };
// console.log('objC', objC);

// const objB = Object.create(objC)
// objB.y = 2
// console.log('objB', objB);

// const objA = Object.create(objB)
// objA.x = 1
// console.log('objA', objA);

/*
 *      –û—Å–Ω–æ–≤—ã –û–û–ü: –∫–ª–∞—Å—Å, —ç–∫–∑–µ–º–ø–ª—è—Ä (–æ–±—ä–µ–∫—Ç), –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

/*
 *      –§—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
 *          - –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ
 *          - –û–ø–µ—Ä–∞—Ç–æ—Ä new
 *          - –°–≤–æ–π—Å—Ç–≤–æ Function.prototype
 */

//!     1. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ new, —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
//!     2. –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞,
//!         —Ç–æ –µ—Å—Ç—å –≤ this –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ
//!     3. –í —Å–≤–æ–π—Å—Ç–≤–æ this.__proto__ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç Car.prototype
//!         —Ç–æ –µ—Å—Ç—å Car.prototype —ç—Ç–æ –ü–†–û–¢–û–¢–ò–ü –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—ç–∫–∑–µ–º–ø–ª—è—Ä–∞)
//!     4. –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ new Car

// const Car = function ({ brand, model, price } = {}) {
//     // const { brand, model, price } = config;

//     this.brand = brand;
//     this.model = model;
//     this.price = price;

// };

// Car.prototype.sayHi = function () {
//     console.log('Car.prototype.sayHi -> this', this);
//     console.log('Hello :) ');
// }

// Car.prototype.changePrice = function (newPrice) {
//         this.price = newPrice;
//     };

// console.log(Car.prototype);

// Car.description = '–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å';

// const myCar = new Car({
//     brand: 'Audi',
//     model: 'Q3',
//     price: 35000,
// });
// console.log(myCar);
// myCar.sayHi();
// myCar.changePrice(10000)
// console.log(myCar);

// const myCar2 = new Car({
//     brand: 'BMW',
//     model: 'Q3',
//     price: 50000,
// });
// console.log(myCar2);

// const myCar3 = new Car({
//     brand: 'Audi',
//     model: 'A6',
//     price: 65000,
// });
// console.log(myCar3);

//? ___________________________________________

// const User = function ({ email, password } = {}) {
//     (this.email = email), (this.password = password);
// };

// User.prototype.changeEmail = function (newEmail) {
//     this.email = newEmail;
// };
// User.prototype.changePassword = function (newPassword) {
//     this.password = newPassword;
// };

// const mango = new User({ email: 'mango@mail.com', password: 1111111 });
// // console.log(mango);

// mango.changeEmail('pahancheg@icloud.com');
// // console.log(mango);

// mango.changePassword('qweqwe123');

// console.log(mango);

//? ___________________________________________

//!     1. –£ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ __proto__
//!     2. –í —ç—Ç–æ–º —Å–≤–æ–π—Å—Ç–≤–µ –ª–µ–∂–∏—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –µ–≥–æ –ü–†–û–¢–û–¢–ò, —Ç–æ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç
//!     3. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Ç–µ—Ä–∞–ª–∞ –æ–±—ä–µ–∫—Ç–∞, –≤ —Å–≤–æ–π—Å—Ç–≤–æ __proto__ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –§—É–Ω–∫—Ü–∏—è.prototype

// const objA = {
//     x: 5,
// };

// console.log(objA.__proto__ === Object.prototype);    //! true

//!     4. –§—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è :)
//!     5. –í—Å—é –º–∞–≥–∏—é –¥–µ–ª–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä new
//!     6. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ new, —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
//!     7. –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
//!     8. –í —Å–≤–æ–π—Å—Ç–≤–æ this.__proto__ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –§—É–Ω–∫—Ü–∏—è.prototype
//      this = Object.create(User.prototype)

//!     9. –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ new –§—É–Ω–∫—Ü–∏—è()

//? ___________________________________________

/*
 *      –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã
 *          - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
 *          - –í —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –Ω–µ –Ω—É–∂–µ–Ω this
 */

// User.message = '–Ø —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –º–µ–Ω—è –Ω–µ—Ç –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –∏–ª–∏ –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞—Ö'

// User.logInfo = function (obj) {
//     console.log('User.logInfo -> obj', obj);
//     console.log('–ü–æ—á—Ç–∞: ', obj.email);
//     console.log('–ü–∞—Ä–æ–ª—å: ', obj.password);

// }

// User.logInfo(mango)

// console.dir(User);
// console.log(Math.round(5.1));
// console.log(Math.PI);

//? ___________________________________________

// const CounterPlugin = function ({
//     rootSelector,
//     initialValue = 0,
//     step = 1,
// } = {}) {
//     this._value = initialValue;
//     this._step = step;

//     this._refs = this._getRefs(rootSelector);
//     this._bindEvents();
//     this.updateValueUI()
// };
// CounterPlugin.prototype._getRefs = function (rootSelector) {
//     const refs = {};
//     refs.container = document.querySelector(rootSelector);
//     refs.incrementBtn = refs.container.querySelector('[data-increment]');
//     refs.decrementBtn = refs.container.querySelector('[data-decrement]');
//     refs.value = refs.container.querySelector('[data-value]');

//     return refs;
// };

// CounterPlugin.prototype._bindEvents = function () {
//     this._refs.incrementBtn.addEventListener('click', () => {
//         this.increment();
//         this.updateValueUI();
//     });

//     this._refs.decrementBtn.addEventListener('click', () => {
//         this.decrement();
//         this.updateValueUI();
//     });
// };

// CounterPlugin.prototype.updateValueUI = function () {
//     this._refs.value.textContent = this._value;
// };

// CounterPlugin.prototype.increment = function () {
//     this._value += this._step;
// };
// CounterPlugin.prototype.decrement = function () {
//     this._value -= this._step;
// };

// new CounterPlugin({ rootSelector: '#counter1', step: 10, initialValue: 100 });
// new CounterPlugin({ rootSelector: '#counter2', step: 2 });

//? ___________________________________________

/*
 *      –ö–ª–∞—Å—Å—ã
 *          - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
 *          - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 *          - –º–µ—Ç–æ–¥—ã
 *          - static
 *          - –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
 *          - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤
 *          - –≥–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
 */

// class Car {
//     static description = '–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å';

//     static logInfo(carObj) {
//         console.log('Car.logInfo -> carObj', carObj);
//     }
//     // #test = 'test';
//     mySuperPublicField = 555;

//     constructor({ brand, model, price } = {}) {
//         console.log('–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä');

//         this._brand = brand;
//         this._model = model;
//         this._price = price;
//     }

//     get price() {
//         return this._price;
//     }
//     set price(newPrice) {
//         this._price = newPrice;
//     }

//     get model() {
//         return this._model;
//     }
//     set model(newModel) {
//         this._model = newModel;
//     }

//     // changePrice(newPrice) {
//     //     this.price = newPrice;

//     //     // console.log(this.#test);
//     // }

//     set model(newModel) {
//         this._model = newModel;
//     }
//     // setModel(newModel) {
//     //     this.model = newModel;
//     // }

//     get model() {
//         return this._model;
//     }
//     // getModel() {
//     //     return this.model
//     // }
// }

// console.dir(Car);

// const carInstance = new Car({
//     brand: 'Audi',
//     model: 'Q3',
//     price: 35000,
// });

// console.log(carInstance);

// carInstance.price = 20;

// console.log(carInstance);

// carInstance.model = 'Q7'
// console.log(carInstance);

/*
 *      –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
 *          - extends
 *          - super()
 */

// class Hero {
//     constructor({ name = 'Hero', xp = 0 } = {}) {
//         this.name = name;
//         this.xp = xp;
//     }
//     gainXp(amount) {
//         console.log(`${this.name} –ø–æ–ª—É—á–∞–µ—Ç ${amount} –æ–ø—ã—Ç–∞`);
//         this.xp += amount;
//     }
// }

// // const mango = new Hero({ name: 'mango', xp: 1000 });

// class Warrior extends Hero {
//     constructor({ weapon, ...restProps } = {}) {
//         super(restProps);

//         this.weapon = weapon;
//     }

//     attack() {
//         console.log(`${this.name} –∞—Ç–∞–∫—É–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è ${this.weapon}`);
//     }
// }

// class Berserk extends Warrior {
//     constructor({ warcry, ...restProps } = {}) {
//         super(restProps);

//         this.warcry = warcry;
//     }

//     babyRage() {
//         console.log(this.warcry);
//     }
// }

// const ajax = new Berserk({
//     name: 'Ajax',
//     xp: 5000,
//     weapon: 'Axe',
//     warcry: 'Waaaaaaah!!',
// });
// console.log(ajax);
// ajax.babyRage();
// ajax.attack()
// ajax.gainXp(4000)

// class Mage extends Hero {
//     constructor({ spells = [], ...restProps } = {}) {
//         super(restProps);

//         this.spells = spells;
//     }

//     cast() {
//         console.log(`${this.name} —á—Ç–æ-—Ç–æ —Ç–∞–º –∫–∞—Å—Ç—É–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è ${this.spells}`);
//     }
// }

// const mango = new Warrior({ name: 'Mango', xp: 1000, weapon: '–ê–ª–µ–±–∞—Ä–¥–∞' });
// console.log(mango);

// mango.attack();

// const poly = new Mage({
//     name: 'Poly',
//     xp: 500,
//     weapon: ['–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö', 'FireBall'],
// });
// console.log(poly);
// poly.cast();
// poly.gainXp(19500);
// console.log(poly);

//? ___________________________________________

// console.log((document.querySelector('[data-value]').textContent = 'hi'));
// console.log(document.querySelector('div'));

// document.querySelector('[data-increment').textContent = '–£–º–µ–Ω—å—à–∏—Ç—å';
// document.querySelector('[data-decrement]').textContent = '–£–≤–µ–ª–∏—á–∏—Ç—å';

// // document.querySelector('[data-increment').innerHTML =
// //     '<div><a href="">–£–º–µ–Ω—å—à–∏—Ç—å</a></div>';

// // document.querySelector('div').remove();
// document.querySelector('div').append('hello');

//? ___________________________________________

/*
 *      –ü–ª–∞–Ω:
 *          - –û–±—ä–µ–∫—Ç—ã window –∏ document
 *          - –ü–æ–∏—Å–∫ DOM-—É–∑–ª–æ–≤ —Å querySelector –∏ querySelectorAll
 *          - –°–≤–æ–π—Å—Ç–≤–æ textContent
 *          - –°–≤–æ–π—Å—Ç–≤–æ "–Ω–∞–≤–∏–≥–∞—Ü–∏–∏" –ø–æ DOM-—É–∑–ª–∞–º
 *          - –†–∞–±–æ—Ç–∞ —Å classList –∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º
 *          - –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤
 *          - –í—Å—Ç–∞–≤–∫–∞ —É–∑–ª–æ–≤: appendChild, insertBefore, append, prepend –∏ —Ç.–¥.
 *          - –ü–∞—Ä—Å —Å—Ç—Ä–æ–∫–∏: innerHTML –∏ insertAdjacentHTML
 */

/*
 *      document.querySelector(selector) –∏ document.querySelectorAll(selector)
 *          selector - –ª—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä
 *
 *      –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç?
 */

/*
 *      Document.querySelector* –∏ Element.querySelector*
 */

// console.log(document.querySelector('.site-nav'));

// const navEl = document.querySelector('.site-nav');

// const navLinksEl = navEl.querySelectorAll('.site-nav__link');
// console.log(navEl);
// console.log(navLinksEl);

/*
 *      –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ (hero)
 *          - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 *          - –¢–µ–∫—Å—Ç –∏ textContent
 *      http://images.pexels.com/photos/1870376/pexels-photo-1870376.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=480
 */

// const imageEl = document.querySelector('.hero__image');

const magicBtn = document.querySelector('.js-magic__btn');

// console.log('imageEl', imageEl);
// console.log(imageEl.src);
// imageEl.src =
//     'http://images.pexels.com/photos/1870376/pexels-photo-1870376.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=480';
// imageEl.alt = '–≠—Ç–æ –Ω–æ–≤—ã–π –∫–æ—Ç–∏–∫';

// const heroTitleEL = document.querySelector('.hero__title');
// console.log('heroTitleEL', heroTitleEL);

// heroTitleEL.textContent = '–Ø —Å–ª–∞–¥–∫–∏–π –ø–∏—Ä–æ–∂–æ—á–µ–∫!';

/*
 *      –ê—Ç—Ä–∏–±—É—Ç—ã
 *          - get( –∏–º—è-–∞—Ç—Ä–∏–±—É—Ç–∞ )
 *          - set( –∏–º—è-–∞—Ç—Ä–∏–±—É—Ç–∞ )
 *          - remove( –∏–º—è-–∞—Ç—Ä–∏–±—É—Ç–∞ )
 *          - has( –∏–º—è-–∞—Ç—Ä–∏–±—É—Ç–∞ )
 */

// console.log(imageEl.getAttribute('src'));
// console.log(imageEl.src);
// console.log(imageEl.hasAttribute('src'));

/*
 *      Data-–∞—Ç—Ä–∏–±—É—Ç—ã
 */

// const actions = document.querySelectorAll('.js-actions button');
// console.log(actions[0].dataset.action);

// magicBtn.addEventListener('click', () => {
//     const inputEl = document.querySelector('.js-input');
//     console.log(inputEl.valuel);
//     // inputEl.value = 'qweqweq'
// })

// console.log(new Date());

/*
 *      –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å classList
 *          - add( –∫–ª–∞—Å—Å )
 *          - remove( –∫–ª–∞—Å—Å )
 *          - toggle( –∫–ª–∞—Å—Å )
 *          - replace( —Å—Ç–∞—Ä—ã–π–ö–ª–∞—Å—Å, –Ω–æ–≤—ã–π–ö–ª–∞—Å—Å)
 *          - contains( –∫–ª–∞—Å—Å )
 */

// const navEl = document.querySelector('.site-nav');
// console.log(navEl.classList);
// // navEl.classList.toggle('supep-cool')
// navEl.classList.add('qwe');
// navEl.classList.remove('site-nav');
// navEl.classList.replace('qwe', 'qweqwe');

// magicBtn.addEventListener('click', () => {
//     navEl.classList.toggle('supep-cool');
// });

// const currentPageUrl = '/index.html';

// const linkEl = document.querySelector(
//     `.site-nav__link[href='${currentPageUrl}']`
// );
// linkEl.textContent = 'hello'

// console.log(linkEl);

// linkEl.classList.add('site-nav__link--current');

/*
 *      –°–≤–æ–π—Å—Ç–≤–∞ "–Ω–∞–≤–∏–≥–∞—Ü–∏–∏" –ø–æ DOM-—É–∑–ª–∞–º (–≤–∑—è—Ç—å —Å–ø–∏—Å–æ–∫)
 */

// const navEl = document.querySelector('.site-nav');

// // const firstNavItemEl = navEl.querySelector('.site-nav__item')
// console.log(firstNavItemEl);

// console.log(navEl.firstElementChild);

/*
 *      –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 *          - –í—Å—Ç–∞–≤–∫–∞ —É–∑–ª–æ–≤: appendChild(elem), insertBefore(elem, nextSibling), append(...elems), prepend(...elems)
 */

/*
 *      –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
 */
// const heroEl = document.querySelector('.hero');
// const titleEl = document.createElement('h1');
// titleEl.classList.add('page-title');
// titleEl.textContent = '–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã';
// console.log(titleEl);
// heroEl.insertBefore(titleEl, heroEl.firstElementChild);

/*
 *      –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 *          https://cdn.pixabay.com/photo/2018/07/26/07/45/valais-3562988_1280.jpg
 *          valais-alpine-mountains-glacier
 */

/*
 *      –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
 */

// const imageEl = document.createElement('img');

// imageEl.src =
//     'https://cdn.pixabay.com/photo/2018/07/26/07/45/valais-3562988_1280.jpg';
// imageEl.alt = 'valais-alpine-mountains-glacier';
// imageEl.width = 340;
// // console.log(imageEl);

// // heroEl.appendChild(titleEl)
// // heroEl.appendChild(imageEl)
// heroEl.append(titleEl, imageEl);

// document.body.appendChild(imageEl);

// const navItemEl = document.createElement('li');
// navItemEl.classList.add('site-nav__item');

// const navLinkEl = document.createElement('a');
// navLinkEl.classList.add('site-nav__link');
// navLinkEl.textContent = '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç';
// navLinkEl.href = '/profile';

// console.log(navItemEl);
// console.log(navLinkEl);

// navItemEl.appendChild(navLinkEl);
// console.log(navItemEl);

// const navEl = document.querySelector('.site-nav');

// // navEl.appendChild(navItemEl)

// navEl.insertBefore(navItemEl, navEl.firstElementChild);

/*
 *      –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
 */

// const colorPickerOptions = [
//     { label: 'red', color: '#F44336' },
//     { label: 'green', color: '#4CAF50' },
//     { label: 'blue', color: '#2196F3' },
//     { label: 'gray', color: '#607D8B' },
//     { label: 'pink', color: '#E91E63' },
//     { label: 'indigo', color: '#3F51B5' },
// ];

// const option = colorPickerOptions[0];

// const buttonEl = document.createElement('button');
// console.log(buttonEl);
// buttonEl.type = 'button';
// buttonEl.textContent = option.label;
// buttonEl.style.backgroundColor = option.color

//? ___________________________________________

// const colorPickerContainerEl = document.querySelector('.js-color-picker');

// const elements = [];

// for (let i = 0; i < colorPickerOptions.length; i += 1) {
//     const option = colorPickerOptions[i];

// const buttonEl = document.createElement('button');
// buttonEl.type = 'button';
// buttonEl.textContent = option.label;
// buttonEl.style.backgroundColor = option.color;

//     elements.push(buttonEl)
// }

// console.log(elements);

// colorPickerContainerEl.append(...elements)

//? ___________________________________________

// const colorPickerContainerEl = document.querySelector('.js-color-picker');

// const elements = colorPickerOptions.map(option => {
//     const buttonEl = document.createElement('button');
//     buttonEl.type = 'button';
//     buttonEl.textContent = option.label;
//     buttonEl.style.backgroundColor = option.color;

//     return buttonEl;
// });

// colorPickerContainerEl.append(...elements)

/*
 *      –ü–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–æ–ª–æ—Ä–ø–∏–∫–µ—Ä–∞
 */

// const makeColorPickerOptions = options => {
//     return options.map(option => {
//         const buttonEl = document.createElement('button');
//         buttonEl.type = 'button';
//         buttonEl.textContent = option.label;
//         buttonEl.style.backgroundColor = option.color;

//         return buttonEl;
//     })
// }

// const elements = makeColorPickerOptions(colorPickerOptions)
// colorPickerContainerEl.append(...elements);

/*
 *      –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞
 *          - –í –∫–ª–∞—Å—Å–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å product--on-sale product--not-available
 */

// const product = {
//     name: '–°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã',
//     description:
//         'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Minus ut harum perspiciatis, mollitia consequuntur, dolor nam nihil, quidem porro adipisci facere excepturi eum culpa dolores!',
//     price: 2000,
//     available: true,
//     onSale: true,
// };

/*
 *
 *
 *
 *
 *
 */

// const productContainerEl = document.querySelector('.js-products');

// const productEl = document.createElement('article');
// productEl.classList.add('product');

// const nameEl = document.createElement('h2')
// nameEl.classList.add('product__name');
// nameEl.textContent = product.name

// const descrEl = document.createElement('p')
// descrEl.textContent = product.description
// descrEl.classList.add('product__descr')

// const priceEl = document.createElement('p');
// priceEl.textContent = `–¶–µ–Ω–∞: ${product.price} –∫—Ä–µ–¥–∏—Ç–æ–≤`;
// priceEl.classList.add('product__price');

/*
 *      –ü–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
 */

// productEl.append(nameEl, descrEl, priceEl)

// console.log(productEl);

/*
 *      –°–æ–±—ã—Ç–∏—è
 *          - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
 *          - –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–±–µ–∫–æ–≤ –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
 *              - handle*: handleEvent –∏–ª–∏ handleSubjectEvent
 *              - *Handler: eventHandler –∏–ª–∏ subjectEventHandler
 *              - on*: onEvent –∏–ª–∏ onSubjectEvent
 *          - –°—Å—ã–ª–æ—á–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –∫–æ–ª–±–µ–∫–æ–≤
 *          - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
 */

// const targetBtn = document.querySelector('.js-target-btn');
// const addListenerBtn = document.querySelector('.js-add-listener');
// const removeListenerBtn = document.querySelector('.js-remove-listener');

// targetBtn.addEventListener('click', () => {
//     console.log('Click');
// });

// function handleClick() {
//     console.log('Click');
// }

// function logMessage() {
//     console.log('–ö–ª–∏–∫ –ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–µ');
// }

// addListenerBtn.addEventListener('click', () => {
//     console.log('–í–µ—à–∞—é —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É');

//     // targetBtn.addEventListener('click', () => {
//     //     console.log('–ö–ª–∏–∫ –ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–µ');
//     // });

//     targetBtn.addEventListener('click', onTargetBtnClick);
// });

// removeListenerBtn.addEventListener('click', () => {
//     console.log('–°–Ω–∏–º–∞—é —Å–ª—É—à–∞—Ç–µ–ª—è —Å —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏');

//     // targetBtn.removeEventListener('click', () => {
//     //     console.log('–ö–ª–∏–∫ –ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–µ');
//     // });

//     targetBtn.removeEventListener('click', onTargetBtnClick);
// });

// function onTargetBtnClick() {
//         console.log('–ö–ª–∏–∫ –ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–µ');

// }

/*
 *      - –°–≤–æ–π—Å—Ç–≤–æ submit
 *      - –î–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 *      - –°–≤–æ–π—Å—Ç–≤–æ elements
 *      - –ö–ª–∞—Å—Å FormData - http://developer.mozilla.org/en-US/docs/Web/API/FormData
 */

// const form = document.querySelector('.js-register-form');

// form.addEventListener('submit', onFormSubmit);

// function onFormSubmit(event) {
//     event.preventDefault();

//     const formElements = event.currentTarget.elements;

//     console.dir(formElements);

//     const mail = formElements.email.value;
//     const password = formElements.password.value;
//     const subscription = formElements.subscription.value;

//     const formData = new FormData(event.currentTarget)

//     console.log(formData);

//     formData.forEach((value, name) => {
//         console.log(value, name);
//     })
// }

/*
 *      –ü–∞—Ç—Ç–µ—Ä–Ω "–û–±—ä–µ–∫—Ç —Å—Å—ã–ª–æ–∫"
 *
 *      –°–æ–±—ã—Ç–∏—è
 *          - focus –∏ blur
 *          - input –∏ change
 *          - –ß–µ–∫–±–æ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ checked
 */

// const refs = {
//     input: document.querySelector('.js-input'),
//     nameLabel: document.querySelector('.js-button > span'),
//     licenseCheckbox: document.querySelector('.js-license'),
//     btn: document.querySelector('.js-button'),
// };

// refs.input.addEventListener('focus', onInputFocus)
// refs.input.addEventListener('blur', onInputBlur)
// refs.input.addEventListener('change', onInputChange)
// refs.input.addEventListener('input', onInputChange);

// refs.input.addEventListener('input', onInputChange)

// function onInputFocus() {
//     console.log('Input –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å - —Å–æ–±—ã—Ç–∏–µ focus');
// }

// function onInputBlur() {
//     console.log('Input –ø–æ—Ç–µ—Ä—è–ª —Ñ–æ–∫—É—Å - —Å–æ–±—ã—Ç–∏–µ blur');
// }

// function onInputChange(event) {
//     console.log(event.currentTarget.value);
//     refs.nameLabel.textContent = event.currentTarget.value
// }

// refs.licenseCheckbox.addEventListener('change', onLicenseChange);

// function onLicenseChange(event) {
//     refs.btn.disabled = !event.currentTarget.checked
// }

/*
 *      –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π: keypress, keydown, keyup
 *          - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è keypress
 *          - –°–≤–æ–π—Å—Ç–≤–∞ KeyboardEvent.key –∏ KeyboardEvent.code
 */

// const refs = {
//     output: document.querySelector('.js-output'),
//     clearBtn: document.querySelector('.js-clear'),
// };

// window.addEventListener('keypress', onKeypress)
// refs.clearBtn.addEventListener('click', onClearOutput)

// function onKeypress(event) {
//     // console.log(event);
//     // console.log('event.key: ', event.key);
//     // console.log('event.code: ', event.code);

//     refs.output.textContent += event.key
// }

// function onClearOutput(event) {
//     refs.output.textContent = ' '
// }

/*
 *      –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
 *          - mouseenter –∏ mouseleave (—ç—Ç–æ —Ö–æ–≤–µ—Ä)
 *          - mouseover –∏ mouseout
 *          - mousemove (chatty event - –±–æ–ª—Ç–ª–∏–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ)
 *          - –î–æ–ª–º–∞—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: http://nerdparadise.com/programming/javascriptmouseposition
 *          - –•–æ—Ä–æ—à–∞—è –∑–∞–¥–∞—á–∫–∞ - https://learn.javascript.ru/task/move-ball-field
 */

//? ___________________________________________

/*
 *      1. –û—Ç–∫—Ä—ã—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ: onModalOpen –∏ onModalClose
 *      2. –ó–∞–∫—Ä—ã—Ç—å –ø–æ –∫–ª–∏–∫—É –≤ –±–µ–∫–¥—Ä–æ–ø: onBackDropClick
 *      3. –ó–∞–∫—Ä—ã—Ç—å –ø–æ ESC: onEscapeKeypress
 *
 *      –í CSS –µ—Å—Ç—å –∫–ª–∞—Å—Å show-modal, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ body –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
 */

// const refs = {
//     openModalBtn: document.querySelector('[data-action="open-modal"]'),
//     closeModalBtn: document.querySelector('[data-action="close-modal"]'),
//     backdrop: document.querySelector('.js-backdrop'),
// };

// refs.openModalBtn.addEventListener('click', onOpenModal);
// refs.closeModalBtn.addEventListener('click', onCloseModal);
// refs.backdrop.addEventListener('click', onBackDropClick);

// function onOpenModal() {
//     window.addEventListener('keydown', onEscKeyPress);
//     document.body.classList.add('show-modal');
// }
// function onCloseModal() {
//     window.removeEventListener('keydown', onEscKeyPress);
//     document.body.classList.remove('show-modal');
// }

// // function onOpen_CloseToggle() {
// //     document.body.classList.toggle('show-modal');
// // }

// function onBackDropClick() {
//     if (event.target === event.currentTarget) {
//         onCloseModal();
//     }
//     // console.log(event.currentTarget);
//     // console.log(event.target);
// }

// function onEscKeyPress(event) {
//     if (event.code === 'Escape') {
//         onCloseModal();
//     }
// }

/*
 *      –í—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π
 *          event.target - —Ü–µ–ª–µ–≤–æ–π (–∏—Å—Ö–æ–¥–Ω—ã–π) —ç–ª–µ–º–µ–Ω—Ç
 *          event.currentTarget - —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–π–º–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ
 */

// const refs = {
//     parent: document.querySelector('#parent'),
//     child: document.querySelector('#child'),
//     innerChild: document.querySelector('#inner-child'),
// };

// refs.parent.addEventListener('click', onParentClick);
// refs.child.addEventListener('click', onChildClick);
// refs.innerChild.addEventListener('click', onInnerChildClick);

// function onParentClick(evt) {
//     console.log('onParentClick');
//     console.log('onParentClick -> evt.target', evt.target);
//     console.log('onParentClick -> evt.currentTarget', evt.currentTarget);
// }

// function onChildClick(evt) {
//     console.log('onChildClick');
//     console.log('onChildClick -> evt.target', evt.target);
//     console.log('onChildClick -> evt.currentTarget', evt.currentTarget);
// }

// function onInnerChildClick(evt) {
//     console.log('onInnerChildClick');
//     console.log('onInnerChildClick -> evt.target', evt.target);
//     console.log('onInnerChildClick -> evt.currentTarget', evt.currentTarget);
// }

/*
 *      –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
 *          - –æ–±—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å
 *          - —Ñ–∏–ª—å—Ç—Ä —Ü–µ–ª–∏ –∫–ª–∏–∫–∞
 */

// const container = document.querySelector('.js-container');

// container.addEventListener('click', onClick);

// function onClick(event) {
//     if (event.target.nodeName !== 'BUTTON') {
//         return;
//     }
//     console.log(event.target.textContent);
// }

// /*
//  *      –ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
//  */

// const addBtn = document.querySelector('.js-add-btn');
// let labelCounter = 6

// addBtn.addEventListener('click', onAddBtnClick)

// function onAddBtnClick() {
//     const btn = document.createElement('button')
//     btn.textContent = `–ö–Ω–æ–ø–∫–∞ ${labelCounter}`
//     btn.type = 'button'

//     container.appendChild(btn)
//     labelCounter += 1
// }

/*
 *      –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 *          - –æ–¥–∏–Ω –∏–∑ –º–Ω–æ–≥–∏—Ö
 *          - –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –º–Ω–æ–≥–∏—Ö –∏ Set
 */

// const tags = document.querySelector('.js-tags');
// let selectedTag = null

// tags.addEventListener('click', onClick);

// function onClick(evt) {
//     if (evt.target.nodeName !== 'BUTTON') {
//         return
//     }

//     const currentActiveBtn = document.querySelector('.tags__btn-active');

//     if (currentActiveBtn) {
//         currentActiveBtn.classList.remove('tags__btn-active');
//     }

//         // currentActiveBtn?.classList.remove('tags__btn-active');

//     const nextActiveBtn = evt.target
//     nextActiveBtn.classList.add('tags__btn-active');
//     selectedTag = nextActiveBtn.dataset.value
//     console.log(selectedTag);
// }

//? ___________________________________________

// const tags = document.querySelector('.js-tags');
// const selectedTags = new Set();

// tags.addEventListener('click', onClick);

// function onClick(evt) {
//     if (evt.target.nodeName !== 'BUTTON') {
//         return;
//     }

//     const btn = evt.target;
//     const isActive = btn.classList.contains('tags__btn-active');

//     if (isActive) {
//         selectedTags.delete(btn.dataset.value);
//     } else {
//         selectedTags.add(btn.dataset.value);
//     }

//     // selectedTags.push(evt.target.dataset.value);

//     btn.classList.toggle('tags__btn-active');

//     // if (btn.classList.contains('tags__btn-active')) {
//     //     btn.classList.remove('tags__btn-active');
//     // }
//     console.log(selectedTags);
// }

//? ___________________________________________
// import colorCardTpl from '../templates/color-card.hbs'
// console.log(colorCardTpl)

// const colors = [
//     { hex: '#f44336', rgb: '244,67,54' },
//     { hex: '#e91e63', rgb: '233,30,99' },
//     { hex: '#9c27b0', rgb: '156,39,176' },
//     { hex: '#673ab7', rgb: '103,58,183' },
//     { hex: '#3f51b5', rgb: '63,81,181' },
//     { hex: '#2196f3', rgb: '33,150,243' },
//     { hex: '#00bcd4', rgb: '0,188,212' },
//     { hex: '#009688', rgb: '0,150,136' },
//     { hex: '#4caf50', rgb: '76,175,80' },
//     { hex: '#ff3b3b', rgb: '255,235,59' },
//     { hex: '#ff9800', rgb: '255,152,0' },
//     { hex: '#795548', rgb: '121,85,72' },
//     { hex: '#607d8b', rgb: '96,125,139' },
// ];

// const paletteContainer = document.querySelector('.js-palette');
// const cardsMarkup = createColorCardsMarkup(colors);

// paletteContainer.insertAdjacentHTML('beforeend', cardsMarkup);

// function createColorCardsMarkup(colors) {
//     return colors
//         .map(({ hex, rgb }) => {
//             return `
//             <div class="color-card">
//                 <div class="color-swatch" data-hex="${hex}" data-rgb="${rgb}" style="background-color: ${hex};"></div>
//                 <div class="color-meta">
//                     <p>HEX: ${hex}</p>
//                     <p>RGB ${rgb}</p>
//                 </div>
//             </div>
//             `;
//         })
//         .join('');
// }

// paletteContainer.addEventListener('click', onPaletteContainerClick);

// function onPaletteContainerClick(e) {
//     const isColorSwatch = e.target.classList.contains('color-swatch');
//     if (!isColorSwatch) {
//         return;
//     }

//     const swatchEl = e.target;
//     const parentColorCard = swatchEl.closest('.color-card');

//     removeActiveCardStatus();
//     addActiveCardClass(parentColorCard)
//     setBodyBgColor(swatchEl.dataset.hex);
// }

// function setBodyBgColor(color) {
//     document.body.style.backgroundColor = color;
// }

// function removeActiveCardStatus() {
//     const currentActiveCard = document.querySelector('.color-card.is-active');

//     if (currentActiveCard) {
//         currentActiveCard.classList.remove('is-active');
//     }
// }

// function addActiveCardClass(card) {
//     card.classList.add('is-active');
//  }

//? ___________________________________________

/*
 *      Chatty events (–±–æ–ª—Ç–ª–∏–≤—ã–µ —Å–æ–±—ã—Ç–∏—è)
 *      –ü—Ä–∏—ë–º—ã throttle –∏ debounce —Å lodash
 *      [–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π] (https://web.dev/native-lazy-loading/)
 *          - –ù–∞—Ç–∏–≤–Ω–∞—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º loading
 *          - –ë–∏–±–∏–æ—Ç–µ–∫–∞ lazysizes
 */

/*
 *      Chatty events
 *      –ü—Ä–∏–µ–º—ã throttling –∏ debouncing —Å Lodash
 */

/*
 *      Mousemove –∏ throttle
 */

// const coordsOutputRef = document.querySelector('.js-coords');
// let mouseMoveCbInvocationCounter = 0;

// // window.addEventListener('mousemove', _.throttle(onMouseMove, 500))

// function onMouseMove(event) {
//     mouseMoveCbInvocationCounter += 1;

//     coordsOutputRef.textContent = `
//     –ö–æ–ª-–≤–æ –≤—ã–∑–æ–≤–æ–≤ onMouseMove: ${mouseMoveCbInvocationCounter},
//     x: ${event.clientX},
//     y: ${event.clientY}`;
// }

/*
 *      input –∏ debounce
 */

// const inputRef = document.querySelector('.js-input');
// const outputRef = document.querySelector('.js-output');
// let inputCbInvocationCounter = 0;

// inputRef.addEventListener('input', _.debounce(onInputChange, 2000));

// function onInputChange(event) {
//     inputCbInvocationCounter += 1

//     outputRef.textContent = `
//     –ö–æ–ª-–≤–æ –≤—ã–∑–æ–≤–æ–≤ onInputChange: ${inputCbInvocationCounter},
//     –ó–Ω–∞—á–µ–Ω–∏–µ: ${event.target.value}
// `;
// }

// ?____________________________________________

// const tech = [
//     { label: 'HTML' },
//     { label: 'CSS' },
//     { label: 'JavaScript' },
//     { label: 'Node.js' },
//     { label: 'React' },
//     { label: 'Vue' },
//     { label: 'Next.js' },
//     { label: 'Mobx' },
//     { label: 'Redux' },
//     { label: 'React Router' },
//     { label: 'GraphQl' },
//     { label: 'PostgreSQL' },
//     { label: 'MongoDB' },
// ];

// const refs = {
//     list: document.querySelector('.js-list'),
//     input: document.querySelector('#filter'),
// };

// refs.input.addEventListener('input', _.debounce(onFilterChange, 500));

// const listItemsMarkup = createListItemsMarkup(tech);

// function createListItemsMarkup(items) {
//     return items.map(item => `<li>${item.label}</li>`).join('');
// }

// populateList(listItemsMarkup);

// function onFilterChange(e) {
//     const filter = e.target.value.toLowerCase();

//     const filteredItems = tech.filter(t =>
//         t.label.toLowerCase().includes(filter)
//     );

//     const listItemsMarkup = createListItemsMarkup(filteredItems);
//     populateList(listItemsMarkup);
// }

// function populateList(markup) {
//     refs.list.innerHTML = markup;
// }

// ?____________________________________________

/*
 *      –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–æ–Ω—Ü–µ–ø—Ü–∏—è)
 *          - –Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 *          - —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

// const lazyImages = document.querySelectorAll('img[loading="lazy"]');

// console.log(lazyImages);

// lazyImages.forEach(image => {
//     image.addEventListener('load', onImageLoaded, { once: true });
// });

// function onImageLoaded(e) {
//     console.log('–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');

//     e.target.classList.add('appear');
// }

/*
 *      –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ lazysizes
 *          - feature detection
 */

// const lazyImages = document.querySelectorAll('img[data-src]');

// console.log(lazyImages);

// lazyImages.forEach(image => {
//     image.addEventListener('load', onImageLoaded, { once: true });
// });

// function onImageLoaded(e) {
//     e.target.classList.add('appear');
// }

//? ___________________________________________

// if ('loading' in HTMLImageElement.prototype) {
//     addSrcLazyImages();
// } else {
//     addLAzySizeScript();
// }

// function addLAzySizeScript() {
//     const script = document.querySelector('script');
//     script.src =
//         'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js';
//     script.integrity =
//         'sha512-q583ppKrCRc7N5O0n2nzUiJ+suUv7Et1JGels4bXOaMFQcamPk9HjdUknZuuFjBNs7tsMuadge5k9RzdmO+1GQ==';
//     script.src =
//         'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js';
//     script.crossOrigin = 'anonymous';
//     script.referrerpolicy = 'no-referrer';

//     document.body.appendChild(script);
// }
// function addSrcLazyImages() {
//     const lazyImages = document.querySelectorAll('img[loading="lazy"]');
//     lazyImages.forEach(img => (img.src = img.dataset.src));
// }

//? ___________________________________________

// function fn(arr, line) {
//     const obj = {};
//     for (let i = 1; i <= line; i += 1) {
//         obj[i] = 0;
//     }
//     arr.forEach(buyer => {
//         const values = Object.values(obj);
//         const minValue = Math.min(...values);
//         const currentLine = value.indexOf(minValue) + 1;
//         obj[currentLine] += buyer;
//     });
//     return obj;
// }

// console.log(fn([12, 3, 5, 6, 2, 15, 7], 2));

// const gallery = new SimpleLightbox('.gallery a');

//? _________________________________________

//! setItem() - –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
//! getItem() - –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
//! removeItem() - –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
//! clear() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ

// import { createMarkup } from '../helpers/createMarkup';
// import { createModal } from '../helpers/createModal';
// import { findProduct } from '../helpers/findProduct';
// import { instruments } from '../helpers/instruments';
// import { onClick } from '../helpers/onClick';

// const search = document.querySelector('.js-search');
// const list = document.querySelector('.list');

// createMarkup(instruments, list);
// list.addEventListener('click', onClick);

// try {
//   console.log(tet_value);
// } catch (error) {
//   console.log(error);
// }

// console.log('after error');

// const favorite = document.querySelector('.js-favotire');
// const cart = document.querySelector('.js-cart');

// favorite.addEventListener('click',)
// cart.addEventListener('click', )

//? _________________________________________

//! ¬†–ê—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π JS

/*
 *    https://bool.dev/blog/detail/obyasnenie-event-loop-v-javascript-s-pomoshchyu-vizualizatsii
 *    https://www.jscamp.app/ru/docs/javascript25/
 */

// for (let i = 3; i > 3; i--) {
//     const delay = i * 1000

//     setTimeout(() => console.log(i), delay)
// }

// console.log('start');

// setTimeout(() => { console.log('async') }, 0)

// console.log('end');

//? _________________________________________

// console.time('test async')

// console.log('start');

// setTimeout(() => { console.log('async') }, 0)

// for (let i = 0; i < 100000; i += 1) {
//     console.log('value', i);
// }

// console.timeEnd('test async')

//? _________________________________________

// const date = new Date()
// const currentDate = Date.now()

// console.log(date);
// console.log(currentDate);

// const date = new Date()
// console.log(date);

// const date = new Date();
// console.log('Date: ', date);

// // –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ–Ω—å –º—ñ—Å—è—Ü—è –≤—ñ–¥ 1 –¥–æ 31
// console.log('getDate(): ', date.getDate());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ–Ω—å —Ç–∏–∂–Ω—è –≤—ñ–¥ 0 –¥–æ 6
// console.log('getDay(): ', date.getDay());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –º—ñ—Å—è—Ü—å –≤—ñ–¥ 0 –¥–æ 11
// console.log('getMonth(): ', date.getMonth());

// // –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–∫ –∑ 4 —Ü–∏—Ñ—Ä
// console.log('getFullYear(): ', date.getFullYear());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–¥–∏–Ω–∏
// console.log('getHours(): ', date.getHours());

// // –ü–æ–≤–µ—Ä—Ç–∞—î —Ö–≤–∏–ª–∏–Ω–∏
// console.log('getMinutes(): ', date.getMinutes());

// // –ü–æ–≤–µ—Ä—Ç–∞—î —Å–µ–∫—É–Ω–¥–∏
// console.log('getSeconds(): ', date.getSeconds());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
// console.log('getMilliseconds(): ', date.getMilliseconds());

//? _________________________________________

// const date = new Date();
// console.log('Date: ', date);

// // –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ–Ω—å –º—ñ—Å—è—Ü—è –≤—ñ–¥ 1 –¥–æ 31
// console.log('getUTCDate(): ', date.getUTCDate());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ–Ω—å —Ç–∏–∂–Ω—è –≤—ñ–¥ 0 –¥–æ 6
// console.log('getUTCDay(): ', date.getUTCDay());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –º—ñ—Å—è—Ü—å –≤—ñ–¥ 0 –¥–æ 11
// console.log('getUTCMonth(): ', date.getUTCMonth());

// // –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ–∫ –∑ 4 —Ü–∏—Ñ—Ä
// console.log('getUTCFullYear(): ', date.getUTCFullYear());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–¥–∏–Ω–∏
// console.log('getUTCHours(): ', date.getUTCHours());

// // –ü–æ–≤–µ—Ä—Ç–∞—î —Ö–≤–∏–ª–∏–Ω–∏
// console.log('getUTCMinutes(): ', date.getUTCMinutes());

// // –ü–æ–≤–µ—Ä—Ç–∞—î —Å–µ–∫—É–Ω–¥–∏
// console.log('getUTCSeconds(): ', date.getUTCSeconds());

// // –ü–æ–≤–µ—Ä—Ç–∞—î –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
// console.log('getUTCMilliseconds(): ', date.getUTCMilliseconds());

//? _________________________________________

// const date = new Date("March 16, 2030 14:25:00");

// console.log(date.setMinutes(50));
// // "Sat Mar 16 2030 14:50:00 GMT+0200"

// console.log(date.setFullYear(2040, 4, 8));
// // "Tue May 08 2040 14:50:00 GMT+0300"

//? _________________________________________

// const date = new Date("March 16, 2030 14:25:00");

// console.log(date.toString());
// // "Sat Mar 16 2030 14:25:00 GMT+0200 (Eastern European Standard Time)"

// console.log(date.toTimeString());
// // "14:25:00 GMT+0200 (Eastern European Standard Time)"

// console.log('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—Ä–µ–º—è –≤ PM/AM: ', date.toLocaleTimeString());
// // "2:25:00 PM"

// console.log(date.toUTCString());
// // "Sat, 16 Mar 2030 12:25:00 GMT"

// console.log(date.toDateString());
// // "Sat Mar 16 2030"

// console.log(date.toISOString());
// // "2030-03-16T12:25:00.000Z"

// console.log(date.toLocaleString());
// // "3/16/2030, 2:25:00 PM"

// console.log(date.getTime());
// // 1899894300000

//? _________________________________________

// // Change value of isSuccess variable to call resolve or reject
// const isSuccess = true;

// const promise = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     if (isSuccess) {
//       resolve("Success! Value passed to resolve function");
//     } else {
//       reject("Error! Error passed to reject function");
//     }
//   }, 2000);
// });

// // Will run first
// console.log("Before promise.then()");

// // Registering promise callbacks
// promise.then(
//   // onResolve will run third or not at all
//   value => {
//     console.log("onResolve call inside promise.then()");
//     console.log(value); // "Success! Value passed to resolve function"
//   },
//   // onReject will run third or not at all
//   error => {
//     console.log("onReject call inside promise.then()");
//     console.log(error); // "Error! Error passed to reject function"
//   }
// );

// // Will run second
// console.log("After promise.then()");

//? _________________________________________

// // Change value of isSuccess variable to call resolve or reject
// const isSuccess = true;

// const promise = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     if (isSuccess) {
//       resolve("Success! Value passed to resolve function");
//     } else {
//       reject("Error! Error passed to reject function");
//     }
//   }, 2000);
// });

// promise
//   .then(value => {
//     console.log(value);
//   })
//   .catch(error => {
//     console.log(error);
//   });

//? _________________________________________

// // Change value of isSuccess variable to call resolve or reject
// const isSuccess = true;

// const promise = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     if (isSuccess) {
//       resolve("Success! Value passed to resolve function");
//     } else {
//       reject("Error! Error passed to reject function");
//     }
//   }, 2000);
// });

// promise
//   .then(value => console.log(value)) // "Success! Value passed to resolve function"
//   .catch(error => console.log(error)) // "Error! Error passed to reject function"
//   .finally(() => console.log("Promise settled")); // "Promise settled"

//? _________________________________________

// const promise = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     resolve(5);
//   }, 2000);
// });

// promise
//   .then(value => {
//     console.log(value); // 5
//     return value * 2;
//   })
//   .then(value => {
//     console.log(value); // 10
//     return value * 3;
//   })
//   .then(value => {
//     console.log(value); // 30
//   })
//   .catch(error => {
//     console.log(error);
//   })
//   .finally(() => {
//     console.log('Final task');
//   });

//? _________________________________________

// const fetchUserFromServer = (username, onSuccess, onError) => {
//   console.log(`Fetching data for ${username}`);

//   setTimeout(() => {
//     // Change value of isSuccess variable to simulate request status
//     const isSuccess = true;

//     if (isSuccess) {
//       onSuccess('success value');
//     } else {
//       onError('error');
//     }
//   }, 2000);
// };

// const onFetchSuccess = user => {
//   console.log(user);
// };

// const onFetchError = error => {
//   console.error(error);
// };

// fetchUserFromServer('Mango', onFetchSuccess, onFetchError);

//? _________________________________________

// const fetchUserFromServer = username => {
//   return new Promise((resolve, reject) => {
//     console.log(`Fetching data for ${username}`);

//     setTimeout(() => {
//       // Change value of isSuccess variable to simulate request status
//       const isSuccess = true;

//       if (isSuccess) {
//         resolve('success value');
//       } else {
//         reject('error');
//       }
//     }, 2000);
//   });
// };

// fetchUserFromServer('Mango')
//   .then(user => console.log(user))
//   .catch(error => console.error(error));

//? _________________________________________

// function multiply(a, b) {
//   return a * b;
// }

// function square(n) {
//   return multiply(n, n);
// }

// function printSquare(n) {
//     var squared = square(n)
//     console.log(squared);
// }

// printSquare(4)

//? _________________________________________

// function loop() {
//     setTimeout(loop, 0)
// }

// loop()

//? _________________________________________

// Promise.resolve().then(() => console.log('Hey!'))
// console.log('Yo!');

//? _________________________________________

// console.log(new Date());
// const date = new Date();
// console.log(date.getMonth());
// console.log(date.getDay());

// const namesOfMonth = [
//   '–Ø–Ω–≤–∞—Ä—å',
//   '–§–µ–≤—Ä–∞–ª—å',
//   '–ú–∞—Ä—Ç',
//   '–ê–ø—Ä–µ–ª—å',
//   '–ú–∞–π',
//   '–ò—é–Ω—å',
//   '–ò—é–ª—å',
//   '–ê–≤–≥—É—Å—Ç',
//   '–°–µ–Ω—Ç—è–±—Ä—å',
//   '–û–∫—Ç—è–±—Ä—å',
//   '–ù–æ—è–±—Ä—å',
//   '–î–µ–∫–∞–±—Ä—å',
// ];

// const namesOfDays = [
//   '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
//   '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
//   '–í—Ç–æ—Ä–Ω–∏–∫',
//   '–°—Ä–µ–¥–∞',
//   '–ß–µ—Ç–≤–µ—Ä–≥',
//   '–ü—è—Ç–Ω–∏—Ü–∞',
//   '–°—É–±–±–æ—Ç–∞',
// ];

// console.log(namesOfMonth[date.getMonth()]);
// console.log(namesOfDays[date.getDay()]);

//? _________________________________________

// const refs = {
//   box: document.querySelector('.js-box'),
//   timer: document.querySelector('.js-timer'),
// };

// let counter = 11;

// setTimeout(() => {
//   refs.box.style.display = 'block';
//     const id = setInterval(() => {

//       counter -= 1;
//       refs.timer.textContent = counter;

//     if (!counter) {
//         clearInterval(id);
//         refs.box.style.display = 'none'

//         // refs.timer.textContent = 'X'
//         // refs.timer.addEventListener('click', onClick)
//     }
//   }, 1000);

//   return;
// }, 1000);

// function onClick() {
//   refs.box.style.display = 'none';
// }

//? _________________________________________

// const refs = {
//   day: document.querySelector('.date-day'),
//   date: document.querySelector('.date'),
//   month: document.querySelector('.date-month'),
//   year: document.querySelector('.date-year'),
//   digitalClock: document.querySelector('.date-time'),

//   //!____________________________

//   clockHours__arrow: document.querySelector('.clock-hours__arrow'),
//   clockMinutes__arrow: document.querySelector('.clock-minutes__arrow'),
//   clockSeconds__arrow: document.querySelector('.clock-seconds__arrow'),
// };

// const namesOfMonth = [
//   '–Ø–Ω–≤–∞—Ä—å',
//   '–§–µ–≤—Ä–∞–ª—å',
//   '–ú–∞—Ä—Ç',
//   '–ê–ø—Ä–µ–ª—å',
//   '–ú–∞–π',
//   '–ò—é–Ω—å',
//   '–ò—é–ª—å',
//   '–ê–≤–≥—É—Å—Ç',
//   '–°–µ–Ω—Ç—è–±—Ä—å',
//   '–û–∫—Ç—è–±—Ä—å',
//   '–ù–æ—è–±—Ä—å',
//   '–î–µ–∫–∞–±—Ä—å',
// ];

// const namesOfDays = [
//   '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
//   '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
//   '–í—Ç–æ—Ä–Ω–∏–∫',
//   '–°—Ä–µ–¥–∞',
//   '–ß–µ—Ç–≤–µ—Ä–≥',
//   '–ü—è—Ç–Ω–∏—Ü–∞',
//   '–°—É–±–±–æ—Ç–∞',
// ];

// setInterval(() => {
//   const currentDate = new Date();

//   refs.day.textContent = namesOfDays[currentDate.getDay()];
//   refs.date.textContent = currentDate.getDate();
//   refs.month.textContent = namesOfMonth[currentDate.getMonth()];
//   refs.year.textContent = currentDate.getFullYear();
//   const currentTime = {
//     hours: currentDate.getHours().toString().padStart(2, 0),
//     minutes: currentDate.getMinutes().toString().padStart(2, 0),
//     seconds: currentDate.getSeconds().toString().padStart(2, 0),
//   };

//   const clock = {
//     hours: (360 / 12) * currentTime.hours + (360 / 12 / 60) * currentTime.minutes,
//     minutes: (360 / 60) * currentTime.minutes,
//     seconds: (360 / 60) * currentTime.seconds,
//   };

//   // console.log(clock.minutes)
//   const formatTime = `${currentTime.hours}:${currentTime.minutes}:${currentTime.seconds}`;

//   refs.digitalClock.textContent = formatTime;

//   refs.clockSeconds__arrow.style.transform = `rotate(${clock.seconds}deg)`;
//   refs.clockMinutes__arrow.style.transform = `rotate(${clock.minutes}deg)`;
//   refs.clockHours__arrow.style.transform = `rotate(${clock.hours}deg)`;
// }, 1000);

//? _________________________________________
//! CLOCK !

// setInterval(() => {
//   const currentDate = new Date();
//   const targetDate = new Date('2023/11/30');

// refs.digitalClock.textContent = convertMs(targetDate - currentDate);
// }, 1000);

// function convertMs(ms) {
//   // Number of milliseconds per unit of time
//   const second = 1000;
//   const minute = second * 60;
//   const hour = minute * 60;
//   const day = hour * 24;

//   // Remaining days
//   const days = Math.floor(ms / day);
//   // Remaining hours
//   const hours = Math.floor((ms % day) / hour);
//   // Remaining minutes
//   const minutes = Math.floor(((ms % day) % hour) / minute);
//   // Remaining seconds
//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);

//   // return { days, hours, minutes, seconds };

//   return `${days} Day(s) and ${hours.toString().padStart(2, 0)}:${minutes
//     .toString()
//     .padStart(2, 0)}:${seconds.toString().padStart(2, 0)} hrs`;
// }

//!__________________________________________
//? _________________________________________

/*
 *      –ú–∏–∫—Ä–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–µ–º –º–∞–∫—Ä–æ
 *
 *      –ú–∏–∫—Ä–æ –ø—Ä–æ—Ü–µ—Å—Å—ã:
 *          1. Promise
 *          2. Observer
 *
 *      –ú–∞–∫—Ä–æ –ø—Ä–æ—Ü–µ—Å—Å—ã:
 *          1. setTimeout()
 *          2. setInterval()
 *          3. setImmediate()
 *          4. requestAnimationFrame()
 */

// console.log('1');

// setTimeout(() => console.log('2'), 0);

// Promise.resolve('3').then(value => console.log(value))

// console.log('4')

//? _________________________________________

// const promise = new Promise((res, rej) => {
//   setTimeout(() => {
//     const val = Math.random();

//     if (val > 0.2) {
//       res('Yeeees');
//     } else {
//       rej('Noooo');
//     }
//   }, 3000);
// });
// console.log(promise);

// promise
//   .then(value => {
//     return value + ' Yeah';
//   })
//   .then(value => {
//     console.log(value);
//   })
//   .catch(error => {
//     console.error(error);
//   })
//   .finally(() => {
//     console.log('after');
//   });

//? _________________________________________

// const promise = fetch('https://pokeapi.co/api/v2/pokemon/ditto');

// console.log(promise);

// promise
//   .then(resp => resp.json())
//   .then(data => console.log(data))
//   .catch(err => console.error(err))
//   .finally(() => {
//     console.log('good');
//   });

//? _________________________________________

// const refs = {
//   start: document.querySelector('.js-start'),
//   container: document.querySelector('.js-container'),
// };

// refs.start.addEventListener('click', onStart);

//?____

// function onStart() {
//   const result = [];
//   [...refs.container.children].forEach(box => (box.textContent = ''));
//   [...refs.container.children].forEach((box, i) => {
//     createPromise(i)
//       .then(smile => {
//         box.textContent = smile;
//         result.push('1');
//       })
//       .catch(smile => {
//         box.textContent = smile;
//       })
//       .finally(() => {
//         setTimeout(() => {
//           if (i === refs.container.children.length - 1) {
//             if (!result.length || result.length === 3) {
//               alert('WInner');
//             } else {
//               alert('Lost money');
//             }
//           }
//         }, 500);
//       });
//   });
// }

// function createPromise(delay) {
//   return new Promise((res, rej) => {
//     setTimeout(() => {
//       const random = Math.random();

//       if (random > 0.5) {
//         res('ü§ë');
//       } else {
//         rej('üòà');
//       }
//     }, 1000 * delay);
//   });
// }

//?_____

// function onStart() {
//   let counter = 0;

//   [...refs.container.children].forEach(box => (box.textContent = ''));

//   const promises = [...refs.container.children].map((_, i) => createPromise(i));

//   Promise.allSettled(promises).then(items => {
//     items.forEach((item, i) => {
//       setTimeout(() => {
//         if (item.status === 'fulfilled') {
//           counter += 1;
//         }
//         refs.container.children[i].textContent = item.value || item.reason;

//         if (refs.container.children.length - 1 === i) {
//           setTimeout(() => {
//             if (counter === refs.container.children.length || !counter) {
//               alert('Winner!');
//             } else {
//               alert('Lost money');
//             }
//           }, 500);
//         }
//       }, i * 1000);
//     });
//   });
// }

// function createPromise() {
//   return new Promise((res, rej) => {
//     const random = Math.random();
//     if (random > 0.5) {
//       res('ü§ë');
//     } else {
//       rej('üòà');
//     }
//   });
// }

//? _________________________________________

// console.log('Request data...');

// const p = new Promise((res, rej) => {
//   setTimeout(() => {
//     console.log('Prepairing data...');
//     const backendData = {
//       server: 'qwe',
//       port: 2000,
//       status: 'working',
//     };
//     res(backendData);
//   }, 2000);
// });

// p.then(data => {
//   return new Promise((res, rej) => {
//     setTimeout(() => {
//       data.modified = true;
//       res(data);
//       // console.log('Data received', backendData);
//     }, 2000);
//   });
// })
//   .then(clientData => {
//     clientData.fromPromise = true;
//     return clientData;
//   })
//   .then(data => {
//     console.log('Modified data', data);
//   })
//   .catch(err => console.error('Error: ', err))
//   .finally(() => console.log('Finaly'));

//? _________________________________________

// const sleep = ms => new Promise(res => setTimeout(() => res(), ms));

// // sleep(2000).then(() => console.log('after 2 sec'))
// // sleep(3000).then(() => console.log('after 3 sec'))

// Promise.all([sleep(2000), sleep(5000)]).then(() => console.log('All promises'));

// Promise.race([sleep(2000), sleep(5000)]).then(() =>
//   console.log('Race promises')
// );

//? _________________________________________

// const promise = fetch('https://api.sampleapis.com/countries/countries');

// promise
//   .then(data => data.json())
//   .then(countries => countries)
//   .catch(err => console.error(err))

//? _________________________________________

// const coffee = new Promise((res, rej) => {
//   setTimeout(() => {
//       // rej(Error ('Your coffee is ready!'));
//       res('Your coffee is ready!');
//   }, 1500);
// });

// coffee.then(data => console.log(data)).catch(err => console.error(err))

//? _________________________________________

// const family = [
//   { member: 'Mother', id: 111, coffee: 'Latte' },
//   { member: 'Father', id: 222, coffee: 'Espresso' },
//   { member: 'Son', id: 333, coffee: 'Cappuchino' },
// ];

// const getCoffee = member => {
//   const coffeePromise = fetch('https://api.sampleapis.com/coffee/hot');
//   return coffeePromise.then(data =>
//     data.json().then(list => {
//       const coffee = list.find(drink => drink.title === member.coffee);
//       console.log(coffee);
//       return {
//         ...member,
//         coffee,
//       };
//     })
//   );
// };

// const getFamilyMEmber = id => {
//   return new Promise((res, rej) => {
//     setTimeout(() => {
//       const member = family.find(result => result.id === id);
//       if (member) {
//         res(member);
//       } else {
//         rej(Error("This member wasn't found!"));
//       }
//     }, 1500);
//   });
// };

// getFamilyMEmber(111)
//   .then(data => getCoffee(data))
//   .then(newMember => console.log('new member', newMember))
//   .catch(err => console.error(err));

//? _________________________________________

// const makeCoffee = () => {
//   return new Promise((res, rej) => {
//     setTimeout(() => {
//       res('Your coffee is ready!');
//     }, 500);
//   });
// };

// const makeToast = () => {
//   return new Promise((res, rej) => {
//     setTimeout(() => {
//       res('Your toasts are ready!');
//     }, 2500);
//   });
// };

// const coffeePromise = makeCoffee();
// const toastPromise = makeToast();

// // coffeePromise.then(data => console.log(data))
// // toastPromise.then(data => console.log(data));

// Promise.all([coffeePromise, toastPromise]).then(
//   ([coffeePromise, toastPromise]) => console.log(coffeePromise, toastPromise)
// );

//? _________________________________________

// const beers = fetch('https://api.sampleapis.com/beers/ale');
// const wines = fetch('https://api.sampleapis.com/wines/reds');

// Promise.all([beers, wines])
//   .then(data => Promise.all(data.map(result => result.json())))
//   .then(finalData => console.log(finalData))
//   .catch(err => console.error(err));

//? _________________________________________

// function getWeather(city, days) {
//   const API_KEY = 'ea957238804947ab8d842259230712';
//   const BASE_URL = 'https://api.weatherapi.com/v1';
//   const params = new URLSearchParams({
//     key: API_KEY,
//     q: city,
//     days,
//     lang: 'ru',
//   });

//   return fetch(
//     `${BASE_URL}/forecast.json?${params}`
//   ).then(resp => {
//     if (!resp.ok) {
//       throw new Error(resp.status);
//     }

//     return resp.json();
//   });
// }

// const refs = {
//   form: document.querySelector('[action="submit"]'),
//   submitBtn: document.querySelector('[type="submit"]'),
//   jsList: document.querySelector('.js-list'),
// };

// refs.form.addEventListener('submit', onSearch);

// function onSearch(e) {
//   e.preventDefault();

//   const { query, days } = e.currentTarget.elements;

//   getWeather(query.value, days.value)
//     .then(
//       data => (refs.jsList.innerHTML = createMarkup(data.forecast.forecastday))
//     )
//     .catch(err => console.log(err));
// }

// function createMarkup(arr) {
//   return arr
//     .map(
//       ({
//         date,
//         day: {
//           avgtemp_c,
//           condition: { text, icon },
//         },
//       }) =>
//         return `<li>
//             <img src="${icon}" alt="${text}">
//             <p>${text}</p>
//             <h2>${date}</h2>
//             <h3>${avgtemp_c}</h3>
//         </li>`
//     )
//     .join(' ');
// }

//? _________________________________________

// const refs = {
//   BASE_URL: 'https://the-one-api.dev/v2',
//   endpoint_HERO: '/character',
//   API_KEY: 'xeEdJIsN_UjM6SWwSduu',
// };

// function getCharacter() {
//   const param = new URLSearchParams({
//     limit: 30,
//     page: 1,
//   });

//   const options = {
//     method: 'GET',
//     headers: {
//       Authorization: `Bearer ${refs.API_KEY}`
//     }
//   }

//   fetch(`${refs.BASE_URL}${refs.endpoint_HERO}?${param}`, options).then(resp =>
//     console.log(resp)
//   );
// }

// getCharacter()

//? _________________________________________

// const refs = {
//   movieList: document.querySelector('.movie-list'),
//   loadMore: document.querySelector('.js-load'),

//   BASE_URL: 'https://api.themoviedb.org/3/',
//   ENDPOINT: 'trending/movie/day',
//   API_KEY: 'd0f00e3970f1028763a1388502d0f412',
// };

// let options = {
//   root: null,
//   rootMargin: '200px',
//   threshold: 1.0,
// };

// let observer = new IntersectionObserver(callback, options);
// function callback(evt) {
//   console.log(evt);
// }

// const target = document.querySelector('.js-guard');

// let currentPage = 1;

// refs.loadMore.addEventListener('click', onLoad);

// function onLoad(e) {
//   e.preventDefault();
//   currentPage += 1;

//   getTrending(currentPage)
//     .then(data => {
//       refs.movieList.insertAdjacentHTML(
//         'beforeend',
//         createMarkup(data.results)
//       );
//       if (data.page === data.total_pages) {
//         refs.loadMore.hidden = true;
//       }
//     })
//     .catch(err => console.error(err));
// }

// function getTrending(page = 1) {
//   return fetch(
//     `${refs.BASE_URL}${refs.ENDPOINT}?api_key=${refs.API_KEY}&page=${page}`
//   ).then(resp => {
//     if (!resp.ok) {
//       throw new Error(resp.statusText);
//     }

//     return resp.json();
//   });
// }

// getTrending()
//   .then(data => {
//     refs.movieList.insertAdjacentHTML('beforeend', createMarkup(data.results));
//     observer.observe(target);

//     if (data.page !== data.total_pages) {
//       refs.loadMore.hidden = false;
//     }
//   })
//   .catch(err => console.error(err));

// function createMarkup(arr) {
//   return arr
//     .map(
//       ({ poster_path, title, overview }) =>
//         `<li style='list-style: none'>
//         <img src="https://image.tmdb.org/t/p/w500/${poster_path}" alt="${title}" />
//         <h2>${title}</h2>
//         <p>${overview}</p>
//       </li>`
//     )
//     .join(' ');
// }

//? _________________________________________

// let counter = 0;

// const refs = {
//   movieList: document.querySelector('.movie-list'),
//   loadMore: document.querySelector('.js-load'),
//   target: document.querySelector('.js-guard'),

//   BASE_URL: 'https://api.themoviedb.org/3/',
//   ENDPOINT: 'trending/movie/day',
//   API_KEY: 'd0f00e3970f1028763a1388502d0f412',
// };

// let currentPage = 1;
// let options = {
//   root: null,
//   rootMargin: '300px',
//   threshold: 1.0,
// };

// let observer = new IntersectionObserver(onLoad, options);

// function onLoad(entries, observer) {
//   console.log(entries)
//   entries.forEach(entry => {
//     if (entry.isIntersecting) {
//       currentPage += 1;
//       getTrending(currentPage)
//         .then(data => {
//           refs.movieList.insertAdjacentHTML(
//             'beforeend',
//             createMarkup(data.results)
//           );

//           if (data.page === data.total_pages) {
//             observer.unobserve(refs.target);
//           }
//         })
//         .catch(err => console.error(err));
//     }
//   });
// }

// function createMarkup(arr) {
//   return arr
//     .map(
//       ({ poster_path, title, overview }) =>
//         `<li>
//         <img src="https://image.tmdb.org/t/p/w400/${poster_path}" alt="${title}" />
//         <h2>${title}</h2>
//         <p>${overview}</p>
//       </li>`
//     )
//     .join(' ');
// }

// function getTrending(page = 1) {
//   return fetch(
//     `${refs.BASE_URL}${refs.ENDPOINT}?api_key=${refs.API_KEY}&page=${page}`
//   ).then(resp => {
//     if (!resp.ok) {
//       throw new Error(resp.statusText);
//     }

//     return resp.json();
//   });
// }

// getTrending()
//   .then(data => {
//     refs.movieList.insertAdjacentHTML('beforeend', createMarkup(data.results));
//     observer.observe(refs.target);
//   })
//   .catch(err => console.error(err));

//? _________________________________________

/*
 *      axios
 *
 *      CRUD
 *          C - POST
 *          R - GET
 *          U - PUT / PATCH
 *          D -
 */

import axios from 'axios';

//* GET

// fetch('https://jsonplaceholder.typicode.com/posts/1')
//   .then(response => response.json())
//   .then(json => console.log(json));

//* POST

// const options = {
//   method: 'POST',
//   headers: {
//     'Content-type': 'application/json',
//   },
//   body: JSON.stringify({
//     title: 'foo',
//     body: 'bar',
//     userId: 12,
//   }),
// };

// fetch('https://jsonplaceholder.typicode.com/posts', options)
//   .then(resp => {
//     if (!resp.ok) {
//       throw new Error(resp.status);
//     }
//     return resp.json();
//   })
//   .then(data => console.log(data))
//   .catch(err => console.error(err));

// const refs = {
//   addPost: document.querySelector('.js-add'),
//   posts: document.querySelector('.js-posts'),
//   formWrapper: document.querySelector('.js-form'),
//   ERROR: document.querySelector('.js-error'),
// };

// refs.addPost.addEventListener('click', handlerAddPost);

// function handlerAddPost() {
//   refs.formWrapper.innerHTML = `
//     <form action="submit" class='js-form-add' style="display: flex; flex-direction: column">
//         <input type="text" name="title">
//         <textarea name="body" cols="30" rows="10"></textarea>
//         <button>Add post</button>
//     </form>
//     `;

//   const form = document.querySelector('.js-form-add');
//   form.addEventListener('submit', handlerFormSubmit);
// }

// function handlerFormSubmit(e) {
//   e.preventDefault();

//   //!____________________________________________ ---> –≤–∞—Ä–∏–∞–Ω—Ç 1

//   const { title, body } = e.currentTarget.elements;

//   const data = {
//     title: title.value,
//     body: body.value,
//   };

//   //!____________________________________________

//   //!____________________________________________ ---> –≤–∞—Ä–∏–∞–Ω—Ç 2

//   //   const {
//   //     name: { value: title },
//   //     description: { value: body },
//   //   } = e.currentTarget.elements;

//   //     const data = { title, body };

//   //!____________________________________________

//   /*
//         !____________________________________________

//             !---> –≤–∞—Ä–∏–∞–Ω—Ç 3 (–ù–ï –í–°–ï–®–î–ê –†–ê–ë–û–¢–ê–ï–¢) -> –ì–£–ì–õ–ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Æ –î–õ–Ø FormData()

//    */
//   // const data = new FormData(e.currentTarget)
//   // data.forEach(el => console.log(el))

//   //!____________________________________________

//   addPostService(data)
//     .then(obj => {
//       refs.posts.insertAdjacentHTML('beforeend', createPostMarkup(obj));
//     })
//     .catch(() => {
//       refs.ERROR.innerHTML = '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç';
//     })
//     .finally(() => {
//       refs.formWrapper.innerHTML = '';
//       setTimeout(() => {
//         refs.ERROR.innerHTML = '';
//       }, 2000);
//     });
// }

// function createPostMarkup({ id, title, body }) {
//   return `
//     <li data-id="'${id}">
//         <h2>${title}</h2>
//         <p>${body}</p>
//     </li>`;
// }

// function addPostService(data) {
//   const options = {
//     method: 'POST',
//     headers: {
//       'Content-type': 'application/json',
//     },
//     body: JSON.stringify(data),
//   };
//   return fetch('https://jsonplaceholder.typicode.com/posts', options).then(
//     resp => {
//       if (!resp.ok) {
//         throw new Error(resp.status);
//       }
//       return resp.json();
//     }
//   );
// }

//* PUT / PATCH

// const options = {
//   method: 'PUT',
//   body: JSON.stringify({
//     id: 1,
//     title: 'cat',
//   }),
//   headers: {
//     'Content-type': 'application/json',
//   },
// };

// fetch('https://jsonplaceholder.typicode.com/posts/1', options).then(resp =>
//   resp.json()
// ).then(data => console.log(data))

//!____________________________________________

// const options = {
//   method: 'PATCH',
//   body: JSON.stringify({
//     id: 1,
//     title: 'cat',
//     body: 'Hello dear cat',
//   }),
//   headers: {
//     'Content-type': 'application/json',
//   },
// };

// fetch('https://jsonplaceholder.typicode.com/posts/1', options)
//   .then(resp => resp.json())
//   .then(data => console.log(data)).catch(err => console.error(err))

//* DELETE

// const options = {
//   method: 'DELETE',
//   // body: JSON.stringify({
//   //   id: 1,
//   // }),
// };
// fetch('https://jsonplaceholder.typicode.com/posts/1', options)
//   .then(resp => resp.json())
//   .then(data => console.log(data));

//!____________________________________________

/*
 *          async / await
 */

// async function getCapital(countrie) {
//   // !!!! –¢–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ !!!!
//   try {
//     const URL = 'https://restcountries.com/v3.1/name/';
//     const resp = await fetch(`${URL}${countrie}`);
//     if (!resp.ok) {
//       throw new Error(resp.statusText)
//     }

//     const data = await resp.json();
//     console.log(data)
//   } catch (e) {
//     console.log(e);
//   }
// }

// getCapital('canada');

//!____________________________________________

// async function getCapital(countrie) {
//     // !!!! –¢–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ–º –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏ !!!!
//   const URL = 'https://restcountries.com/v3.1/name/';
//   const resp = await fetch(`${URL}${countrie}`);
//   if (!resp.ok) {
//     throw new Error(resp.statusText);
//   }

//   return resp.json();
// }

// getCapital('canada').then(data => console.log(data)).catch(e => console.error(e))

//!____________________________________________

// async function foo() {

// }
// console.log(foo())

//!____________________________________________

// async function getCapital() {
//   const URL = 'https://restcountries.com/v3.1/name/';
//   const arr = ['Canada', 'U4SA', 'Mexico'];

//   const responses = arr.map(async ctr => {
//     const resp = await fetch(`${URL}${ctr}`);
//     if (!resp.ok) {
//       throw new Error('Nott Found!');
//     }
//     return resp.json();
//   });

//   const prom = await Promise.allSettled(responses);
//   return prom;
// }

// getCapital()
//   .then(data => {
//     const res = data.filter(({ status }) => status === 'fulfilled').map(({value}) => value[0])
//     const rej = data.filter(({ status }) => status === 'rejected');
//     console.log(res);
//     console.log(rej);
//   })
//   .catch(e => console.log(e));

//!____________________________________________

// const refs = {
//   form: document.querySelector('.js-form'),
//   addBtn: document.querySelector('.js-add'),
//   list: document.querySelector('.js-list'),
//   container: document.querySelector('.js-form-container'),
//   clearBtn: document.querySelector('.js-clear'),
// };

// refs.addBtn.addEventListener('click', handlerAddInput);
// refs.clearBtn.addEventListener('click', onClear);

// function onClear() {
//   refs.list.innerHTML = '';
// }

// function handlerAddInput() {
//   const markup = '<input type="text" name="country">';
//   refs.container.insertAdjacentHTML('beforeend', markup);
// }

// refs.form.addEventListener('submit', handlerForm);

// function handlerForm(evt) {
//   evt.preventDefault();
//   const data = new FormData(evt.currentTarget);
//   const arr = data
//     .getAll('country')
//     .filter(item => item)
//     .map(item => item.trim());

//   getCountries(arr)
//     .then(async resp => {
//       const capitals = resp.map(({ capital }) => capital[0]);
//       const weatherService = await getWeather(capitals);
//       refs.list.innerHTML = createMarkup(weatherService);
//     })
//     .catch(e => console.log(e))
//     .finally(() => {
//       refs.form.reset();
//       refs.container.innerHTML = '<input type="text" name="country">';
//     });
// }

// async function getCountries(arr) {
//   const resps = arr.map(async item => {
//     const resp = await fetch(`https://restcountries.com/v3.1/name/${item}`);
//     if (!resp.ok) {
//       throw new Error();
//     }
//     return resp.json();
//   });

//   const data = await Promise.allSettled(resps);

//   const countryObj = data
//     .filter(({ status }) => status === 'fulfilled')
//     .map(({ value }) => value[0]);
//   return countryObj;
// }

// async function getWeather(arr) {
//   const API_KEY = 'ea957238804947ab8d842259230712';
//   const BASE_URL = 'https://api.weatherapi.com/v1';

//   const resps = arr.map(async city => {
//     const params = new URLSearchParams({
//       key: API_KEY,
//       q: city,
//       lang: 'ru',
//     });

//     const resp = await fetch(`${BASE_URL}/current.json?${params}`);

//     if (!resp.ok) {
//       throw new Error(resp.status);
//     }
//     return resp.json();
//   });

//   const data = await Promise.allSettled(resps);
//   const objs = data
//     .filter(({ status }) => status === 'fulfilled')
//     .map(({ value }) => value);

//   return objs;
// }

// function createMarkup(arr) {
//   return arr
//     .map(
//       ({
//         current: {
//           temp_c,
//           condition: { text, icon },
//         },
//         location: { country, name },
//       }) => `
//       <li>
//         <div>
//             <h2>${country}</h2>
//             <h3>${name}</h3>
//         </div>
//         <img src="${icon}" alt="${text}">
//         <p>${text}</p>
//         <p>${temp_c}</p>
//       </li>`
//     )
//     .join('');
// }

//!____________________________________________

// import throttle from 'lodash.throttle';
// import debounce from 'lodash.debounce';
// import '../css/localStorage.css';

// console.log(localStorage);

// localStorage.setItem('my-data', JSON.stringify({ name: 'mango', age: 2 }));

// const savedData = localStorage.getItem('my-data');

// console.log(savedData);
// console.log(JSON.parse(savedData));

// const STORAGE_KEY = 'message';
// const formData = {};

// const refs = {
//   form: document.querySelector('.feedback-form'),
//   input: document.querySelector('.feedback-form input'),
//   textArea: document.querySelector('.feedback-form textarea'),
//   formBtn: document.querySelector('button[type="submit"]'),
// };

// populateTextArea()
// updForm();

// refs.form.addEventListener('submit', onSubmit)
// refs.textArea.addEventListener('input', throttle(onInput, 200));

// function onSubmit(e) {
//     e.preventDefault()

//     e.target.reset();
//     localStorage.removeItem(STORAGE_KEY);
// }

// function onInput(e) {
//     const message = e.target.value
//     localStorage.setItem(STORAGE_KEY, message);
// }

// function populateTextArea(e) {
//     const savedMessage = localStorage.getItem(STORAGE_KEY);

//     if (savedMessage) {
//         refs.textArea.value = savedMessage
//     }
// }

// refs.form.addEventListener('input', e => {
//   formData[e.target.name] = e.target.value;
//   console.log(formData);

//   localStorage.setItem('formData', JSON.stringify(formData));
// });

// function updForm(e) {
//   const data = localStorage.getItem('formData');
//   const parsedData = JSON.parse(data);

//   console.log(data);
//   console.log(parsedData);

//   if (data) {
//     refs.input.value = parsedData.name;
//     // refs.textArea.value = parsedData.comments;
//   }
// }

//!____________________________________________
// import Handlebars from 'handlebars';
//!____________________________________________

//!____________________________________________
//!____________________________________________
