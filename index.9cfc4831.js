//! Метод concat()
//! Функции
//! Псевдомассив arguments
//! Преобразование псевдомассива
//! Паттерн «Ранний возврат»
//! Функциональное выражение
//! Стек вызовов
//! Массивы
//! Передача по значению
//! Передача по ссылке
//! Найти самое маленькое число в массиве:
//! Найти самое большое число в массиве:
//! Метод join():
//! Метод concat() :
//! ФУНКЦИИ
//! ___________________________________________
//! Объекты
//! Свойства
document.querySelector(".js-magic__btn");
//! Короткая запись сво-тв:
//! Вычисляемые св-ва
//! Ссылочный тип {} === {}
//! Массивы и функции это объекты
//! Перебор через for...in и Object.keys | values | entries
//!________________________________________
//! Сшиваем несколько массивов в один через concat() и spread
//! Деструктуризация массивов
//! Операция rest (сбор)
//! EXAMPLE
//! CART_____________________
//! CART_____________________
//! CALLBACK
//! Функция doMath(a, b, callback)
//! Отложеный вызов: регистрация событий
//! Отложеный вызов: геолокация
//! Отложеный вызов: интервалы
//! Фильтр
//! ЗАМЫКАНИЕ
//! Поварёнок (пример)
//! Округлятор 🤷‍♂️
//! Приватные данные и функции - скрытие реализации, интерфейс
//! Явный и неявный возврат
//! Псевдомассив arguments
//!_____________
//!_______
//!_______
//!--------------------------------
//! Получаем массив имён всех игроков
//! Увеличиваем кол-во поинтов каждого игрока на 10%
//! Увеличиваем кол-во часов игрока по ID
//! Ищем игрока по ID
//! Ищем игрока по имени
//! Считаем общую зарплату
//! Считаем общее кол-во часов
//! Считаем общую сумму товаров корзины
//! Собираем все тего из твитов
//! Ведем статистику тегов
//! #1
//! #2
//! #3
//! Кастомная сортировка сложных типов
//! По игровому времени
//! Цепочка
//! 💩способ____________
//! Цепочка предыдущих трех
//! isEmpty()
//! Новый синтаксис
//! Счетчик
//!     1. Если функция вызывается через new, создаётся пустой объект
//!     2. Функция вызывается в контексте созданного объекта,
//!         то есть в this записывается ссылка на него
//!     3. В свойство this.__proto__ записывается ссылка на объект Car.prototype
//!         то есть Car.prototype это ПРОТОТИП будущего объекта (экземпляра)
//!     4. Ссылка на объект возвращается в место вызова new Car
//!     1. У каждого объекта есть свойство __proto__
//!     2. В этом свойстве лежит ссылка на его ПРОТОТИ, то есть другой объект
//!     3. При создании литерала объекта, в свойство __proto__ записывается ссылка на Функция.prototype
//!     4. Функция-конструктор это просто функция :)
//!     5. Всю магию делает оператор new
//!     6. Если функция вызывается через new, создаётся пустой объект
//!     7. Функция вызывается в контексте созданного объекта
//!     8. В свойство this.__proto__ записывается ссылка на объект Функция.prototype
//!     9. Ссылка на объект возвращается в место вызова new Функция()
const e={addPost:document.querySelector(".js-add"),posts:document.querySelector(".js-posts"),formWrapper:document.querySelector(".js-form"),ERROR:document.querySelector(".js-error")};function t(t){t.preventDefault();
//!____________________________________________ ---> вариант 1
const{title:n,body:o}=t.currentTarget.elements;
//!____________________________________________
//!____________________________________________ ---> вариант 2
//!____________________________________________
//!____________________________________________
(function(e){const t={method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify(e)};return fetch("https://jsonplaceholder.typicode.com/posts",t).then((e=>{if(!e.ok)throw new Error(e.status);return e.json()}))})({title:n.value,body:o.value}).then((t=>{e.posts.insertAdjacentHTML("beforeend",function({id:e,title:t,body:n}){return`\n    <li data-id="'${e}">\n        <h2>${t}</h2>\n        <p>${n}</p>\n    </li>`}(t))})).catch((()=>{e.ERROR.innerHTML="Невозможно добавить пост"})).finally((()=>{e.formWrapper.innerHTML="",setTimeout((()=>{e.ERROR.innerHTML=""}),2e3)}))}e.addPost.addEventListener("click",(function(){e.formWrapper.innerHTML='\n    <form action="submit" class=\'js-form-add\' style="display: flex; flex-direction: column">\n        <input type="text" name="title">\n        <textarea name="body" cols="30" rows="10"></textarea>\n        <button>Add post</button>\n    </form>\n    ';document.querySelector(".js-form-add").addEventListener("submit",t)}));
//# sourceMappingURL=index.9cfc4831.js.map
