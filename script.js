// const shouldRenew = confirm('Wanna continue subscription?');
// console.log(shouldRenew);

// let quantity = prompt('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: ')
// quantity = Number(quantity);
// console.log(quantity);
// console.log(typeof quantity)

// let elementWidth = '50px';
// const result = Number.parseInt(elementWidth);
// console.log(result);

// let elementHeight = '200.74px';
// elementHeight = Number.parseFloat(elementHeight);
// console.log(elementHeight);

// let salary = 1300.16472;
// salary = Number(salary.toFixed(2));
// // salary = Number(salary);
// // console.log(salary.toFixed());
// console.log(salary);
// console.log(typeof salary);

// console.log(Math.PI.toFixed(2));

// const base = 2;
// const power = 5;

// // const result = Math.pow(base, power)
// console.log(base ** power);

// let base = prompt('–î–∞–≤–∞–π —á–∏—Å–ª–æ');
// base = Number(base);
// console.log(base);

// let power = prompt('–î–∞–≤–∞–π —Å—Ç–µ–ø–µ–Ω—å')

// power = Number(power);
// console.log(power);

// const result = base ** power;
// console.log(result);25

// console.log(parseInt(Math.random() * (50 - 30) + 30));
// console.log(Math.random() * (max - min) + min);

// const max = 50;
// const min = 30;
// const result = Math.round(Math.random() * (max - min) + min);

// console.log(result);

// const colors = ['tomato', 'teal', 'orange', 'deeppink', 'skyblue'];
// const max = colors.length - 1;
// const min = 0;
// const index = Math.round(Math.random() * (max - min) + min);
// const color = colors[index];
// console.log(color);
// document.body.style.backgroundColor = color;

// const firstName = 'Chelsy';
// const lastName = 'Emerald';
// const fullName = `${firstName} ${lastName}`;

// console.log(fullName);

// const room = 716;
// const type = 'VIP';

// // const welcomeMsg = '–ì–æ—Å—Ç—å ' + fullName + ' –ø–æ—Å–µ–ª—è–µ—Ç—Å—è –≤ ' + type + ' –Ω–æ–º–µ—Ä' + room;
// const welcomeMsg = `–ì–æ—Å—Ç—å ${fullName} –ø–æ—Å–µ–ª—è–µ—Ç—Å—è –≤ ${type} –Ω–æ–º–µ—Ä ${room}`;

// console.log(welcomeMsg);

// const brand = 'Samsung';
// const normalizedBrand = brand.toLowerCase();

// let brand = 'Samsung';
// brand = brand.toLowerCase();
// console.log(brand);

// let brand = 'samSUnG';
// console.log(brand[4]);
// console.log(brand.slice(1).toLowerCase());

// brand = brand[0] + brand.slice(1).toLowerCase();
// console.log(brand);

// const blacklistedWorld1 = '—Å–ø–∞–º';
// const blacklistedWorld2 = '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞';

// const string1 = '–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–∏–Ω—Ü –ê–±–¥—É–ª, —ç—Ç–æ –Ω–µ —Å–ø–∞–º, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –º–∏–ª–ª–∏–æ–Ω!';
// const string2 = '–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –†–ê–°–ü–†–û–î–ê–ñ–ê —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!';
// const string3 = '–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è #fatlivesmatter';

// console.log(string1.toLowerCase().includes(blacklistedWorld1, blacklistedWorld2));
// console.log(string2.toLowerCase().includes(blacklistedWorld2, blacklistedWorld2));
// console.log(string3.toLowerCase().includes(blacklistedWorld2, blacklistedWorld2));

// console.log(4 && 'hello');
// console.log(false || 0 || null || 5 || 10);
// console.log(!true);

// const x1 = 10;
// const x2 = 30;
// const number = 50;
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1}?`, number < x1);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –ø–æ—Å–ª–µ ${x2}?`, number > x2);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –æ—Ç ${x1} –¥–æ ${x2}?`, number > x1 && number < x2);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1} –∏–ª–∏ –ø–æ—Å–ª–µ ${x2}?`, number < x1 || number > x2);

// const isOnline = true;
// const isFriend = true;
// const isDnd = false;

// const canOpenChat = isOnline && isFriend && !isDnd;
// console.log('–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç?', canOpenChat);

// const sub = 'pro';
// const canAccesContent = sub === 'pro' || sub === 'vip';
// console.log('–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É?', canAccesContent);

// if (5 > 30) {
//     console.log('qweqwe');
// }

// if (5 > 30) {
//     console.log('x > y');
// } else {
//     console.log('x < y');
// }

// const salary = 1500;

// if (salary <= 500) {
//     console.log('Level 1')
// } else if(salary > 500 && salary <= 1500) {
//     console.log('Level 2')
// } else if (salary > 1500 && salary <= 3000) {
//     console.log('Level 3');
// } else {
//     console.log('Level 4');
// }

// const balance = 1000;
// // let message;

// // if (balance > 0) {
// //     message = '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å';
// // } else {
// //     message = '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å';
// // }

// // console.log(message);

// const message = balance > 0 ? '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å' : '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å';
// console.log(message);

// const b = 10;

// if (true) {
//     console.log(b)

//     var a = 5;
// }

// console.log(a);

// const stars = 1;
// let price;

// if (stars === 1) {
//     price = 20;
// } else if (stars === 2) {
//     price = 30;
// } else if (stars === 3) {
//     price = 50;
// } else if (stars === 4) {
//     price = 70;
// } else if (stars === 5) {
//     price = 120;
// } else {
//     console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// switch (stars) {
//     case 1:
//         price = 20;
//         break;

//     case 2:
//         price = 30;
//         break;

//     case 3:
//         price = 50;
//         break;

//     case 4:
//         price = 70;
//         break;

//     case 5:
//         price = 120;
//         break;

//     default:
//         console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// console.log(price);

// const stars = 1;
// let price;

// if (stars === 1 || stars === 2) {
//     price = 20;
// } else if (stars === 3 || stars === 4) {
//     price = 30;
// } else if (stars === 5) {
//     price = 120;
// } else {
//     console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// switch (stars) {
//     case 1:
//     case 2:
//         price = 20;
//         break;

//     case 3:
//     case 4:
//         price = 30;
//         break;

//     case 5:
//         price = 120;
//         break;

//     default:
//         console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// console.log(price);

// const options = 1;
// let message;

// switch (options) {
//     case 1:
//         message = '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–≤—Ç—Ä–∞ —Å 12:00 –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ';
//         break;

//     case 2:
//         message = '–ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –∑–∞–∫–∞–∑ –∑–∞–≤—Ç—Ä–∞ —Å 9:00 –¥–æ 18:00';
//         break;

//     case 3:
//         message = '–ü–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
//         break;

//     default:
//         message = '–í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä';
// }

// console.log(message);

// for (let i = 0; i <= 10; i += 1) {
//     console.log(i);
// }

// console.log();

// for (let i = 0; i <= 10; i++) {
//     console.log(i);
// }

// let a = 10;
// const b = a++;

// console.log(a)
// console.log(b);

// const minSalary = 500;
// const maxSalary = 5000;
// const employees = 3;
// let totalSalary = 0;

// for (let i = 1; i <= employees; i += 1) {
//     const salary = Math.round(Math.random() * (maxSalary - minSalary) + minSalary);
//     console.log(`–ó–ü —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–æ–º–µ—Ä ${i} - ${salary}`);

//     totalSalary += salary;

// }
//     console.log('totalSalary: ', totalSalary);

// const min = 0;
// const max = 10;
// let total = 0;

// for (let i = min; i <= max; i += 1) {
//     console.log(i);
//     if (i % 2 === 0) {
//         console.log('–ß–µ—Ç–Ω–æ–µ: ', i);
//         total += i;
//     }
// }

// console.log('total: ', total);

// let balance = 10000;
// const payment = 2000;

// console.log(
//     `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ${payment} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É`
// );

// if (balance >= payment) {
//     console.log('ok');
//     balance -= payment;

//     console.log(`–ù–∞ —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å ${balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
// } else {
//     console.log('–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏!');
// }
// console.log('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

// üçé
// üçí

// const apple = 'üçé';
// const appleQuantity = 8;
// const applePrice = 34;
// const appleMessage = `–£ –Ω–∞—Å –µ—Å—Ç—å ${appleQuantity} ${apple}, cost: ${applePrice * appleQuantity}`;
// console.log(appleMessage);

// const cherry = 'üçí';
// const cherryQuantity = 3;
// const cherryPrice = 72;
// const cherryMessage = `–£ –Ω–∞—Å –µ—Å—Ç—å ${cherryQuantity} ${cherry}, cost: ${cherryPrice * cherryQuantity}`;
// console.log(cherryMessage);

// const totalMinutes = 1441;
// const hrs = Math.floor(totalMinutes / 60);
// const mins = totalMinutes % 60;

// const result = `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
// console.log(result);

// const incomingValue = 0;
// const defaultValue = 10;
// const value = incomingValue ?? defaultValue;
// console.log(value);

// const value = 10;

// if (value === 10) {
//     console.log('value is 10!!');
// }

// if (value === 10) {
//      console.log('value is 10!!');
// } else {
// console.log("value is't 10!");
// }

// const value = 10;

// if (value === 1) {
//     console.log('1');
// } else if (value >= 10 && value <= 20) {
//     console.log('2!');
// } else {
//     console.log('3');
// }

// const value = 4;

// switch (value) {
//     case 1:
//         console.log(1);
//         break;

//     case 2:
//         console.log(2);
//         break;

//     case 3:
//         console.log(3);
//         break;

//     case 4:
//         console.log(4);
//         break;

//     default:
//         console.log('default');
//         break;
// }

// const age = 25;
// let msg = age >= 18 && age <= 30 ? '–í—ã –¥–æ–ø—É—â–µ–Ω—ã!' : '–í—ã –Ω–µ –¥–æ–ø—É—â–µ–Ω—ã!';

// console.log(msg);

// let number = 10;

// if (true) {
//     let number = 20;
//     if (true) {
//         number = 30;
//     }
// }

// console.log(number);

// for (let i = 1; i <= 10; i += 1) {
//     // if (i === 5) {
//     //     continue;
//     //     // break;
//     // }
//     // if (i === 8) {
//     //     continue;
//     // }

//     // if (i % 2 === 0) {
//     //     console.log(i);
//     // }
// }

// const PASSWORD = '12345';
// let userPassword = prompt('Enter a password');

// // if (PASSWORD === userPassword) {
// //     alert('Welcome')
// // } else {
// //     alert('Wrong password')
// // }

// while (PASSWORD !== userPassword) {
//     userPassword = prompt('Wrong password! Try again!!!');
// }
// alert('Welcome');

// let i = 0;

// do {
//     console.log(i);
//     i += 1;
// } while (i <= 10);

// const message = prompt('Enter color').toLowerCase();
// // const color = Number(message);
// let action;

// switch (message) {
//     case 'red':
//         action = 'STOP';
//         break;

//     case 'yellow':
//         action = 'Ready';
//         break;
//         action = '';

//     case 'green':
//         action = 'Go';
//         break;

//     default:
//         action = 'Be careful';
//         break;
// }

// console.log(action);

// function check(question, answer) {
//     console.log(question, answer);
//     const userAnswer = prompt(question).toLowerCase();
//     return userAnswer === answer;
// }

// console.log(check('–•–æ—Ç—è –Ω–µ —Å–∞–º–æ–ª–µ—Ç, –∞ –∫—Ä—ã–ª–∞—Ç—ã–π, –±–µ–∑ –∫—Ä—ã–ª—å–µ–≤ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!', '–≤–µ—Ç—Ä—è–∫'));

// console.log(check('–ß–µ—Ä–µ–∑ –≤–æ–¥—É –æ–Ω –ø—Ä–æ–≤–æ–¥–∏—Ç, –∞ —Å–∞–º —Å –º–µ—Å—Ç–∞ –≤–µ–∫ –Ω–µ —Å—Ö–æ–¥–∏—Ç!', '–º–æ—Å—Ç'));

// console.log('1' != 1);

// console.log('P'.charCodeAt());
// console.log('a'.charCodeAt());

// const quantity = Number(prompt('text your variant'));22
// console.log(quantity);
// console.log(typeof quantity);

//? ___________________________________________

// let elementWidth = '50px';

// elementWidth = Number.parseInt(elementWidth);
// console.log('element Width', elementWidth);

// let elementHeight = '200.74px';

// elementHeight = Number.parseFloat(elementHeight);
// console.log('element Height', elementHeight);

// let salary = 1300.16472;
// salary = Number(salary.toFixed(2));

// console.log(salary);

//? ___________________________________________

// const base = 2;
// const power = 5;

// const result = Math.pow(base, power);
// console.log(result);
// console.log(base ** power);

//? ___________________________________________

// const base = Number(prompt('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: '));
// console.log(base)
// const power = Number(prompt('–í–≤–µ–¥–∏ —Å—Ç–µ–ø–µ–Ω—å: '));
// console.log(power);

// console.log(base ** power);

//? ___________________________________________

// const colors = ['tomato', 'teal', 'orange', 'deeppink', 'skyblue', 'green'];
// const max = colors.length - 1;
// const min = 0;

// const index = Math.round(Math.random() * (max - min) + min);
// const color = colors[index];
// console.log(color);

// document.body.style.backgroundColor = color;

//? ___________________________________________

// let brand = prompt('Text brand:')
// brand = brand[0].toUpperCase() + brand.slice(1).toLowerCase()
// console.log(brand)

//? ___________________________________________

// const x1 = 10;
// const x2 = 30;

// const number = 50;

// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1}`, number < x1);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –ø–æ—Å–ª–µ ${x2}`, number > x2);
// console.log(`–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –æ—Ç ${x1} –¥–æ ${x2}`, number > x1 && number < x2);
// console.log(
//     `–ß–∏—Å–ª–æ ${number} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Ä–µ–∑–æ–∫ –¥–æ ${x1} –∏–ª–∏ –ø–æ—Å–ª–µ ${x2}`,
//     number < x1 || number > x2
// );

// //? ___________________________________________

// const isOnline = true;
// const isFriend = true;
// const isDnd = false;

// const canOpenChat = isOnline && isFriend && !isDnd;

// console.log('–ú–æ–∂–µ–æ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç? ', canOpenChat);

// //? ___________________________________________

// const sub = 'vip';
// console.log(sub);

// const canAccesContent = sub.toLowerCase() === 'pro' || sub.toLowerCase() === 'vip';
// console.log('–ï—Å—Ç—å –¥–æ—Å—Ç—É–ø?', canAccesContent);

// //? ___________________________________________

// const balance = 1000
// let message

//? ___________________________________________

// const balance = 1000;

// const message = balance >= 0 ? '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å' : '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å'; //! –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä

// /* –û–Ω –∑–∞–º–µ–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫—É if -> else

//     if (balance >= 0) {
//     message = '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å'
//     } else {
//     message = '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å'
//     }

// */
// console.log(message);

//? ___________________________________________

// const stars = 1;
// let price;

// switch (stars) {
//     case 1:
//     case 2:
//         price = 20;
//         break;

//     case 3:
//     case 4:
//         price = 30;
//         break;

//     case 5:
//         price = 120;
//         break;

//     default:
//         console.log('–¢–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥ –Ω–µ—Ç');
// }

// console.log(price);

//? ___________________________________________

// const option = 1;
// let message = ' ';

// switch (option) {
//     case 1:
//         message = '–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–≤—Ç—Ä–∞ —Å 12:00 –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ';
//         break;

//     case 2:
//         message = '–ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –∑–∞–∫–∞–∑ –∑–∞–≤—Ç—Ä–∞ —Å 9:00 –¥–æ 18:00';
//         break;

//     case 3:
//         message = '–ü–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
//         break;
//     default:
//         message = '–í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä';
// }

// console.log(message);

//? ___________________________________________

// for (let i = 0; i <= 10; i += 1) {
//     console.log(i)
// }
// console.log('qweqwe')

//? ___________________________________________

// const minSalary = 500;
// const maxSalary = 5000;

// const employees = 6;
// let totalSalary = 0;

// for (let i = 1; i <= employees; i += 1) {
//     const salary = Math.round(Math.random() * (maxSalary - minSalary) + minSalary);
//     console.log(`–ó–ü –†–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–æ–º–µ—Ä ${i} - `, salary);
//     totalSalary += salary;
// }

// console.log('totalSalary: ', totalSalary);

//? ___________________________________________

// const min = 0;
// const max = 7;
// let total = 0;

// for (let i = min; i <= max; i += 1) {

//     if (i % 2 !== 0) {
//         console.log('–ù–µ —á–µ—Ç–Ω–æ–µ: ', i)
//         continue
//     }

//     console.log('–ß–µ—Ç–Ω–æ–µ: ', i);
//     total += i;
// }

// console.log(total);

//? ___________________________________________

// let balance = 10000;
// const payment = 2000;

// console.log(
//     `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ${payment} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É`
// );

// if (payment <= balance) {
//     balance -= payment;
//     console.log('–í—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏...   –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!');
//     console.log(`–ù–∞ —Å—á–µ—Ç—É –æ—Å—Ç–∞–ª–æ—Å—å ${balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
// } else {
//     console.log('–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
// }

// console.log('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

//? ___________________________________________

// let totalSpent = 2000;
// let payment = 500;
// let discount = 0;

/*

    –ï–©–ï –û–î–ò–ù –í–ê–†–ò–ê–ù–¢ –†–ï–®–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò

if (totalSpent < 100) {
    console.log('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏');
} else if (totalSpent >= 100 && totalSpent <= 1000) {
    console.log('–ë—Ä–æ–Ω–∑–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 2%');
    discount = 0.02;
} else if (totalSpent >= 1000 && totalSpent <= 5000) {
    console.log('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 5%');
    discount = 0.05;
} else {
    console.log('–ó–æ–ª–æ—Ç–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 10%');
    discount = 0.1;
}

*/

// if (totalSpent >= 100 && totalSpent <= 1000) {
//     console.log('–ë—Ä–æ–Ω–∑–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 2%');
//     discount = 0.02;
// } else if (totalSpent >= 1000 && totalSpent <= 5000) {
//     console.log('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 5%');
//     discount = 0.05;
// } else if (totalSpent >= 5000) {
//     console.log('–ó–æ–ª–æ—Ç–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä, —Å–∫–∏–¥–∫–∞ 10%');
//     discount = 0.1;
// } else {
//     console.log('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏');
// }

// console.log(`–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${payment} —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount * 100}%`);
// console.log(payment);

// payment -= payment * discount
// totalSpent += payment;

// console.log(`–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${totalSpent}`);

//? ___________________________________________

// const btnAdd = document.querySelector('button[data-add]');
// const btnReset = document.querySelector('button[data-reset]');
// const valueInput = document.querySelector('input[data-value]');
// const outputEl = document.querySelector('.js-output span');

// console.log(outputEl);

// console.log(btnAdd);
// console.log(valueInput);

// let total = 0;

// console.dir(btnAdd);
// console.dir(btnAdd.textContent);
// btnAdd.textContent = 'qweqwe'

// btnAdd.addEventListener('click', function () {
//     console.log('click hehehe');

//     const value = Number(valueInput.value);

//     console.log(typeof value, value);

//     total += value;

//     // outputEl.textContent = `–°—É–º–º–∞: ${total}`;
//     outputEl.textContent = total;
//     valueInput.value = '';
// });

// btnReset.addEventListener('click', function () {
//     total = 0
//     outputEl.textContent = total;
// });

/*  //!–ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏
//*      btnAdd.addEventListener('click', () => {
//*          console.log('click hehehe');
//*      })
*/

//? ___________________________________________

// function makeTransaction(pricePerDroid, orderedQuantity, customerCredits) {
//     let message;
//     const totalPrice = pricePerDroid * orderedQuantity;
//     // Change code below this line
//     if (totalPrice > customerCredits) {
//         message = 'Insufficient funds!';
//         console.log(message);
//     } else {
//         customerCredits -= totalPrice;
//         message = `You ordered ${orderedQuantity} droids, you have ${customerCredits} credits left`;
//         console.log(message);
//     }
//     // Change code above this line
//     return message;
// }

// makeTransaction(3000, 5, 23000);

//? ___________________________________________

// const clients = ['Mango', 'Poly', 'Ajax', 'Alex'];

// console.log(clients);

// clients[0] = 'Pablo'
// clients[1] = 'Escobar'
// console.log(clients);

// console.log(clients.length);

// const lastElementIndex = clients.length - 1
// console.log(lastElementIndex);
// console.log(clients[lastElementIndex]);
//? ___________________________________________
// for (let i = 0; i < clients.length; i += 1) {
//     console.log(clients[i]);
// }

// for (const client of clients) {
//     console.log(client);
// }

// const string = 'JavaScript'

// for (const charecter of string) {
//     console.log(charecter);
// }
//? ___________________________________________
// const clientNameToFind = 'Poly'
// let message = '–ö–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!';

// for (const client of clients) {
//     if (client === clientNameToFind) {
//         message = '–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
//         break
//     }
//     // message = '–ö–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!';    //* –ò–ª–∏ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ü—ã–∫–ª–∞ for
// }

// console.log(message);
//? ___________________________________________
// const numbers = [1, 3, 14, 18, 4, 7, 29, 6, 34];
// const threshold = 15;

// for (let i = 0; i < numbers.length; i += 1) {
//     if (numbers[i] < threshold) {
//         continue;
//     }

//     console.log(`–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º ${threshold}: ${numbers[i]}`);
// }
//? ___________________________________________

// const a = ['Mango']
// const b = a

// console.log(a);
// console.log(b);

// a.push('Poly')
// console.log(a);
// console.log(b);

// a.push('Ajax')
// console.log(a);
// console.log(b);

//? ___________________________________________

// const name = 'Mango'
// console.log((name.split('')));

// const message = 'JavaScript —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ';
// console.log(message.split(' '));

// const words = ['JavaScript', '—ç—Ç–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'];

// console.log(words.join(''));
// console.log(words.join(' '));
// console.log(words.join('-'));

//? ___________________________________________

// const clients = ['Mango', 'Ajax', 'Poly', 'Kiwi'];

// console.log(clients.indexOf('Poly'));
// console.log(clients.indexOf('Monkong'));

// console.log(clients.includes('Poly'));
// console.log(clients.includes('Monkong'));

//? ___________________________________________

// const redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];
// const fruit = 'cherry';

// const hasFruit = redFruits.includes(fruit);

// if (hasFruit) {
//     console.log(`${fruit} is a red fruit`);
// }

//? ___________________________________________

// const numbers = []

// numbers.push(1)
// console.log(numbers)

// numbers.push(2);
// console.log(numbers);

// numbers.push(3);
// console.log(numbers);

// numbers.push(4);
// console.log(numbers);

// numbers.push(5);
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

// console.log(numbers.pop());
// console.log(numbers);

//? ___________________________________________

// const clients = ['Mango', 'Ajax', 'Poly', 'Kiwi'];
// console.log(clients.slice(1, 3));
// console.log(clients.slice());
// console.log(clients.slice(1));
// console.log(clients.slice(2));

//? ___________________________________________

// const scores = [1, 2, 3, 4, 5];

// const deletedScores = scores.splice(0, 3)

// console.log(scores);
// console.log(deletedScores);

//? ___________________________________________

// const colors = ['red', 'green', 'blue'];

// colors.splice(2, 0, 'purple');
// console.log(colors);
// colors.splice(1, 0, 'yellow', 'pink');
// console.log(colors);

//? ___________________________________________

// const languages = ['C', 'C++', 'Java', 'JavaScript'];
// console.log(languages);

// languages.splice(1, 1, 'Python')
// console.log(languages);

// languages.splice(2, 1, 'C#', 'Swift', 'Go')
// console.log(languages);

//? ___________________________________________
//! –ú–µ—Ç–æ–¥ concat()

// const oldClients = ['Mango', 'Ajax', 'Poly', 'Kiwi'];
// const newClients = ['Monkong', 'Singu'];

// const allClientsWithOldFirst = oldClients.concat(newClients)
// console.log(allClientsWithOldFirst);

// const allClientsWithNewFirst = newClients.concat(oldClients)
// console.log(allClientsWithNewFirst);

// console.log(oldClients);
// console.log(newClients);

//? ___________________________________________
//! –§—É–Ω–∫—Ü–∏–∏

// function multiply(x, y, z) {
//     console.log('–ö–æ–¥ –¥–æ return –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ');

//     return x * y * z;

//     console.log('–≠—Ç–æ—Ç –ª–æ–≥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –æ–Ω —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ return');
// }

// let result = multiply(2, 3, 5);
// console.log(result)

// function multiply(x, y, z) {
//     console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${x * y * z}`);
// }

// console.log('–õ–æ–≥ –¥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ multiply');
// multiply(2, 3, 5); // –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω 30
// console.log('–õ–æ–≥ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ multiply');

// function count(countFrom = 0, countTo = 10, step = 1) {
//   console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);

//   for (let i = countFrom; i <= countTo; i += step) {
//     console.log(i);
//   }
// }

// count(1, 5); // countFrom = 1, countTo = 5, step = 1
// count(2); // countFrom = 2, countTo = 10, step = 1
// count(); // countFrom = 0, countTo = 10, step = 1
// count(3, 6)

//? ___________________________________________
//! –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ arguments

// function multiply() {
//   let total = 1;

//   for (const argument of arguments) {
//     total *= argument;
//   }

//   return total;
// }

// console.log(multiply(1, 2, 3)); //  6
// console.log(multiply(1, 2, 3, 4)); //  24
// console.log(multiply(1, 2, 3, 4, 5)); //  120
// console.log(multiply(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));

//? ___________________________________________
//! –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–∞

// function fn() {
//     const args = Array.from(arguments);
// }

// function fn(...args) {
//     console.log(args);
// }

// fn(1, 2, 3, 4, 'text')

// console.log(fn);

//? ___________________________________________
//! –ü–∞—Ç—Ç–µ—Ä–Ω ¬´–†–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç¬ª
//* –í–æ—Ç —ç—Ç–æ:

// function withdraw(amount, balance) {
//     if (amount === 0) {
//         console.log('–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è');
//     } else if (amount > balance) {
//         console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É');
//     } else {
//         console.log('–û–ø–µ—Ä–∞—Ü–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
//     }
// }

// withdraw(0, 300);
// withdraw(500, 300);
// withdraw(100, 300);

//*–ú–æ–∂–Ω–æ –∑–ø–º–µ–Ω–∏—Ç—å –≤–æ—Ç —ç—Ç–∏–º:

// function withdraw(amount, balance) {
//     if (amount === 0) {
//         console.log('–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ –Ω—É–ª—è');
//         return;
//     }

//     if (amount > balance) {
//         console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É');
//         return;
//     }

//     console.log(`–û–ø–µ—Ä–∞—Ü–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞: -${amount}, —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: ${balance - amount} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
// }

// withdraw(0, 300);
// withdraw(500, 300);
// withdraw(100, 300);
// withdraw(155, 200)
// withdraw(200, 200);

//? ___________________________________________
//! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ

//* –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (function declaration):
// function multiply(x, y, z) {
//     console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${x * y * z}`);
// }

// multiply(2, 5, 6)

//* –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (function expression):
// const multiply = function (x, y, z) {
//     console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${x * y * z}`);
// }

// multiply(5, 6, 10)

//? ___________________________________________
//! –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤

// function fnA() {
//     console.log("–õ–æ–≥ –≤–Ω—É—Ä—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fnA –¥–æ –≤—ã–∑–æ–≤–∞ fnB");
//     fnB()
//      console.log("–õ–æ–≥ –≤–Ω—É—Ä—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fnA –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ fnB");
// }

// function fnB() {
//     console.log("–õ–æ–≥ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ fnB");
// }

// console.log("–õ–æ–≥ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º fnA");
// fnA();
// console.log("–õ–æ–≥ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ fnA");

//? ___________________________________________

// function bar() {
//     console.log('bar');
// }

// function baz() {
//     console.log('baz');
// }

// function foo() {
//     console.log('foo');
//     bar();
//     baz();
// }

// foo();

//? ___________________________________________
//! –ú–∞—Å—Å–∏–≤—ã

// const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax']
// console.table(friends)
// // console.log(friends.length);
// console.log(friends[2]);

// friends[1] = 'qweqwe'
// friends[4] = 'qweqweqwe'
// console.table(friends);

// const lastIndex = friends.length - 1
// console.log(lastIndex);

//? ___________________________________________
//! –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é

// let a = 10
// let b = a

// console.log(a);
// console.log(b);

// a = 20

// console.log(a);
// console.log(b);

//! –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ —Å—Å—ã–ª–∫–µ

// const a = [1, 2, 3]
// const b = a

// console.log('a', a);
// console.log('b', b);

// a[0] = 500

// console.log('a', a);
// console.log('b', b);
// console.log(a === b); // true

// console.log([1, 2, 3] === [1, 2, 3]); // false

//? –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞:

// const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax']
// // console.table(friends);

// for (let i = 0; i < friends.length; i += 1) {
//     // console.log(friends[i]);
//     friends[i] += `-${i + 1}`
// }

// for (const friend of friends) {
//     console.log(friend);
// }

// console.table(friends);

//? ___________________________________________

// const cart = [54, 28, 105, 70, 92, 17, 120];
// let total = 0;

// // for (let i = 0; i < cart.length; i += 1) {
// //     console.log(cart[i]);

// //     total += cart[i]
// // }
// //* –ó–∞–¥–∞—á–∫–∞ –±–µ–∑ –Ω–∞–ª–æ–≥–∞:
// // for (const value of cart) {
// //     total += value
// // }

// //* –ó–∞–¥–∞—á–∫–∞ + —Ç–∞–∫—Å:
// for (let i = 0; i < cart.length; i += 1) {
//     // cart[i] = Math.round(cart[i] * 1.05)
//     cart[i] *= 1.05

//     total += cart[i]
// }

// console.log('Total $:', total.toFixed(2));

//? ___________________________________________

// const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
// let total = 0;

// // for (let i = 0; i < numbers.length; i += 1) {
// //     // console.log(numbers[i]);
// //     if (numbers[i] % 2 === 0) {
// //         console.log('–ß–µ—Ç–Ω–æ–µ');

// //         total += numbers[i]
// //     }
// // }

// for (const number of numbers) {
//     if (number % 2 === 0) {
//         console.log(`${number} - —á–µ—Ç–Ω–æ–µ`);
//         total += number;
//     }
// }
// //* –õ–æ–≥–∏–∫–∞ –æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ:
// // for (const number of numbers) {
// //     if (number % 2 !== 0) {
// //         console.log(`${number} - –Ω–µ—á–µ—Ç–Ω–æ–µ`);
// //         continue;
// //     }

// //     total += number;
// //     console.log(`${number} - —á–µ—Ç–Ω–æ–µ`);
// // }

// console.log('Total:', total);

//? ___________________________________________

// const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n'];
// const loginToFind = 'poly1scute';
// let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

// for (let i = 0; i < logins.length; i += 1) {
//     if (logins[i] === loginToFind) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//         break;
//     }
// }

// console.log(message);

//* ___________________________________________

// for (const login of logins) {
//     if (login === loginToFind) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//         break;
//     }
// }

// console.log(message);

//* ___________________________________________

// const message = logins.includes(loginToFind)
//     ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`
//     : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

// console.log(message);

//? ___________________________________________
//! –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ:

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0]

// for (const number of numbers) {

//     if (smallestNumber > number) {
//         smallestNumber = number
//     }
// }

// console.log(smallestNumber);

//! –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ:

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0];

// for (const number of numbers) {
//     if (smallestNumber < number) {
//         smallestNumber = number;
//     }
// }

// console.log(smallestNumber);

//? ___________________________________________
//! –ú–µ—Ç–æ–¥ join():

// const friends = ['Mango', 'Poly', 'Kiwi', 'Ajax'];
// // let string = '';

// // for (const friend of friends) {
// //     string += friend + ','
// // }
// // string = string.slice(0, string.length - 1);

// const string = friends.join(', ')
// console.log(string);

//? ___________________________________________

// const string = 'JavaScript';
// const letters = string.split('');
// let invertedString = '';

// console.log(letters);

// for (const letter of letters) {
//     console.log(letter);

//     // if (letter === letter.toLowerCase()) {
//     //     invertedString += letter.toUpperCase()
//     // } else {
//     //     invertedString += letter.toLowerCase()
//     // }

//     invertedString += letter === letter.toLowerCase() ? letter.toUpperCase() : letter.toLowerCase();
// }

// console.log('invertedString:', invertedString);

//? ___________________________________________

// const title = 'Top 10 benefits of React framework';

// //* –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥:

// // const normalizedTitle = title.toLowerCase()
// // console.log(normalizedTitle.split(' ').join('-'));

// //*–¶–µ–ø–æ—á–∫–∞ –≤—ã–∑–æ–≤–∞:

// const slug = title.toLowerCase().split(' ').join('-')

// console.log(slug);

//? ___________________________________________
//! –ú–µ—Ç–æ–¥ concat() :

// const array1 = [5, 10, 15, 20];
// const array2 = [10, 20, 30];

// //* –°—à–∏—Ç–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤:
// const numbers = array1.concat(array2)

// let total = 0

// for (const number of numbers) {
//     total += number
// }

// console.log(total);

//? ___________________________________________

// const cards = ['–ö–∞—Ä—Ç–æ—á–∫–∞-1', '–ö–∞—Ä—Ç–æ—á–∫–∞-2', '–ö–∞—Ä—Ç–æ—á–∫–∞-3', '–ö–∞—Ä—Ç–æ—á–∫–∞-4', '–ö–∞—Ä—Ç–æ—á–∫–∞-5'];
// console.table(cards);

// //* –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É), –º–µ—Ç–æ–¥ (indexOf):

// const cardToRemove = '–ö–∞—Ä—Ç–æ—á–∫–∞-3';
// const index = cards.indexOf(cardToRemove);

// // console.log(cards.splice(index, 1)); // ['–ö–∞—Ä—Ç–æ—á–∫–∞-3'] - —É–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
// cards.splice(index, 1)
// console.log(index);

// console.table(cards);
// console.log(cards);

//* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É):

// const cardToInsert = '–ö–∞—Ä—Ç–æ—á–∫–∞-6';
// const index = 3;

// cards.splice(index, 0, cardToInsert);

// console.table(cards);

//* –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É):

// const cardToUpdate = 'NEW –ö–∞—Ä—Ç–æ—á–∫–∞-4';
// const index = 3;

// cards.splice(index, 1, cardToUpdate);

// console.table(cards);

//? ___________________________________________
//! –§–£–ù–ö–¶–ò–ò
//? ___________________________________________

// const add = function (x, y) {
//     return x + y;
// };

// const r1 = add(2, 6);
// console.log('r1:', r1);
// const r2 = add(5, 10);
// console.log('r2:', r2);

//? ___________________________________________

// const fn = function (value) {
//     if (value < 50) {
//         return '–ú–µ–Ω—å—à–µ —á–µ–º 50';
//     }
//     return '–ë–æ–ª—å—à–µ —á–µ–º 50';
// };

// console.log('Result:', fn(48));
// console.log('Result:', fn(482));

//? ___________________________________________
/* 
    //*!    * - –°—Ç—ç–∫ –≤—ã–∑–æ–≤–æ–≤
    //*!    * - Stack trace –∏ –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
*/

// const fnA = function () {
//     console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è A');
// fnB();

// }

// const fnB = function () {
//     console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è B');
// fnC();

// };

// const fnC = function () {
//     console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è C');
//     console.log(value);
// };

// fnA()
// fnB()
// fnC()

//? ___________________________________________

// const calculateTotalPrice = function (items) {
//     console.log(items);

//     let total = 0;

//     for (const item of items) {
//         total += item;
//     }
//     return total;
// };

// console.log(calculateTotalPrice([1, 2, 3]));
// console.log(calculateTotalPrice([5, 10, 15, 20]));
// console.log(calculateTotalPrice([100, 200, 300]));

//? ___________________________________________

// const logItems = function (items) {
//     for (const item of items) {
//         console.log(item);
//     }
// };

// logItems(['Mango', 'Kiwi', 'Poly', 'Ajax']);
// logItems([1, 2, 3, 4, 5]);
// logItems(['–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–Ω–∞—É—à–Ω–∏–∫–∏', '—á–∞—Å—ã']);

//? ___________________________________________

// const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n'];
// // const loginToFind = 'poly1scute';
// // let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

// const findLogin = function (allLogins, loginToFind) {
//     return allLogins.includes(loginToFind)
//         ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`
//         : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;

//     //! ___________________________________________

//     // for (const login of allLogins) {
//     //     if (login === loginToFind) {
//     //         return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//     //     }
//     // }

//     // return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
// };

// console.log(findLogin(logins, 'avocod3r'));
// console.log(findLogin(logins, 'k1widab3st'));
// console.log(findLogin(logins, 'jam4l'));
// console.log(findLogin(logins, 'poly1scute'));

//? ___________________________________________

// const findSmallestNumber = function (numbers) {
//     let smallestNumber = numbers[0];

//     for (const number of numbers) {
//         if (number < smallestNumber) {
//             smallestNumber = number;
//         }
//     }
//     return smallestNumber;
// };

// console.log(findSmallestNumber([3, 8, 12, -2, 15]));
// console.log(findSmallestNumber([100, 54, 8, 12, 47]));
// console.log(findSmallestNumber([7, 21, 84, 15, 4]));

//? ___________________________________________

// const changeCase = function (string) {
//     const letters = string.split('');
//     let invertedString = '';

//     for (const letter of letters) {
//         const isInLowerCase = letter === letter.toLowerCase();

//         invertedString += isInLowerCase ? letter.toUpperCase() : letter.toLowerCase();
//     }

//     return invertedString;
// };

// console.log(changeCase('qweRTY'));
// console.log(changeCase('mAnGo'));
// console.log(changeCase('AjAx'));

//? ___________________________________________

// const title = 'Top 10 benefits of React framework';

// const slugify = function (string) {
//     return string.toLowerCase().split(' ').join('-')
// }

// console.log(slugify('qweqwe qweqwe qweqwe'));
// console.log(slugify('Hello my name is'));
// console.log(slugify('QweEQ aOLIIPki POKJ'));

//? ___________________________________________

// const fn = function () {
//     console.log(arguments);

// const args = Array.from(arguments)

//     console.log(args);
// };

// fn(1, 2, 3);
// fn(1, 2, 3, 4, 5);
// fn(1, 2, 3, 4, 5, 6, 7);

//! ___________________________________________

// const fn = function (a, b, ...args) {
//     console.log(`${a} ${b}`);
//     console.log(args);
// };

// fn(1, 2, 3);
// fn(1, 2, 3, 4, 5);
// fn(1, 2, 3, 4, 5, 6, 7);

//? ___________________________________________

// const add = function (...args) {
//     console.log(args);

//     let total = 0

//     for (const arg of args) {
//         total += arg
//     }

//     return total
// };

// console.log(add(1, 2, 3));
// console.log(add(1, 2, 4, 5, 6));

//? ___________________________________________

// const filterNumbers = function (array, ...args) {
//     console.log(array);
//     console.log(args);

//     const uniqueElements = [];

//     for (const element of array) {
//         if (args.includes(element)) {
//             uniqueElements.push(element);
//             console.log(`${element} –µ—Å—Ç—å –≤–µ–∑–¥–µ!`);
//         }
//     }

//     return uniqueElements;
// };

// console.log(filterNumbers([1, 2, 3, 4, 5], 10, 15, 2, 3, 8));
// console.log(filterNumbers([10, 15, 25, 30], 23, 30, 18, 15));
// console.log(filterNumbers([100, 200, 300, 400, 500], 7, 12, 200, 64));

//? ___________________________________________
//! –û–±—ä–µ–∫—Ç—ã
//? ___________________________________________

// const book = {
//     title: 'The Last Kingdom',
//     author: 'Bernard Cornwell',
//     genres: ['historical prose', 'adventure'],
//     isPublic: true,
//     rating: 8.38,
// };

// console.log(book);

// const user = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: {
//         country: 'Jamaica',
//         city: 'Ocho Rios',
//     },
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// console.log(user);

//? ___________________________________________
//! –°–≤–æ–π—Å—Ç–≤–∞
//? ___________________________________________

// const playlist = {
//     name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//     rating: 5,
//     tracks: ['track-1', 'track-2', 'track-3'],
//     trackCount: 3,
// };

// playlist.price = 200;
// playlist.array = [1, 2, 3];
// playlist.location = {
//     country: 'Canada',
//     province: 'AB',
//     city: 'Calgary',
// };

// console.log(playlist);
// console.log(playlist);

// console.log(playlist.rating);
// console.log(playlist.name);
// console.log(playlist.trackCount);
// console.log(playlist.tracks);

const propertyName = 'tracks';

// console.log(playlist.propertyName);
// console.log(playlist[propertyName]);

//! –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å —Å–≤–æ-—Ç–≤:

// const username = 'Mango';
// const email = 'mango@mail.com';

// const signupData = {
//     username,
//     email,
// };

// console.log(signupData);

//! –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤-–≤–∞

//* <input name='color' value='tomato' ></input>

// const inputName = 'color';
// const inputValue = 'tomato';

// const colorPickerDate = {
//     [inputName]: inputValue,
// };

// console.log(colorPickerDate);

//! –°—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø {} === {}

// const a = { x: 1, y: 2 };
// const b = a;

// console.log(b === a);

// a.c = 100;

// console.log(a);
// console.log(b);

//! –ú–∞—Å—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã

// const a = [1, 2, 3];

// a.hello = ':)'

// console.log(a);

// const fn = function () {
//     console.log('hello');
// };

// fn.hello = ':)'

// // console.log(fn);
// console.dir(fn);
// console.log(fn.hello);

//? ___________________________________________

// const playlist = {
//     name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//     rating: 5,
//     tracks: ['track-1', 'track-2', 'track-3'],
//     // getName: function () {
//     //     console.log('This is the getName');
//     // },
//     // getName() {
//     //     console.log('This is the getName');
//     // },

//     changeName(newName) {
//         console.log('this inside changeName', this);

//         this.name = newName;
//     },

//     addTrack(track) {
//         this.tracks.push(track);
//     },

//     updateRating(newRating) {
//         this.rating = newRating;
//     },

//     getTrackCount() {
//         return this.tracks.length;
//     },
// };
// // playlist.getName();
// console.log(playlist);

// playlist.changeName('New cool name');

// playlist.addTrack('new track');
// console.log(playlist);

// playlist.updateRating(10);
// console.log(playlist);

//? ___________________________________________
//! –ü–µ—Ä–µ–±–æ—Ä —á–µ—Ä–µ–∑ for...in –∏ Object.keys | values | entries

// const feedback = {
//     good: 5,
//     neutral: 10,
//     bad: 3,
// };

// let totalFeedback = 0;

// const keys = Object.keys(feedback)

// console.log(keys);

// for (const key of keys) {
//     console.log(key);
//     console.log(feedback[key]); // –î–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é

// }

// const values = Object.values(feedback);
// console.log(values);

// for (const value of values) {
//     console.log(value);
//     totalFeedback += value;
// }

// console.log('totalFeedback: ', totalFeedback);

// const keys = [];
// const values = [];
// const advert = {
//     service: 'apt',
// };
// const apartment = Object.create(advert);
// apartment.descr = 'Spacious apartment in the city center';
// apartment.rating = 4;
// apartment.price = 2153;

// for (const key in apartment) {
//     // Change code below this line

//     if (apartment.hasOwnProperty(key)) {
//         keys.push(key)
//         values.push(apartment[key])
//     }

//     // Change code above this line
// }

// console.log(keys);
// console.log(values);
//? ___________________________________________

// const friends = [
//     { name: 'Mango', online: false },
//     { name: 'Kiwi', online: true },
//     { name: 'Poly', online: true },
//     { name: 'Ajax', online: false },
// ];

// console.table(friends);

// for (const friend of friends) {
//     console.log(friend.name);

//     friend.newprpo = 555;
// }

// console.table(friends);

//* –ò—â–µ–º –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏

// const findFriendByName = function (allFriends, name) {
//     for (const friend of allFriends) {
//         if (friend.name === name) {
//             return '–ù–ê–®–õ–ò';
//         }
//     }
//     return '–ù–ï –ù–ê–®–õ–ò';
// };

// console.log(findFriendByName(friends, 'Poly'));
// console.log(findFriendByName(friends, 'Chelsy'));

//? ___________________________________________

// const getAllNames = function (allFriends) {
//     const names = [];

//     for (const friend of allFriends) {
//         // console.log(friend.name);
//         names.push(friend.name);
//     }
//     return names;
// };

// console.log(getAllNames(friends));

//? ___________________________________________

// const getOnlineFriends = function (allFriends) {

//     const onlineFriends = []

//     for (const friend of allFriends) {

//         if (friend.online)
//            onlineFriends.push(friend)
//     }
//     return onlineFriends
// };

// console.log(getOnlineFriends(friends));

//? ___________________________________________

// const getOfflineFriends = function (allFriends) {

//     const offlineFriends = [];

//     for (const friend of allFriends) {
//         if (!friend.online) {
//             offlineFriends.push(friend);
//         }

//     }
//     return offlineFriends
// };

// console.log(getOfflineFriends(friends));

//? ___________________________________________

// const getFriendsByOnlineStatus = function (allFriends) {
//     const friendsByStatus = {
//         online: [],
//         offline: [],
//     };

//     for (const friend of allFriends) {
//         if (friend.online) {
//             friendsByStatus.online.push(friend);
//             continue;
//         }
//         friendsByStatus.offline.push(friend);
//     }

//     return friendsByStatus;
// };

// console.log(getFriendsByOnlineStatus(friends));

//? ___________________________________________

// const x = {
//     a: 1,
//     b: 2,
//     c: 50,
//     d: 100,
// };

// console.log(Object.keys(x));
// console.log(Object.keys(x).length);

//? ___________________________________________
/* //! –û–ø–µ—Ä–∞—Ü–∏—è spread (—Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ)
 * //! Arrey.prototype.concat() –∏ –∞–Ω–∞–ª–æ–≥ —á–µ—Ä–µ–∑ spread
 */

// const numbers = [1,2,3].concat([4,5,6], [7,8,9])

// const numbers = [0,5,10, ...[1, 2, 3], 4, 5];
// const numbers = [...[1, 2, 3], ...[4, 5, 6], ...[7, 8, 9]];

// console.log(numbers);

/*
 * //! –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –º–∞–ª–µ–∫—å–µ–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—á–∏—Å–ª–∞)
 */

// const temps = [18, 14, 12, 21, 17, 29, 24];
//!________________________________________

// const a = [{ x: 1 }, { y: 2 }, { z: 3 }];
// const b = [...a];

// console.log(a);
// console.log(b);

// a[0].x = 1000

// console.log(a);
// console.log(b);

//? ___________________________________________
//! –°—à–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –æ–¥–∏–Ω —á–µ—Ä–µ–∑ concat() –∏ spread

// const lastWeekTemps = [1, 2, 3];
// const currentTemps = [4, 5, 6];
// const nextWeekTemps = [7, 8, 9];

// const allTemps = lastWeekTemps.concat(currentTemps, nextWeekTemps) //* –ú–µ—Ç–æ–¥ concat()

// const allTemps = [...lastWeekTemps, ...currentTemps, ...nextWeekTemps]    //* –ú–µ—Ç–æ–¥ spread

// console.log(allTemps);

//? ___________________________________________
/* //! –†–∞—Å–ø—ã–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
 * //! -Object.prototype/assign() –∏ spread
 */

// const a = { x: 1, y: 2 };
// const b = { x: 0, z: 3 };

// const c = Object.assign({}, a, b)  //* —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥

// const c = {
//     ...a,
//     ...b,
// };

// console.log(c);

// const defaultSettings = {
//     theme: 'light',
//     showNotifications: true,
//     hideSidebar: false,
// };

// const userSettings = {
//     // theme: 'dark',
//     showNotifications: false,
//     hideSidebar: true,
// };

// const finalSettings = {
//     ...defaultSettings,
//     ...userSettings
// }

// console.log(finalSettings);

//? ___________________________________________
/* //! –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
 * //! - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * //! - –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
 */

// const playlist = {
//     name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//     rating: 5,
//     tracks: ['track-1', 'track-2', 'track-3'],
//     // trackCount: 3,
// };

// const {
//     name,
//     rating,
//     tracks,
//     trackCount: numberOfTracks = 2,
//     author = 'unknown'
// } = playlist;

// // console.log(name, rating, tracks, numberOfTracks);
// console.log(numberOfTracks);
// console.log(author);

/*
 * //! –ì–ª—É–±–æ–∫–∞—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
 */

// const profile = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: 'Ocho Rios, Jamaica',
//     avatar: 'http//s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// const {
//     name,
//     tag,
//     location,
//     avatar,
//     stats: { followers, views, likes },
// } = profile;

// console.log(followers);

//? ___________________________________________
//! –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤

// const rgb = [255, 100, 80];

// const [red, green, blue] = rgb;
// const [red, , blue] = rgb; // –ø—Ä–æ–ø—É—Å–∫ —Å–≤–æ–π—Å—Ç–≤–∞
// console.log(red, blue);

// console.log(red, green, blue);

// const authors = {
//     kiwi: 4,
//     poly: 7,
//     ajax: 9,
//     mango: 6,
// };

// // const ratings = Object.values(authors)
// // console.log(Math.max(...ratings));

// const entries = Object.entries(authors);

// for (const /*entry*/ [name, rating] of entries) {
//     // const [name, rating] = entry

//     // const name = entry[0];
//     // const rating = entry[1];

//     console.log(name, rating);
// }

//? ___________________________________________
//! –û–ø–µ—Ä–∞—Ü–∏—è rest (—Å–±–æ—Ä)

// const profile = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: 'Ocho Rios, Jamaica',
//     avatar: 'http//s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// // const { name, tag, location, ...restProps } = profile;

// // console.log(profile);
// // console.log(restProps);

// const showProfileInfo = function (userProfile) {
//     const {
//         name,
//         tag,
//         location,
//         // avatar,
//         // stats: { followers, views, likes },
//         ...restProps
//     } = userProfile;

//     console.log(userProfile);
//     console.log(restProps);
// };

// showProfileInfo(profile);

//? ___________________________________________
//! EXAMPLE

// const profile = {
//     name: 'Jacques Gluke',
//     tag: 'jgluke',
//     location: 'Ocho Rios, Jamaica',
//     avatar: 'http//s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//     stats: {
//         followers: 5603,
//         views: 4827,
//         likes: 1308,
//     },
// };

// const makeProfileMarkup = function (userProfile) {
//     const {
//         avatar = 'http://i.pravatar.cc/400?img=6',
//         name,
//         tag,
//         location = 'Planet Earth',
//         stats: { followers, views, likes },
//     } = userProfile;

//     return `<div>
//             <img src="${avatar}" alt="user avatar">
//             <p>
//                 ${name}
//                 <span>@${tag}</span>
//             </p>
//             <p>Location: ${location}</p>
//             <ul>
//                 <li>Followers: ${followers}</li>
//                 <li>Views: ${views}</li>
//                 <li>Likes: ${likes}</li>
//             </ul>
//         </div>`;
// };

// const markup = makeProfileMarkup(profile)

// console.log(markup);

// document.body.insertAdjacentHTML('afterbegin', markup)

//? ___________________________________________

//! CART_____________________

// const cart = {
//     items: [],
//     getItems() {
//         return this.items;
//     },
//     add(product) {
//         for (const item of this.items) {
//             if (item.name === product.name) {
//                 item.quantity += 1;
//                 return;
//             }
//         }

//         const newProduct = {
//             ...product,
//             quantity: 1,
//         };

//         this.items.push(newProduct);
//     },
//     remove(productName) {
//         const { items } = this;

//         for (let i = 0; i < items.length; i += 1) {
//             console.log(items[i]);
//             const { name } = items[i];

//             if (productName === name) {
//                 console.log('hello', productName);

//                 items.splice(i, 1);
//             }
//         }
//     },
//     clear() {
//         this.items = [];
//     },
//     countTotalPrice() {
//         const { items } = this;

//         let total = 0;

//         for (const { price, quantity } of items) {
//             total += price * quantity
//             console.log(total);
//         }

//         return total;
//     },
//     increaseQuantity(productName) {},
//     decreaseQuantity(productName) {},
// };

// console.log(cart.getItems());
// console.table(cart.getItems());

// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçê', price: 60 });
// cart.add({ name: 'üçì', price: 110 });

// console.table(cart.getItems());

// cart.remove('üçã');
// console.table(cart.getItems());

// console.log('Total: ', cart.countTotalPrice());

// cart.clear();
// console.log(cart.getItems());
// // console.table(cart);

//! CART_____________________

//? ___________________________________________
//! CALLBACK

// const fnA = function (message, callback) {
//     console.log(message);

//     console.log(callback);
//     callback(100)
// };

// const fnB = function (number) {
//     console.log('–≠—Ç–æ –ª–æ–≥ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ fnB', number);
//   }

// fnA('qweqwe', fnB);

//? ___________________________________________
//! –§—É–Ω–∫—Ü–∏—è doMath(a, b, callback)

// const doMath = function (a, b, callback) {
//     const result = callback(a, b);

//     console.log(result);
// };

// doMath(2, 3, function (x, y) {
//     return x + y;
// });
// doMath(10, 8, function (x, y) {
//     return x - y;
// });

//? ___________________________________________
//! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π

// const buttonRef = document.querySelector('.js-button');

// buttonRef.addEventListener('click', function () {
//     console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ');
// });

// function addEventListener(eventType, callback) {
//     // –ï—Å–ª–∏
//     if (eventType === event) {
//         callback();
//     }
// }

//! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è

// const onGetPositionSucces = function (position) {
//     console.log('–≠—Ç–æ –≤—ã–∑–æ–≤: onGetPositionSucces');
//     console.log(position);
// }

// const onGetPositionError = function (error) {
//     console.log(error);
// }

// window.navigator.geolocation.getCurrentPosition(onGetPositionSucces, onGetPositionError);

//! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã

// const callback = function () {
//     console.log('–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ');
// }

// console.log('–í –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —Ç–∞–π–º–∞—É—Ç–æ–º');

// setTimeout(callback, 2000)

// console.log('–í –∫–æ–¥–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞');

/* //! –û—Ç–ª–æ–∂–µ–Ω—ã–π –≤—ã–∑–æ–≤: http-–∑–∞–ø—Ä–æ—Å
 * //! - API URL: https://pokeapi.co/api/v2/pokemon
 */

// const onRequestSucces = function (response) {
//     console.log('–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
//     console.log(response);
// }

// fetch('https://pokeapi.co/api/v2/pokemon').then(res => res.json()).then(onRequestSucces);

// console.log('–ø–µ—Ä–µ–¥ fetch');
// console.log('–ø–æ—Å–ª–µ fetch');

//! –§–∏–ª—å—Ç—Ä

// const filter = function (array, test) {
//     const filteredArray = [];

//     for (const el of array) {
//         console.log(el);
//         const passed = test(el);
//         if (passed) {
//             filteredArray.push(el);
//         }
//     }
//     console.log(filteredArray);
//     return filteredArray;
// };

// filter([1, 2, 3, 4, 5], function (value) {
//     return value >= 3;
// });
// filter([1, 2, 3, 4, 5, 6, 7, 8], function (value) {
//     return value <= 4;
// });

// const fruits = [
//     { name: 'apples', quantity: 200, isFresh: true },
//     { name: 'grapes', quantity: 150, isFresh: false },
//     { name: 'bananas', quantity: 100, isFresh: true },
// ];

// filter(fruits, function (fruit) {
//     return fruit.quantity >= 120;
// });

//! –ó–ê–ú–´–ö–ê–ù–ò–ï

// const fnA = function (parameter) {
//     const innerVariable = '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA';

//     const innerFunction = function () {
//         console.log(parameter);
//         console.log(innerVariable);
//         console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction');
//     };

//     return innerFunction;
// };

// const fnB = fnA(777);

// fnB();

// console.log(fnB);

//! –ü–æ–≤–∞—Ä—ë–Ω–æ–∫ (–ø—Ä–∏–º–µ—Ä)

// const makeDish = function (sheffName, dish) {
//     console.log(`${sheffName} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
// };

// makeDish('Mango', '–ø–∏—Ä–æ–∂–æ–∫');
// makeDish('Mango', '–æ–º–ª–µ—Ç');
// makeDish('Mango', '—á–∞–π');

// makeDish('Poly', '–∫–æ—Ç–ª–µ—Ç—ã');
// makeDish('Poly', '—Å—É–ø–∏–∫');
// makeDish('Poly', '–∫–æ—Ñ–µ');

// const makeSheff = function (name) {
//     const makeDish = function (dish) {
//     console.log(`${name} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);

//     };

//     return makeDish;
// };

// const mango = makeSheff('Mango')
// const poly = makeSheff('Poly')

// console.dir(mango);
// console.log(mango);

// mango('–∫–æ—Ç–ª–µ—Ç—ã')
// poly('—á–∞–π')

//! –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è

// const floatingPoint = 3.456789;
// const someInt = Math.round(floatingPoint); // 3
// const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46

// // const rounder = function (number, places) {
// //     return Number(number.toFixed(places));
// // };

// const rounder = function (places) {
//     return function (number) {
//         return Number(number.toFixed(places));
//     };
// };

// const rounder2 = rounder(2);
// const rounder3 = rounder(3);

// console.log(rounder3(3.4567));
// console.log(rounder2(6.4567));

// rounder2(floatingPoint); //  3.46
// rounder3(floatingPoint); //  3.457

//! –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

// const salatyManagerFactory = function (employeeName, baseSalary) {
//     let salaty = baseSalary;

//     return {
//         raise(amount) {
//             salaty += amount
//         },
//         lower(amount) {
//             salaty -= amount;
//         },
//         current() {
//             return `–¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ${employeeName} - ${salaty}`;
//         },
//     };
// }
// const salaryManager = salatyManagerFactory('Mango', 5000)

// console.log(salaryManager.raise(222));
// console.log(salaryManager.current());

//? ___________________________________________

// const myLibFactory = function () {
//     let value = 0;

//     const add = function (num) {
//     value += num
// }

//     return {
//         add,
//         getValue() {
//             return value
//         }
//     };
// };

// const myLib = myLibFactory()

// console.log(myLib);

// console.log(myLib.getValue());
// myLib.add(10)
// console.log(myLib.getValue());

//? ___________________________________________
/*//! –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 * //!      - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
 * //!      - –Ø–≤–Ω—ã–π –∏ –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
 * //!      - –ê—Ä–≥–µ–º–µ–Ω—Ç—ã
 * //!      - –ù–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
 */

// const add = function (a, b, c) {
//     console.log(arguments);
//     console.log(a, b, c);
//     return a + b + c;
// };

// const addArrow = (...args) => {
//     console.log(args);
//     // return a + b + c;
// };

// const addArrow1 = (a, b, c) => 5 + 10 + 15;
// console.log(addArrow1());

// // console.log(add(5, 10, 15));

// console.log(addArrow(5, 10, 15));

//? ___________________________________________

// const fnA = function () {
//     return {
//         a: 5,
//     };
// };

// console.log(fnA());

// const arrowFnA = () => ({ arrowA: 5 });

// console.log(arrowFnA());

//? ___________________________________________

// const onGetPositionSucces = (position) => {
//     console.log('–≠—Ç–æ –≤—ã–∑–æ–≤: onGetPositionSucces');
//     console.log(position);
// }

// const onGetPositionError = (error) => {
//     console.log(error);
// }

// window.navigator.geolocation.getCurrentPosition(onGetPositionSucces, onGetPositionError);

//? ___________________________________________

// const filter = (array, test) => {
//     const filteredArray = [];

//     for (const el of array) {
//         console.log(el);
//         const passed = test(el);
//         if (passed) {
//             filteredArray.push(el);
//         }
//     }
//     return filteredArray;
// };

// filter([1, 2, 3, 4, 5], value => value >= 3);
// filter([1, 2, 3, 4, 5, 6, 7, 8], value => value <= 4);

// const fruits = [
//     { name: 'apples', quantity: 200, isFresh: true },
//     { name: 'grapes', quantity: 150, isFresh: false },
//     { name: 'bananas', quantity: 100, isFresh: true },
// ];

// filter(fruits, fruit => fruit.quantity >= 120)

//? ___________________________________________

/*  //!  –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 *  //!     - —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 *  //!     - —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
 *  //!     - –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */

// const add = (a, b) => a + b;
// const logMessage = a => a;
// const great = () => 'Hello';

// console.log(add(5, 20));
// console.log(logMessage('–ü—Ä–∏–≤–µ—Ç'));
// console.log(great());

// const showThis = () => {
//     console.log('this in showThis: ', this);
// }

// showThis()

// const user = { name: 'Mango' }
// user.showContext = showThis
// user.showContext();

//? ___________________________________________

// const user = {
//     fullName: 'Mango',
//     showName() {
//         console.log('this: ', this);
//         console.log('this.fullName: ', this.fullName);

//         const inner =  () => {
//             console.log('this in inner: ', this);
//         }

//         inner()
//     }

// }

// user.showName()

//? ___________________________________________

//? ___________________________________________

//! –Ø–≤–Ω—ã–π –∏ –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
//! –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ arguments

//!_____________
// const fn = feets => {
//     const daySpeed = 7
//     const nightSpeed = 2

//     let total = 0
//     let days = 0

//     while (total < feets) {
//         total += daySpeed
//         days += 1

//         if (total < feets) {
//             total -= nightSpeed
//         }
//     }

//     console.log(days);
//     return days
// }

// fn(128)
// fn(42);
// fn(31);

//!_______

// const objA = {
//     x: 5,
//     showX() {
//         console.log(this.x);

//         const objB = {
//             y: 10,
//             showThis() {
//                 console.log('this –≤ objB.showThis: ', this);
//             }
//         }
//         objB.showThis()
//     }
// }

// objA.showX()

//!_______

// const numbers = [1, 5, 2, 4, 3];

// const greaterThenTwo = numbers.filter(num => num > 2)
// console.log(greaterThenTwo);

// const multByTwo = greaterThenTwo.map(num => num * 3)
// console.log(multByTwo);

// const sorted = multByTwo.sort((a, b) => a - b)
// console.log(sorted);

// const res = numbers
//     .filter(num => num > 2)
//     .map(num => num * 3)
//     .sort((a, b) => a - b)

//     console.log(res);

// const players = [
//     { id: 'id-1', tag: 'Mango', isOnline: true, rank: 800 },
//     { id: 'id-2', tag: 'Poly', isOnline: false, rank: 600 },
//     { id: 'id-3', tag: 'Ajax', isOnline: true, rank: 100 },
//     { id: 'id-4', tag: 'Kiwi', isOnline: true, rank: 400 },
// ];

// const onlineAndSorted = players
//     .filter(player => player.isOnline)
//     .sort((prevPlayer, nextPlayer) => prevPlayer.rank - nextPlayer.rank);

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, points: 54, isOnline: false, rank: 800 },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, points: 92, isOnline: true, rank: 600 },
//     { id: 'player-4', name: 'Kiwi', timePlayed: 230, points: 48, isOnline: true, rank: 400 },
//     { id: 'player-3', name: 'Ajax', timePlayed: 150, points: 71, isOnline: false, rank: 100 },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, points: 48, isOnline: true, rank: 400 },
// ];

// // const updatedPlayers = players.map(player => ({
// //     ...player,
// //     points: player.points + player.points * 0.1,
// // }));

// const playerIdToUpdate = 'player-3';

// const updatedPlayers = players.map(player =>
//     player.id === playerIdToUpdate ? { ...player, timePlayed: player.timePlayed + 50 } : player
// );

// console.table(updatedPlayers);

//? ___________________________________________
/*
 *  –ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤:
 *      - forEach
 *      - map
 *      - filter
 *      - find
 *      - every –∏ some
 *      - reduce
 *      - sort
 *   - –ß–µ–π–Ω–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤
 */

//!--------------------------------

/*
 *      Array.prototype.forEach(callback(currentValue, index, array), thisArg)
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 *          - –ó–∞–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π for, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ü–∏–∫–ª
 */

// const numbers = [5, 10, 15, 20, 25];

// numbers.forEach(function (number, index, array) {
//     console.log('number', number);

//     array[index] = 20;
// });

// console.log(numbers);

/*
 *      Array.prototype.map()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏–Ω—ã
 */

// const numbers = [5, 10, 15, 20, 25];

// const doubleNums = numbers.map(number => number * 2);

// console.log('doubleNums', doubleNums);

//? ___________________________________________

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, points: 54, online: false, rank: 800 },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, points: 92, online: true, rank: 600 },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, points: 48, online: true, rank: 400 },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, points: 71, online: false, rank: 100 },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, points: 48, online: true, rank: 400 },
// ];
// console.table(players);

//! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–º—ë–Ω –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤

// const playersNames = players.map(player => player.name);
// console.log('playersNames', playersNames);

// const playerIds = players.map(player => player.id);
// console.log('playerIds', playerIds);

// const res = players.map(({ name, online }) => ({ name, online }));
// console.log('res', res);

//! –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 10%

// const updatedPlayers = players.map(player => ({
//     ...player,
//     points: player.points * 1.1,
//     type: 'Gamer',
// }));
// console.table(updatedPlayers);

//! –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –∏–≥—Ä–æ–∫–∞ –ø–æ ID

// const playerIdToUpdate = 'player-3';

// const updatedPlayers = players.map(player =>
//     // –¢–µ—Ä–Ω–∞—Ä–Ω–∏–∫
//     playerIdToUpdate === player.id ? { ...player, timePlayed: (player.timePlayed += 300) } : player
// );

// console.log(updatedPlayers);

/*
 *      Array.prototype.filter()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (—Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π)
 *          - –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é callback - —Ñ—É–Ω–∫—Ü–∏–∏
 *              - –µ—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª true —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤
 *              - –µ—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª false —ç–ª–µ–º–µ–Ω—Ç –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤
 */

// const numbers = [5, 10, 15, 20, 25];

// const filterNumbers = numbers.filter(number => number < 15);
// console.log(filterNumbers);

// //! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö online –∏–≥—Ä–æ–∫–æ–≤

// const onlinePlayers = players.filter(({ online }) => online);
// console.table(onlinePlayers);

// //! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö offline –∏–≥—Ä–æ–∫–æ–≤

// const offlinePlayers = players.filter(({ online }) => !online);
// console.table(offlinePlayers);

// //! –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º –±–æ–ª—å—à–µ 250

// const hardcorePlayers = players.filter(({ timePlayed }) => timePlayed > 250)
// console.table(hardcorePlayers);

/*
 *      Array.prototype.find()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é –∏–ª–∏ undefined
 */
// const numbers = [5, 10, 15, 20, 25];

// const number = numbers.find(number => number === 10)
// console.log(number);

// const players = [
//     {
//         id: 'player-1',
//         name: 'Mango',
//         timePlayed: 310,
//         points: 54,
//         online: false,
//         rank: 800,
//     },
//     {
//         id: 'player-2',
//         name: 'Poly',
//         timePlayed: 470,
//         points: 92,
//         online: true,
//         rank: 600,
//     },
//     {
//         id: 'player-3',
//         name: 'Kiwi',
//         timePlayed: 230,
//         points: 48,
//         online: true,
//         rank: 400,
//     },
//     {
//         id: 'player-4',
//         name: 'Ajax',
//         timePlayed: 150,
//         points: 71,
//         online: false,
//         rank: 100,
//     },
//     {
//         id: 'player-5',
//         name: 'Chelsy',
//         timePlayed: 80,
//         points: 48,
//         online: true,
//         rank: 400,
//     },
// ];

//! –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ ID

// const playerIdToFind = 'player-3';

// const playerWithId = players.find(({ id }) => id === playerIdToFind);
// // console.log(playerWithId);

// const findPlayerById = (allPlayers, playerId) => allPlayers.find(({ id }) => id === playerId);

// console.log(findPlayerById(players, 'player-1'));
// console.log(findPlayerById(players, 'player-4'));

//! –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏

// const playerNameToFind = 'Mango';
// const playerWithName = players.find(({ name }) => name === playerNameToFind);
// console.log(playerWithName);

/*
 *      Array.prototype.every()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é
 */

// const isAllOnline = players.every(({ online }) => online);
// console.log('isAllOnline', isAllOnline);

/*
 *      Array.prototype.some()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é
 */

// const isAnyOnline = players.some(({online}) => online)
// console.log('isAnyOnline', isAnyOnline);

// const anyHardcorePlayers = players.some(({ timePlayed }) => timePlayed > 400)
// console.log('anyHardcorePlayers', anyHardcorePlayers);

/*
 *      Array.prototype.reduce()
 *          - –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ —É–≥–æ–¥–Ω–æ ü§Ø
 *          - –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞ —Å–≤–µ—Ç–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Å —É–º–æ–º
 */

// const numbers = [5, 10, 15, 20, 25];

// const total = numbers.reduce((acc, number) => acc + number, 0);

// console.log(total);

//? ___________________________________________
//! –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –∑–∞—Ä–ø–ª–∞—Ç—É

// const salary = {
//     mango: 100,
//     poly: 50,
//     ajax: 150,
// };

// const totalSalary = Object.values(salary).reduce(
//     (total, value) => total + value
// );
// console.log('totalSalary', totalSalary);

//! –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, online: true },
// ];

// const totalTimePlayed = players.reduce(
//     (totalTime, player) => totalTime + player.timePlayed,
//     0
// );
// console.log('totalTimePlayed', totalTimePlayed);

//! –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã

// const cart = [
//     { label: 'Apples', price: 100, quantity: 2 },
//     { label: 'Bananas', price: 120, quantity: 3 },
//     { label: 'Lemons', price: 70, quantity: 4 },
// ];

// const totalAmount = cart.reduce(
//     (total, {price, quantity}) =>  total + price * quantity,
//     0
// );

// console.log(totalAmount);

//? ___________________________________________
//! –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–æ –∏–∑ —Ç–≤–∏—Ç–æ–≤

// const tweets = [
//     { id: '000', likes: 5, tags: ['js', 'nodejs'] },
//     { id: '001', likes: 2, tags: ['html', 'css'] },
//     { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },
//     { id: '003', likes: 8, tags: ['css', 'react'] },
//     { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },
// ];

// const allTags = tweets.reduce((acc, tweet) => [...acc, ...tweet.tags], []);
// tags.push(...tweet.tags);
// return tags;

//! –í–µ–¥–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤

//! #1
// console.log(allTags);
// const tagsStats = allTags.reduce((acc, tag) => {

//     if (acc[tag]) {
//         acc[tag] += 1

//         return acc
//     }

//     acc[tag] = 1

//     return acc
// }, {})
// console.log(tagsStats);

//! #2
// console.log(allTags);
// const tagsStats = allTags.reduce((acc, tag) => {

//     return {
//         ...acc,
//         [tag]: acc[tag] ? acc[tag] + 1 : 1,
//     };
// }, {});
// console.log(tagsStats);

//! #3
// console.log(allTags);
// const tagsStats = allTags.reduce((acc, tag) => ({
//     ...acc,
//     [tag]: acc[tag] ? acc[tag] + 1 : 1,
// }), {});
// console.log(tagsStats);

//? ___________________________________________

/*
 *      Array.prototype.sort(callback(currentEl, nextEl){})
 *          - –°–æ—Ä—Ç–∏—Ç—Ä—É–µ—Ç –∏ –ò–ó–ú–ï–ù–Ø–ï–¢ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
 *          - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:
 *              - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
 *              - –ø—Ä–∏–≤–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫ —Å—Ç—Ä–æ–∫–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ [Unicode](http://unicode-table.com/en/)
 */

const numbers = [1, 9, 6, 2, 3];
// numbers.sort()
// console.log('numbers', numbers);

// const letters = ['b', 'B', 'a', 'A'];
// letters.sort()
// console.log('letters', letters);

/*
 *      compareFunction - —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (callback)
 *      –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ—ë –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
 *          - –µ—Å–ª–∏ compareFunction(A, B) –º–µ–Ω—å—à–µ 0, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç A –ø–µ—Ä–µ–¥ B
 *          - –µ—Å–ª–∏ compareFunction(A, B) –±–æ–ª—å—à–µ 0, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç B –ø–µ—Ä–µ–¥ A
 *          - –µ—Å–ª–∏ compareFunction(A, B) –≤–µ—Ä–Ω—ë—Ç 0, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç A –∏ B –Ω–∞
 *          –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É, –Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é
 *          –∫–æ –≤—Å–µ–º –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
 */

// numbers.sort((currentEl, nextEl) => {
//     return currentEl - nextEl
// })

// console.log(numbers);

/*
 *      –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
 *          - Array.prototype.slice()
 *          - –û–ø–µ—Ä–∞—Ü–∏—è spread
 */

// const copy = [...numbers]
// copy.sort()

// const ascSortedNumbers = [...numbers].sort((a, b) => a - b);
// const descSortedNumbers = [...numbers].sort((a, b) => b - a);

// console.log([1, 2, 3, 4, 5].reverse());  // .reverse()

// console.log('ascSortedNumbers', ascSortedNumbers); // console.log('copy', copy);
// console.log('descSortedNumbers', descSortedNumbers);
// console.log('numbers', numbers);

//! –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤

// const players = [
//     { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },
//     { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },
//     { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },
//     { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },
//     { id: 'player-5', name: 'Chelsy', timePlayed: 80, online: true },
// ];

//! –ü–æ –∏–≥—Ä–æ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
// const sortedByBestPlayer = [...players].sort(
//     (prevPlayer, nextPlayer) =>nextPlayer.timePlayed - prevPlayer.timePlayed
// );
// console.table(sortedByBestPlayer);
// console.log(sortedByBestPlayer);

// const sortedByWorstPlayer = [...players].sort(
//     (prevPlayer, nextPlayer) => prevPlayer.timePlayed - nextPlayer.timePlayed
// );
// console.table(sortedByWorstPlayer);
// console.log(sortedByWorstPlayer);

// const sortedByName = [...players].sort((a, b) => {
//     const res = a.name[0] < b.name[0]

//     if (res) {
//         return -1
//     }
//     if (!res) {
//         return 1
//     }
// })
// console.table(sortedByName);
// console.log(sortedByName);

/*
 *      Array.prototype.flat(depth)
 *          - –†–∞–∑–≥–ª–∞–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
 *          - –ü–æ —É—Å–æ–ª—á–∞–Ω–∏—é –≥–ª—É–±–∏–Ω–∞ 1
 */

// const array = [1, 2, [4, [5]], [6, [7, 8, [9]]]];
// console.log(array);
// console.log(array.flat());
// console.log(array.flat(2));
// console.log(array.flat(3));

/*
 *      Array.prototype.flatMap(callback)
 *          - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è map + flat
 */

const tweets = [
    { id: '000', likes: 5, tags: ['js', 'nodejs'] },
    { id: '001', likes: 2, tags: ['html', 'css'] },
    { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },
    { id: '003', likes: 8, tags: ['css', 'react'] },
    { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },
];

const allTags = tweets.reduce((acc, tweet) => [...acc, ...tweet.tags], []);

//!_____________________________________________
// const tags = tweets.map(t => t.tags).flat()
const tags = tweets.flatMap(t => t.tags);
console.log(tags);
//!_____________________________________________

const tagsStats = allTags.reduce(
    (acc, tag) => ({
        ...acc,
        [tag]: acc[tag] ? acc[tag] + 1 : 1,
    }),
    {}
);
console.log(tagsStats);
